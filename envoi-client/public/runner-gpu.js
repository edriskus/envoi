/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./gpu/runner-gpu.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./gpu/runner-gpu.ts":
/*!***************************!*\
  !*** ./gpu/runner-gpu.ts ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var gpu_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gpu.js */ \"./node_modules/gpu.js/src/index.js\");\n/* harmony import */ var gpu_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(gpu_js__WEBPACK_IMPORTED_MODULE_0__);\n\nvar exec;\nvar gpu = new gpu_js__WEBPACK_IMPORTED_MODULE_0__[\"GPU\"]({\n    mode: \"webgl2\",\n});\nfunction receiveCode(code) {\n    // eslint-disable-next-line no-new-func\n    exec = new Function(\"inputs\", \"updateProgress\", \"gpu\", code);\n}\nfunction receiveBlock(inputs) {\n    if (exec) {\n        var data = exec(inputs, registerProgress, gpu);\n        postMessage({ type: \"PUSH_BLOCK\", data: data });\n    }\n}\nfunction registerProgress(progress) {\n    postMessage({ type: \"PUSH_PROGRESS\", data: progress });\n}\nonmessage = function (message) {\n    var payload = message.data;\n    switch (payload.type) {\n        case \"PUSH_CODE\":\n            receiveCode(payload.data);\n            break;\n        case \"PUSH_BLOCK\":\n            receiveBlock(payload.data);\n            break;\n        default:\n            break;\n    }\n};\n\n\n//# sourceURL=webpack:///./gpu/runner-gpu.ts?");

/***/ }),

/***/ "./node_modules/acorn/dist/acorn.es.js":
/*!*********************************************!*\
  !*** ./node_modules/acorn/dist/acorn.es.js ***!
  \*********************************************/
/*! exports provided: version, parse, parseExpressionAt, tokenizer, parse_dammit, LooseParser, pluginsLoose, addLooseExports, Parser, plugins, defaultOptions, Position, SourceLocation, getLineInfo, Node, TokenType, tokTypes, keywordTypes, TokContext, tokContexts, isIdentifierChar, isIdentifierStart, Token, isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"version\", function() { return version; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseExpressionAt\", function() { return parseExpressionAt; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokenizer\", function() { return tokenizer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse_dammit\", function() { return parse_dammit; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LooseParser\", function() { return LooseParser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pluginsLoose\", function() { return pluginsLoose; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"addLooseExports\", function() { return addLooseExports; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Parser\", function() { return Parser; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"plugins\", function() { return plugins; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"defaultOptions\", function() { return defaultOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Position\", function() { return Position; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SourceLocation\", function() { return SourceLocation; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"getLineInfo\", function() { return getLineInfo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Node\", function() { return Node; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TokenType\", function() { return TokenType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokTypes\", function() { return types; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"keywordTypes\", function() { return keywords$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TokContext\", function() { return TokContext; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokContexts\", function() { return types$1; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIdentifierChar\", function() { return isIdentifierChar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isIdentifierStart\", function() { return isIdentifierStart; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Token\", function() { return Token; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNewLine\", function() { return isNewLine; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lineBreak\", function() { return lineBreak; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lineBreakG\", function() { return lineBreakG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"nonASCIIwhitespace\", function() { return nonASCIIwhitespace; });\n// Reserved word lists for various dialects of the language\n\nvar reservedWords = {\n  3: \"abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile\",\n  5: \"class enum extends super const export import\",\n  6: \"enum\",\n  strict: \"implements interface let package private protected public static yield\",\n  strictBind: \"eval arguments\"\n};\n\n// And the keywords\n\nvar ecma5AndLessKeywords = \"break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this\";\n\nvar keywords = {\n  5: ecma5AndLessKeywords,\n  6: ecma5AndLessKeywords + \" const class extends export import super\"\n};\n\nvar keywordRelationalOperator = /^in(stanceof)?$/;\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point above 128.\n// Generated by `bin/generate-identifier-regex.js`.\n\nvar nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e87\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nvar nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf2-\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nvar nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nvar nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by bin/generate-identifier-regex.js\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,477,28,11,0,9,21,190,52,76,44,33,24,27,35,30,0,12,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,26,230,43,117,63,32,0,257,0,11,39,8,0,22,0,12,39,3,3,20,0,35,56,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,270,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,689,63,129,68,12,0,67,12,65,1,31,6129,15,754,9486,286,82,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,15,7472,3104,541];\n\n// eslint-disable-next-line comma-spacing\nvar astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,525,10,176,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,4,9,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,280,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code, set) {\n  var pos = 0x10000;\n  for (var i = 0; i < set.length; i += 2) {\n    pos += set[i];\n    if (pos > code) { return false }\n    pos += set[i + 1];\n    if (pos >= code) { return true }\n  }\n}\n\n// Test whether a given character code starts an identifier.\n\nfunction isIdentifierStart(code, astral) {\n  if (code < 65) { return code === 36 }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes)\n}\n\n// Test whether a given character is part of an identifier.\n\nfunction isIdentifierChar(code, astral) {\n  if (code < 48) { return code === 36 }\n  if (code < 58) { return true }\n  if (code < 65) { return false }\n  if (code < 91) { return true }\n  if (code < 97) { return code === 95 }\n  if (code < 123) { return true }\n  if (code <= 0xffff) { return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code)) }\n  if (astral === false) { return false }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)\n}\n\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between regular\n// expressions and divisions. It is set on all token types that can\n// be followed by an expression (thus, a slash after them would be a\n// regular expression).\n//\n// The `startsExpr` property is used to check if the token ends a\n// `yield` expression. It is set on all token types that either can\n// directly start an expression (like a quotation mark) or can\n// continue an expression (like the body of a string).\n//\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nvar TokenType = function TokenType(label, conf) {\n  if ( conf === void 0 ) conf = {};\n\n  this.label = label;\n  this.keyword = conf.keyword;\n  this.beforeExpr = !!conf.beforeExpr;\n  this.startsExpr = !!conf.startsExpr;\n  this.isLoop = !!conf.isLoop;\n  this.isAssign = !!conf.isAssign;\n  this.prefix = !!conf.prefix;\n  this.postfix = !!conf.postfix;\n  this.binop = conf.binop || null;\n  this.updateContext = null;\n};\n\nfunction binop(name, prec) {\n  return new TokenType(name, {beforeExpr: true, binop: prec})\n}\nvar beforeExpr = {beforeExpr: true};\nvar startsExpr = {startsExpr: true};\n\n// Map keyword names to token types.\n\nvar keywords$1 = {};\n\n// Succinct definitions of keyword token types\nfunction kw(name, options) {\n  if ( options === void 0 ) options = {};\n\n  options.keyword = name;\n  return keywords$1[name] = new TokenType(name, options)\n}\n\nvar types = {\n  num: new TokenType(\"num\", startsExpr),\n  regexp: new TokenType(\"regexp\", startsExpr),\n  string: new TokenType(\"string\", startsExpr),\n  name: new TokenType(\"name\", startsExpr),\n  eof: new TokenType(\"eof\"),\n\n  // Punctuation token types.\n  bracketL: new TokenType(\"[\", {beforeExpr: true, startsExpr: true}),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {beforeExpr: true, startsExpr: true}),\n  braceR: new TokenType(\"}\"),\n  parenL: new TokenType(\"(\", {beforeExpr: true, startsExpr: true}),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", beforeExpr),\n  semi: new TokenType(\";\", beforeExpr),\n  colon: new TokenType(\":\", beforeExpr),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", beforeExpr),\n  arrow: new TokenType(\"=>\", beforeExpr),\n  template: new TokenType(\"template\"),\n  invalidTemplate: new TokenType(\"invalidTemplate\"),\n  ellipsis: new TokenType(\"...\", beforeExpr),\n  backQuote: new TokenType(\"`\", startsExpr),\n  dollarBraceL: new TokenType(\"${\", {beforeExpr: true, startsExpr: true}),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  eq: new TokenType(\"=\", {beforeExpr: true, isAssign: true}),\n  assign: new TokenType(\"_=\", {beforeExpr: true, isAssign: true}),\n  incDec: new TokenType(\"++/--\", {prefix: true, postfix: true, startsExpr: true}),\n  prefix: new TokenType(\"!/~\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  logicalOR: binop(\"||\", 1),\n  logicalAND: binop(\"&&\", 2),\n  bitwiseOR: binop(\"|\", 3),\n  bitwiseXOR: binop(\"^\", 4),\n  bitwiseAND: binop(\"&\", 5),\n  equality: binop(\"==/!=/===/!==\", 6),\n  relational: binop(\"</>/<=/>=\", 7),\n  bitShift: binop(\"<</>>/>>>\", 8),\n  plusMin: new TokenType(\"+/-\", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),\n  modulo: binop(\"%\", 10),\n  star: binop(\"*\", 10),\n  slash: binop(\"/\", 10),\n  starstar: new TokenType(\"**\", {beforeExpr: true}),\n\n  // Keyword token types.\n  _break: kw(\"break\"),\n  _case: kw(\"case\", beforeExpr),\n  _catch: kw(\"catch\"),\n  _continue: kw(\"continue\"),\n  _debugger: kw(\"debugger\"),\n  _default: kw(\"default\", beforeExpr),\n  _do: kw(\"do\", {isLoop: true, beforeExpr: true}),\n  _else: kw(\"else\", beforeExpr),\n  _finally: kw(\"finally\"),\n  _for: kw(\"for\", {isLoop: true}),\n  _function: kw(\"function\", startsExpr),\n  _if: kw(\"if\"),\n  _return: kw(\"return\", beforeExpr),\n  _switch: kw(\"switch\"),\n  _throw: kw(\"throw\", beforeExpr),\n  _try: kw(\"try\"),\n  _var: kw(\"var\"),\n  _const: kw(\"const\"),\n  _while: kw(\"while\", {isLoop: true}),\n  _with: kw(\"with\"),\n  _new: kw(\"new\", {beforeExpr: true, startsExpr: true}),\n  _this: kw(\"this\", startsExpr),\n  _super: kw(\"super\", startsExpr),\n  _class: kw(\"class\", startsExpr),\n  _extends: kw(\"extends\", beforeExpr),\n  _export: kw(\"export\"),\n  _import: kw(\"import\"),\n  _null: kw(\"null\", startsExpr),\n  _true: kw(\"true\", startsExpr),\n  _false: kw(\"false\", startsExpr),\n  _in: kw(\"in\", {beforeExpr: true, binop: 7}),\n  _instanceof: kw(\"instanceof\", {beforeExpr: true, binop: 7}),\n  _typeof: kw(\"typeof\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _void: kw(\"void\", {beforeExpr: true, prefix: true, startsExpr: true}),\n  _delete: kw(\"delete\", {beforeExpr: true, prefix: true, startsExpr: true})\n};\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\n\nvar lineBreak = /\\r\\n?|\\n|\\u2028|\\u2029/;\nvar lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code, ecma2019String) {\n  return code === 10 || code === 13 || (!ecma2019String && (code === 0x2028 || code === 0x2029))\n}\n\nvar nonASCIIwhitespace = /[\\u1680\\u180e\\u2000-\\u200a\\u202f\\u205f\\u3000\\ufeff]/;\n\nvar skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nvar ref = Object.prototype;\nvar hasOwnProperty = ref.hasOwnProperty;\nvar toString = ref.toString;\n\n// Checks if an object has a property.\n\nfunction has(obj, propName) {\n  return hasOwnProperty.call(obj, propName)\n}\n\nvar isArray = Array.isArray || (function (obj) { return (\n  toString.call(obj) === \"[object Array]\"\n); });\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nvar Position = function Position(line, col) {\n  this.line = line;\n  this.column = col;\n};\n\nPosition.prototype.offset = function offset (n) {\n  return new Position(this.line, this.column + n)\n};\n\nvar SourceLocation = function SourceLocation(p, start, end) {\n  this.start = start;\n  this.end = end;\n  if (p.sourceFile !== null) { this.source = p.sourceFile; }\n};\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nfunction getLineInfo(input, offset) {\n  for (var line = 1, cur = 0;;) {\n    lineBreakG.lastIndex = cur;\n    var match = lineBreakG.exec(input);\n    if (match && match.index < offset) {\n      ++line;\n      cur = match.index + match[0].length;\n    } else {\n      return new Position(line, offset - cur)\n    }\n  }\n}\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nvar defaultOptions = {\n  // `ecmaVersion` indicates the ECMAScript version to parse. Must\n  // be either 3, 5, 6 (2015), 7 (2016), or 8 (2017). This influences support\n  // for strict mode, the set of reserved words, and support for\n  // new syntax features. The default is 7.\n  ecmaVersion: 7,\n  // `sourceType` indicates the mode the code should be parsed in.\n  // Can be either `\"script\"` or `\"module\"`. This influences global\n  // strict mode and parsing of `import` and `export` declarations.\n  sourceType: \"script\",\n  // `onInsertedSemicolon` can be a callback that will be called\n  // when a semicolon is automatically inserted. It will be passed\n  // th position of the comma as an offset, and if `locations` is\n  // enabled, it is given the location as a `{line, column}` object\n  // as second argument.\n  onInsertedSemicolon: null,\n  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for\n  // trailing commas.\n  onTrailingComma: null,\n  // By default, reserved words are only enforced if ecmaVersion >= 5.\n  // Set `allowReserved` to a boolean value to explicitly turn this on\n  // an off. When this option has the value \"never\", reserved words\n  // and keywords can also not be used as property names.\n  allowReserved: null,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // When enabled, await identifiers are allowed to appear at the top-level scope,\n  // but they are still not allowed in non-async functions.\n  allowAwaitOutsideFunction: false,\n  // When enabled, hashbang directive in the beginning of file\n  // is allowed and treated as a line comment.\n  allowHashBang: false,\n  // When `locations` is on, `loc` properties holding objects with\n  // `start` and `end` properties in `{line, column}` form (with\n  // line being 1-based and column 0-based) will be attached to the\n  // nodes.\n  locations: false,\n  // A function can be passed as `onToken` option, which will\n  // cause Acorn to call that function with object in the same\n  // format as tokens returned from `tokenizer().getToken()`. Note\n  // that you are not allowed to call the parser from the\n  // callback—that will corrupt its internal state.\n  onToken: null,\n  // A function can be passed as `onComment` option, which will\n  // cause Acorn to call that function with `(block, text, start,\n  // end)` parameters whenever a comment is skipped. `block` is a\n  // boolean indicating whether this is a block (`/* */`) comment,\n  // `text` is the content of the comment, and `start` and `end` are\n  // character offsets that denote the start and end of the comment.\n  // When the `locations` option is on, two more parameters are\n  // passed, the full `{line, column}` locations of the start and\n  // end of the comments. Note that you are not allowed to call the\n  // parser from the callback—that will corrupt its internal state.\n  onComment: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // It is possible to parse multiple files into a single AST by\n  // passing the tree produced by parsing the first file as\n  // `program` option in subsequent parses. This will add the\n  // toplevel forms of the parsed file to the `Program` (top) node\n  // of an existing parse tree.\n  program: null,\n  // When `locations` is on, you can pass this to record the source\n  // file in every node's `loc` object.\n  sourceFile: null,\n  // This value, if given, is stored in every node, whether\n  // `locations` is on or off.\n  directSourceFile: null,\n  // When enabled, parenthesized expressions are represented by\n  // (non-standard) ParenthesizedExpression nodes\n  preserveParens: false,\n  plugins: {}\n};\n\n// Interpret and default an options object\n\nfunction getOptions(opts) {\n  var options = {};\n\n  for (var opt in defaultOptions)\n    { options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]; }\n\n  if (options.ecmaVersion >= 2015)\n    { options.ecmaVersion -= 2009; }\n\n  if (options.allowReserved == null)\n    { options.allowReserved = options.ecmaVersion < 5; }\n\n  if (isArray(options.onToken)) {\n    var tokens = options.onToken;\n    options.onToken = function (token) { return tokens.push(token); };\n  }\n  if (isArray(options.onComment))\n    { options.onComment = pushComment(options, options.onComment); }\n\n  return options\n}\n\nfunction pushComment(options, array) {\n  return function(block, text, start, end, startLoc, endLoc) {\n    var comment = {\n      type: block ? \"Block\" : \"Line\",\n      value: text,\n      start: start,\n      end: end\n    };\n    if (options.locations)\n      { comment.loc = new SourceLocation(this, startLoc, endLoc); }\n    if (options.ranges)\n      { comment.range = [start, end]; }\n    array.push(comment);\n  }\n}\n\n// Registered plugins\nvar plugins = {};\n\nfunction keywordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.replace(/ /g, \"|\") + \")$\")\n}\n\nvar Parser = function Parser(options, input, startPos) {\n  this.options = options = getOptions(options);\n  this.sourceFile = options.sourceFile;\n  this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);\n  var reserved = \"\";\n  if (!options.allowReserved) {\n    for (var v = options.ecmaVersion;; v--)\n      { if (reserved = reservedWords[v]) { break } }\n    if (options.sourceType === \"module\") { reserved += \" await\"; }\n  }\n  this.reservedWords = keywordRegexp(reserved);\n  var reservedStrict = (reserved ? reserved + \" \" : \"\") + reservedWords.strict;\n  this.reservedWordsStrict = keywordRegexp(reservedStrict);\n  this.reservedWordsStrictBind = keywordRegexp(reservedStrict + \" \" + reservedWords.strictBind);\n  this.input = String(input);\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  this.containsEsc = false;\n\n  // Load plugins\n  this.loadPlugins(options.plugins);\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos;\n    this.lineStart = this.input.lastIndexOf(\"\\n\", startPos - 1) + 1;\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;\n  } else {\n    this.pos = this.lineStart = 0;\n    this.curLine = 1;\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = types.eof;\n  // For tokens that include more information than their type, the value\n  this.value = null;\n  // Its start and end offset\n  this.start = this.end = this.pos;\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = this.curPosition();\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null;\n  this.lastTokStart = this.lastTokEnd = this.pos;\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext();\n  this.exprAllowed = true;\n\n  // Figure out if it's a module code.\n  this.inModule = options.sourceType === \"module\";\n  this.strict = this.inModule || this.strictDirective(this.pos);\n\n  // Used to signify the start of a potential arrow function\n  this.potentialArrowAt = -1;\n\n  // Flags to track whether we are in a function, a generator, an async function.\n  this.inFunction = this.inGenerator = this.inAsync = false;\n  // Positions to delayed-check that yield/await does not exist in default parameters.\n  this.yieldPos = this.awaitPos = 0;\n  // Labels in scope.\n  this.labels = [];\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === \"#!\")\n    { this.skipLineComment(2); }\n\n  // Scope tracking for duplicate variable names (see scope.js)\n  this.scopeStack = [];\n  this.enterFunctionScope();\n\n  // For RegExp validation\n  this.regexpState = null;\n};\n\n// DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them\nParser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };\nParser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };\n\nParser.prototype.extend = function extend (name, f) {\n  this[name] = f(this[name]);\n};\n\nParser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {\n    var this$1 = this;\n\n  for (var name in pluginConfigs) {\n    var plugin = plugins[name];\n    if (!plugin) { throw new Error(\"Plugin '\" + name + \"' not found\") }\n    plugin(this$1, pluginConfigs[name]);\n  }\n};\n\nParser.prototype.parse = function parse () {\n  var node = this.options.program || this.startNode();\n  this.nextToken();\n  return this.parseTopLevel(node)\n};\n\nvar pp = Parser.prototype;\n\n// ## Parser utilities\n\nvar literal = /^(?:'((?:\\\\.|[^'])*?)'|\"((?:\\\\.|[^\"])*?)\"|;)/;\npp.strictDirective = function(start) {\n  var this$1 = this;\n\n  for (;;) {\n    skipWhiteSpace.lastIndex = start;\n    start += skipWhiteSpace.exec(this$1.input)[0].length;\n    var match = literal.exec(this$1.input.slice(start));\n    if (!match) { return false }\n    if ((match[1] || match[2]) === \"use strict\") { return true }\n    start += match[0].length;\n  }\n};\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next();\n    return true\n  } else {\n    return false\n  }\n};\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === types.name && this.value === name && !this.containsEsc\n};\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  if (!this.isContextual(name)) { return false }\n  this.next();\n  return true\n};\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) { this.unexpected(); }\n};\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === types.eof ||\n    this.type === types.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      { this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc); }\n    return true\n  }\n};\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(types.semi) && !this.insertSemicolon()) { this.unexpected(); }\n};\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type === tokType) {\n    if (this.options.onTrailingComma)\n      { this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc); }\n    if (!notNext)\n      { this.next(); }\n    return true\n  }\n};\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected();\n};\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\");\n};\n\nfunction DestructuringErrors() {\n  this.shorthandAssign =\n  this.trailingComma =\n  this.parenthesizedAssign =\n  this.parenthesizedBind =\n  this.doubleProto =\n    -1;\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) { return }\n  if (refDestructuringErrors.trailingComma > -1)\n    { this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\"); }\n  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;\n  if (parens > -1) { this.raiseRecoverable(parens, \"Parenthesized pattern\"); }\n};\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  if (!refDestructuringErrors) { return false }\n  var shorthandAssign = refDestructuringErrors.shorthandAssign;\n  var doubleProto = refDestructuringErrors.doubleProto;\n  if (!andThrow) { return shorthandAssign >= 0 || doubleProto >= 0 }\n  if (shorthandAssign >= 0)\n    { this.raise(shorthandAssign, \"Shorthand property assignments are valid only in destructuring patterns\"); }\n  if (doubleProto >= 0)\n    { this.raiseRecoverable(doubleProto, \"Redefinition of __proto__ property\"); }\n};\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    { this.raise(this.yieldPos, \"Yield expression cannot be a default value\"); }\n  if (this.awaitPos)\n    { this.raise(this.awaitPos, \"Await expression cannot be a default value\"); }\n};\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    { return this.isSimpleAssignTarget(expr.expression) }\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n};\n\nvar pp$1 = Parser.prototype;\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp$1.parseTopLevel = function(node) {\n  var this$1 = this;\n\n  var exports = {};\n  if (!node.body) { node.body = []; }\n  while (this.type !== types.eof) {\n    var stmt = this$1.parseStatement(true, true, exports);\n    node.body.push(stmt);\n  }\n  this.adaptDirectivePrologue(node.body);\n  this.next();\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType;\n  }\n  return this.finishNode(node, \"Program\")\n};\n\nvar loopLabel = {kind: \"loop\"};\nvar switchLabel = {kind: \"switch\"};\n\npp$1.isLet = function() {\n  if (this.options.ecmaVersion < 6 || !this.isContextual(\"let\")) { return false }\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);\n  if (nextCh === 91 || nextCh === 123) { return true } // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    var pos = next + 1;\n    while (isIdentifierChar(this.input.charCodeAt(pos), true)) { ++pos; }\n    var ident = this.input.slice(next, pos);\n    if (!keywordRelationalOperator.test(ident)) { return true }\n  }\n  return false\n};\n\n// check 'async [no LineTerminator here] function'\n// - 'async /*foo*/ function' is OK.\n// - 'async /*\\n*/ function' is invalid.\npp$1.isAsyncFunction = function() {\n  if (this.options.ecmaVersion < 8 || !this.isContextual(\"async\"))\n    { return false }\n\n  skipWhiteSpace.lastIndex = this.pos;\n  var skip = skipWhiteSpace.exec(this.input);\n  var next = this.pos + skip[0].length;\n  return !lineBreak.test(this.input.slice(this.pos, next)) &&\n    this.input.slice(next, next + 8) === \"function\" &&\n    (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)))\n};\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp$1.parseStatement = function(declaration, topLevel, exports) {\n  var starttype = this.type, node = this.startNode(), kind;\n\n  if (this.isLet()) {\n    starttype = types._var;\n    kind = \"let\";\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case types._break: case types._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case types._debugger: return this.parseDebuggerStatement(node)\n  case types._do: return this.parseDoStatement(node)\n  case types._for: return this.parseForStatement(node)\n  case types._function:\n    if (!declaration && this.options.ecmaVersion >= 6) { this.unexpected(); }\n    return this.parseFunctionStatement(node, false)\n  case types._class:\n    if (!declaration) { this.unexpected(); }\n    return this.parseClass(node, true)\n  case types._if: return this.parseIfStatement(node)\n  case types._return: return this.parseReturnStatement(node)\n  case types._switch: return this.parseSwitchStatement(node)\n  case types._throw: return this.parseThrowStatement(node)\n  case types._try: return this.parseTryStatement(node)\n  case types._const: case types._var:\n    kind = kind || this.value;\n    if (!declaration && kind !== \"var\") { this.unexpected(); }\n    return this.parseVarStatement(node, kind)\n  case types._while: return this.parseWhileStatement(node)\n  case types._with: return this.parseWithStatement(node)\n  case types.braceL: return this.parseBlock()\n  case types.semi: return this.parseEmptyStatement(node)\n  case types._export:\n  case types._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        { this.raise(this.start, \"'import' and 'export' may only appear at the top level\"); }\n      if (!this.inModule)\n        { this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\"); }\n    }\n    return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    if (this.isAsyncFunction()) {\n      if (!declaration) { this.unexpected(); }\n      this.next();\n      return this.parseFunctionStatement(node, true)\n    }\n\n    var maybeName = this.value, expr = this.parseExpression();\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon))\n      { return this.parseLabeledStatement(node, maybeName, expr) }\n    else { return this.parseExpressionStatement(node, expr) }\n  }\n};\n\npp$1.parseBreakContinueStatement = function(node, keyword) {\n  var this$1 = this;\n\n  var isBreak = keyword === \"break\";\n  this.next();\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.label = null; }\n  else if (this.type !== types.name) { this.unexpected(); }\n  else {\n    node.label = this.parseIdent();\n    this.semicolon();\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  var i = 0;\n  for (; i < this.labels.length; ++i) {\n    var lab = this$1.labels[i];\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) { break }\n      if (node.label && isBreak) { break }\n    }\n  }\n  if (i === this.labels.length) { this.raise(node.start, \"Unsyntactic \" + keyword); }\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n};\n\npp$1.parseDebuggerStatement = function(node) {\n  this.next();\n  this.semicolon();\n  return this.finishNode(node, \"DebuggerStatement\")\n};\n\npp$1.parseDoStatement = function(node) {\n  this.next();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  this.expect(types._while);\n  node.test = this.parseParenExpression();\n  if (this.options.ecmaVersion >= 6)\n    { this.eat(types.semi); }\n  else\n    { this.semicolon(); }\n  return this.finishNode(node, \"DoWhileStatement\")\n};\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp$1.parseForStatement = function(node) {\n  this.next();\n  var awaitAt = (this.options.ecmaVersion >= 9 && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction)) && this.eatContextual(\"await\")) ? this.lastTokStart : -1;\n  this.labels.push(loopLabel);\n  this.enterLexicalScope();\n  this.expect(types.parenL);\n  if (this.type === types.semi) {\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, null)\n  }\n  var isLet = this.isLet();\n  if (this.type === types._var || this.type === types._const || isLet) {\n    var init$1 = this.startNode(), kind = isLet ? \"let\" : this.value;\n    this.next();\n    this.parseVar(init$1, true, kind);\n    this.finishNode(init$1, \"VariableDeclaration\");\n    if ((this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init$1.declarations.length === 1 &&\n        !(kind !== \"var\" && init$1.declarations[0].init)) {\n      if (this.options.ecmaVersion >= 9) {\n        if (this.type === types._in) {\n          if (awaitAt > -1) { this.unexpected(awaitAt); }\n        } else { node.await = awaitAt > -1; }\n      }\n      return this.parseForIn(node, init$1)\n    }\n    if (awaitAt > -1) { this.unexpected(awaitAt); }\n    return this.parseFor(node, init$1)\n  }\n  var refDestructuringErrors = new DestructuringErrors;\n  var init = this.parseExpression(true, refDestructuringErrors);\n  if (this.type === types._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    if (this.options.ecmaVersion >= 9) {\n      if (this.type === types._in) {\n        if (awaitAt > -1) { this.unexpected(awaitAt); }\n      } else { node.await = awaitAt > -1; }\n    }\n    this.toAssignable(init, false, refDestructuringErrors);\n    this.checkLVal(init);\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true);\n  }\n  if (awaitAt > -1) { this.unexpected(awaitAt); }\n  return this.parseFor(node, init)\n};\n\npp$1.parseFunctionStatement = function(node, isAsync) {\n  this.next();\n  return this.parseFunction(node, true, false, isAsync)\n};\n\npp$1.parseIfStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  // allow function declarations in branches, but only in non-strict mode\n  node.consequent = this.parseStatement(!this.strict && this.type === types._function);\n  node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.type === types._function) : null;\n  return this.finishNode(node, \"IfStatement\")\n};\n\npp$1.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    { this.raise(this.start, \"'return' outside of function\"); }\n  this.next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(types.semi) || this.insertSemicolon()) { node.argument = null; }\n  else { node.argument = this.parseExpression(); this.semicolon(); }\n  return this.finishNode(node, \"ReturnStatement\")\n};\n\npp$1.parseSwitchStatement = function(node) {\n  var this$1 = this;\n\n  this.next();\n  node.discriminant = this.parseParenExpression();\n  node.cases = [];\n  this.expect(types.braceL);\n  this.labels.push(switchLabel);\n  this.enterLexicalScope();\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  var cur;\n  for (var sawDefault = false; this.type !== types.braceR;) {\n    if (this$1.type === types._case || this$1.type === types._default) {\n      var isCase = this$1.type === types._case;\n      if (cur) { this$1.finishNode(cur, \"SwitchCase\"); }\n      node.cases.push(cur = this$1.startNode());\n      cur.consequent = [];\n      this$1.next();\n      if (isCase) {\n        cur.test = this$1.parseExpression();\n      } else {\n        if (sawDefault) { this$1.raiseRecoverable(this$1.lastTokStart, \"Multiple default clauses\"); }\n        sawDefault = true;\n        cur.test = null;\n      }\n      this$1.expect(types.colon);\n    } else {\n      if (!cur) { this$1.unexpected(); }\n      cur.consequent.push(this$1.parseStatement(true));\n    }\n  }\n  this.exitLexicalScope();\n  if (cur) { this.finishNode(cur, \"SwitchCase\"); }\n  this.next(); // Closing brace\n  this.labels.pop();\n  return this.finishNode(node, \"SwitchStatement\")\n};\n\npp$1.parseThrowStatement = function(node) {\n  this.next();\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    { this.raise(this.lastTokEnd, \"Illegal newline after throw\"); }\n  node.argument = this.parseExpression();\n  this.semicolon();\n  return this.finishNode(node, \"ThrowStatement\")\n};\n\n// Reused empty array added for node fields that are always empty.\n\nvar empty = [];\n\npp$1.parseTryStatement = function(node) {\n  this.next();\n  node.block = this.parseBlock();\n  node.handler = null;\n  if (this.type === types._catch) {\n    var clause = this.startNode();\n    this.next();\n    if (this.eat(types.parenL)) {\n      clause.param = this.parseBindingAtom();\n      this.enterLexicalScope();\n      this.checkLVal(clause.param, \"let\");\n      this.expect(types.parenR);\n    } else {\n      if (this.options.ecmaVersion < 10) { this.unexpected(); }\n      clause.param = null;\n      this.enterLexicalScope();\n    }\n    clause.body = this.parseBlock(false);\n    this.exitLexicalScope();\n    node.handler = this.finishNode(clause, \"CatchClause\");\n  }\n  node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n  if (!node.handler && !node.finalizer)\n    { this.raise(node.start, \"Missing catch or finally clause\"); }\n  return this.finishNode(node, \"TryStatement\")\n};\n\npp$1.parseVarStatement = function(node, kind) {\n  this.next();\n  this.parseVar(node, false, kind);\n  this.semicolon();\n  return this.finishNode(node, \"VariableDeclaration\")\n};\n\npp$1.parseWhileStatement = function(node) {\n  this.next();\n  node.test = this.parseParenExpression();\n  this.labels.push(loopLabel);\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"WhileStatement\")\n};\n\npp$1.parseWithStatement = function(node) {\n  if (this.strict) { this.raise(this.start, \"'with' in strict mode\"); }\n  this.next();\n  node.object = this.parseParenExpression();\n  node.body = this.parseStatement(false);\n  return this.finishNode(node, \"WithStatement\")\n};\n\npp$1.parseEmptyStatement = function(node) {\n  this.next();\n  return this.finishNode(node, \"EmptyStatement\")\n};\n\npp$1.parseLabeledStatement = function(node, maybeName, expr) {\n  var this$1 = this;\n\n  for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1)\n    {\n    var label = list[i$1];\n\n    if (label.name === maybeName)\n      { this$1.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\");\n  } }\n  var kind = this.type.isLoop ? \"loop\" : this.type === types._switch ? \"switch\" : null;\n  for (var i = this.labels.length - 1; i >= 0; i--) {\n    var label$1 = this$1.labels[i];\n    if (label$1.statementStart === node.start) {\n      // Update information about previous labels on this node\n      label$1.statementStart = this$1.start;\n      label$1.kind = kind;\n    } else { break }\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start});\n  node.body = this.parseStatement(true);\n  if (node.body.type === \"ClassDeclaration\" ||\n      node.body.type === \"VariableDeclaration\" && node.body.kind !== \"var\" ||\n      node.body.type === \"FunctionDeclaration\" && (this.strict || node.body.generator || node.body.async))\n    { this.raiseRecoverable(node.body.start, \"Invalid labeled declaration\"); }\n  this.labels.pop();\n  node.label = expr;\n  return this.finishNode(node, \"LabeledStatement\")\n};\n\npp$1.parseExpressionStatement = function(node, expr) {\n  node.expression = expr;\n  this.semicolon();\n  return this.finishNode(node, \"ExpressionStatement\")\n};\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp$1.parseBlock = function(createNewLexicalScope) {\n  var this$1 = this;\n  if ( createNewLexicalScope === void 0 ) createNewLexicalScope = true;\n\n  var node = this.startNode();\n  node.body = [];\n  this.expect(types.braceL);\n  if (createNewLexicalScope) {\n    this.enterLexicalScope();\n  }\n  while (!this.eat(types.braceR)) {\n    var stmt = this$1.parseStatement(true);\n    node.body.push(stmt);\n  }\n  if (createNewLexicalScope) {\n    this.exitLexicalScope();\n  }\n  return this.finishNode(node, \"BlockStatement\")\n};\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp$1.parseFor = function(node, init) {\n  node.init = init;\n  this.expect(types.semi);\n  node.test = this.type === types.semi ? null : this.parseExpression();\n  this.expect(types.semi);\n  node.update = this.type === types.parenR ? null : this.parseExpression();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, \"ForStatement\")\n};\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp$1.parseForIn = function(node, init) {\n  var type = this.type === types._in ? \"ForInStatement\" : \"ForOfStatement\";\n  this.next();\n  if (type === \"ForInStatement\") {\n    if (init.type === \"AssignmentPattern\" ||\n      (init.type === \"VariableDeclaration\" && init.declarations[0].init != null &&\n       (this.strict || init.declarations[0].id.type !== \"Identifier\")))\n      { this.raise(init.start, \"Invalid assignment in for-in loop head\"); }\n  }\n  node.left = init;\n  node.right = type === \"ForInStatement\" ? this.parseExpression() : this.parseMaybeAssign();\n  this.expect(types.parenR);\n  this.exitLexicalScope();\n  node.body = this.parseStatement(false);\n  this.labels.pop();\n  return this.finishNode(node, type)\n};\n\n// Parse a list of variable declarations.\n\npp$1.parseVar = function(node, isFor, kind) {\n  var this$1 = this;\n\n  node.declarations = [];\n  node.kind = kind;\n  for (;;) {\n    var decl = this$1.startNode();\n    this$1.parseVarId(decl, kind);\n    if (this$1.eat(types.eq)) {\n      decl.init = this$1.parseMaybeAssign(isFor);\n    } else if (kind === \"const\" && !(this$1.type === types._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual(\"of\")))) {\n      this$1.unexpected();\n    } else if (decl.id.type !== \"Identifier\" && !(isFor && (this$1.type === types._in || this$1.isContextual(\"of\")))) {\n      this$1.raise(this$1.lastTokEnd, \"Complex binding patterns require an initialization value\");\n    } else {\n      decl.init = null;\n    }\n    node.declarations.push(this$1.finishNode(decl, \"VariableDeclarator\"));\n    if (!this$1.eat(types.comma)) { break }\n  }\n  return node\n};\n\npp$1.parseVarId = function(decl, kind) {\n  decl.id = this.parseBindingAtom(kind);\n  this.checkLVal(decl.id, kind, false);\n};\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync)\n    { node.generator = this.eat(types.star); }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  if (isStatement) {\n    node.id = isStatement === \"nullableID\" && this.type !== types.name ? null : this.parseIdent();\n    if (node.id) {\n      this.checkLVal(node.id, this.inModule && !this.inFunction ? \"let\" : \"var\");\n    }\n  }\n\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  if (!isStatement)\n    { node.id = this.type === types.name ? this.parseIdent() : null; }\n\n  this.parseFunctionParams(node);\n  this.parseFunctionBody(node, allowExpressionBody);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n};\n\npp$1.parseFunctionParams = function(node) {\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n};\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp$1.parseClass = function(node, isStatement) {\n  var this$1 = this;\n\n  this.next();\n\n  this.parseClassId(node, isStatement);\n  this.parseClassSuper(node);\n  var classBody = this.startNode();\n  var hadConstructor = false;\n  classBody.body = [];\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    var member = this$1.parseClassMember(classBody);\n    if (member && member.type === \"MethodDefinition\" && member.kind === \"constructor\") {\n      if (hadConstructor) { this$1.raise(member.start, \"Duplicate constructor in the same class\"); }\n      hadConstructor = true;\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\");\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n};\n\npp$1.parseClassMember = function(classBody) {\n  var this$1 = this;\n\n  if (this.eat(types.semi)) { return null }\n\n  var method = this.startNode();\n  var tryContextual = function (k, noLineBreak) {\n    if ( noLineBreak === void 0 ) noLineBreak = false;\n\n    var start = this$1.start, startLoc = this$1.startLoc;\n    if (!this$1.eatContextual(k)) { return false }\n    if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) { return true }\n    if (method.key) { this$1.unexpected(); }\n    method.computed = false;\n    method.key = this$1.startNodeAt(start, startLoc);\n    method.key.name = k;\n    this$1.finishNode(method.key, \"Identifier\");\n    return false\n  };\n\n  method.kind = \"method\";\n  method.static = tryContextual(\"static\");\n  var isGenerator = this.eat(types.star);\n  var isAsync = false;\n  if (!isGenerator) {\n    if (this.options.ecmaVersion >= 8 && tryContextual(\"async\", true)) {\n      isAsync = true;\n      isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    } else if (tryContextual(\"get\")) {\n      method.kind = \"get\";\n    } else if (tryContextual(\"set\")) {\n      method.kind = \"set\";\n    }\n  }\n  if (!method.key) { this.parsePropertyName(method); }\n  var key = method.key;\n  if (!method.computed && !method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n      key.type === \"Literal\" && key.value === \"constructor\")) {\n    if (method.kind !== \"method\") { this.raise(key.start, \"Constructor can't have get/set modifier\"); }\n    if (isGenerator) { this.raise(key.start, \"Constructor can't be a generator\"); }\n    if (isAsync) { this.raise(key.start, \"Constructor can't be an async method\"); }\n    method.kind = \"constructor\";\n  } else if (method.static && key.type === \"Identifier\" && key.name === \"prototype\") {\n    this.raise(key.start, \"Classes may not have a static property named prototype\");\n  }\n  this.parseClassMethod(classBody, method, isGenerator, isAsync);\n  if (method.kind === \"get\" && method.value.params.length !== 0)\n    { this.raiseRecoverable(method.value.start, \"getter should have no params\"); }\n  if (method.kind === \"set\" && method.value.params.length !== 1)\n    { this.raiseRecoverable(method.value.start, \"setter should have exactly one param\"); }\n  if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n    { this.raiseRecoverable(method.value.params[0].start, \"Setter cannot use rest params\"); }\n  return method\n};\n\npp$1.parseClassMethod = function(classBody, method, isGenerator, isAsync) {\n  method.value = this.parseMethod(isGenerator, isAsync);\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"));\n};\n\npp$1.parseClassId = function(node, isStatement) {\n  node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;\n};\n\npp$1.parseClassSuper = function(node) {\n  node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n};\n\n// Parses module export declaration.\n\npp$1.parseExport = function(node, exports) {\n  var this$1 = this;\n\n  this.next();\n  // export * from '...'\n  if (this.eat(types.star)) {\n    this.expectContextual(\"from\");\n    if (this.type !== types.string) { this.unexpected(); }\n    node.source = this.parseExprAtom();\n    this.semicolon();\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(types._default)) { // export default ...\n    this.checkExport(exports, \"default\", this.lastTokStart);\n    var isAsync;\n    if (this.type === types._function || (isAsync = this.isAsyncFunction())) {\n      var fNode = this.startNode();\n      this.next();\n      if (isAsync) { this.next(); }\n      node.declaration = this.parseFunction(fNode, \"nullableID\", false, isAsync);\n    } else if (this.type === types._class) {\n      var cNode = this.startNode();\n      node.declaration = this.parseClass(cNode, \"nullableID\");\n    } else {\n      node.declaration = this.parseMaybeAssign();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true);\n    if (node.declaration.type === \"VariableDeclaration\")\n      { this.checkVariableExport(exports, node.declaration.declarations); }\n    else\n      { this.checkExport(exports, node.declaration.id.name, node.declaration.id.start); }\n    node.specifiers = [];\n    node.source = null;\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null;\n    node.specifiers = this.parseExportSpecifiers(exports);\n    if (this.eatContextual(\"from\")) {\n      if (this.type !== types.string) { this.unexpected(); }\n      node.source = this.parseExprAtom();\n    } else {\n      // check for keywords used as local names\n      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {\n        var spec = list[i];\n\n        this$1.checkUnreserved(spec.local);\n      }\n\n      node.source = null;\n    }\n    this.semicolon();\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n};\n\npp$1.checkExport = function(exports, name, pos) {\n  if (!exports) { return }\n  if (has(exports, name))\n    { this.raiseRecoverable(pos, \"Duplicate export '\" + name + \"'\"); }\n  exports[name] = true;\n};\n\npp$1.checkPatternExport = function(exports, pat) {\n  var this$1 = this;\n\n  var type = pat.type;\n  if (type === \"Identifier\")\n    { this.checkExport(exports, pat.name, pat.start); }\n  else if (type === \"ObjectPattern\")\n    { for (var i = 0, list = pat.properties; i < list.length; i += 1)\n      {\n        var prop = list[i];\n\n        this$1.checkPatternExport(exports, prop);\n      } }\n  else if (type === \"ArrayPattern\")\n    { for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {\n      var elt = list$1[i$1];\n\n        if (elt) { this$1.checkPatternExport(exports, elt); }\n    } }\n  else if (type === \"Property\")\n    { this.checkPatternExport(exports, pat.value); }\n  else if (type === \"AssignmentPattern\")\n    { this.checkPatternExport(exports, pat.left); }\n  else if (type === \"RestElement\")\n    { this.checkPatternExport(exports, pat.argument); }\n  else if (type === \"ParenthesizedExpression\")\n    { this.checkPatternExport(exports, pat.expression); }\n};\n\npp$1.checkVariableExport = function(exports, decls) {\n  var this$1 = this;\n\n  if (!exports) { return }\n  for (var i = 0, list = decls; i < list.length; i += 1)\n    {\n    var decl = list[i];\n\n    this$1.checkPatternExport(exports, decl.id);\n  }\n};\n\npp$1.shouldParseExportStatement = function() {\n  return this.type.keyword === \"var\" ||\n    this.type.keyword === \"const\" ||\n    this.type.keyword === \"class\" ||\n    this.type.keyword === \"function\" ||\n    this.isLet() ||\n    this.isAsyncFunction()\n};\n\n// Parses a comma-separated list of module exports.\n\npp$1.parseExportSpecifiers = function(exports) {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  // export { x, y as z } [from '...']\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node = this$1.startNode();\n    node.local = this$1.parseIdent(true);\n    node.exported = this$1.eatContextual(\"as\") ? this$1.parseIdent(true) : node.local;\n    this$1.checkExport(exports, node.exported.name, node.exported.start);\n    nodes.push(this$1.finishNode(node, \"ExportSpecifier\"));\n  }\n  return nodes\n};\n\n// Parses import declaration.\n\npp$1.parseImport = function(node) {\n  this.next();\n  // import '...'\n  if (this.type === types.string) {\n    node.specifiers = empty;\n    node.source = this.parseExprAtom();\n  } else {\n    node.specifiers = this.parseImportSpecifiers();\n    this.expectContextual(\"from\");\n    node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();\n  }\n  this.semicolon();\n  return this.finishNode(node, \"ImportDeclaration\")\n};\n\n// Parses a comma-separated list of module imports.\n\npp$1.parseImportSpecifiers = function() {\n  var this$1 = this;\n\n  var nodes = [], first = true;\n  if (this.type === types.name) {\n    // import defaultObj, { x, y as z } from '...'\n    var node = this.startNode();\n    node.local = this.parseIdent();\n    this.checkLVal(node.local, \"let\");\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"));\n    if (!this.eat(types.comma)) { return nodes }\n  }\n  if (this.type === types.star) {\n    var node$1 = this.startNode();\n    this.next();\n    this.expectContextual(\"as\");\n    node$1.local = this.parseIdent();\n    this.checkLVal(node$1.local, \"let\");\n    nodes.push(this.finishNode(node$1, \"ImportNamespaceSpecifier\"));\n    return nodes\n  }\n  this.expect(types.braceL);\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var node$2 = this$1.startNode();\n    node$2.imported = this$1.parseIdent(true);\n    if (this$1.eatContextual(\"as\")) {\n      node$2.local = this$1.parseIdent();\n    } else {\n      this$1.checkUnreserved(node$2.imported);\n      node$2.local = node$2.imported;\n    }\n    this$1.checkLVal(node$2.local, \"let\");\n    nodes.push(this$1.finishNode(node$2, \"ImportSpecifier\"));\n  }\n  return nodes\n};\n\n// Set `ExpressionStatement#directive` property for directive prologues.\npp$1.adaptDirectivePrologue = function(statements) {\n  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {\n    statements[i].directive = statements[i].expression.raw.slice(1, -1);\n  }\n};\npp$1.isDirectiveCandidate = function(statement) {\n  return (\n    statement.type === \"ExpressionStatement\" &&\n    statement.expression.type === \"Literal\" &&\n    typeof statement.expression.value === \"string\" &&\n    // Reject parenthesized strings.\n    (this.input[statement.start] === \"\\\"\" || this.input[statement.start] === \"'\")\n  )\n};\n\nvar pp$2 = Parser.prototype;\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {\n  var this$1 = this;\n\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n      if (this.inAsync && node.name === \"await\")\n        { this.raise(node.start, \"Can not use 'await' as identifier inside an async function\"); }\n      break\n\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"RestElement\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      for (var i = 0, list = node.properties; i < list.length; i += 1) {\n        var prop = list[i];\n\n      this$1.toAssignable(prop, isBinding);\n        // Early error:\n        //   AssignmentRestProperty[Yield, Await] :\n        //     `...` DestructuringAssignmentTarget[Yield, Await]\n        //\n        //   It is a Syntax Error if |DestructuringAssignmentTarget| is an |ArrayLiteral| or an |ObjectLiteral|.\n        if (\n          prop.type === \"RestElement\" &&\n          (prop.argument.type === \"ArrayPattern\" || prop.argument.type === \"ObjectPattern\")\n        ) {\n          this$1.raise(prop.argument.start, \"Unexpected token\");\n        }\n      }\n      break\n\n    case \"Property\":\n      // AssignmentProperty has type === \"Property\"\n      if (node.kind !== \"init\") { this.raise(node.key.start, \"Object pattern can't contain getter or setter\"); }\n      this.toAssignable(node.value, isBinding);\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\";\n      if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n      this.toAssignableList(node.elements, isBinding);\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\";\n      this.toAssignable(node.argument, isBinding);\n      if (node.argument.type === \"AssignmentPattern\")\n        { this.raise(node.argument.start, \"Rest elements cannot have a default value\"); }\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator !== \"=\") { this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\"); }\n      node.type = \"AssignmentPattern\";\n      delete node.operator;\n      this.toAssignable(node.left, isBinding);\n      // falls through to AssignmentPattern\n\n    case \"AssignmentPattern\":\n      break\n\n    case \"ParenthesizedExpression\":\n      this.toAssignable(node.expression, isBinding);\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) { break }\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\");\n    }\n  } else if (refDestructuringErrors) { this.checkPatternErrors(refDestructuringErrors, true); }\n  return node\n};\n\n// Convert list of expression atoms to binding list.\n\npp$2.toAssignableList = function(exprList, isBinding) {\n  var this$1 = this;\n\n  var end = exprList.length;\n  for (var i = 0; i < end; i++) {\n    var elt = exprList[i];\n    if (elt) { this$1.toAssignable(elt, isBinding); }\n  }\n  if (end) {\n    var last = exprList[end - 1];\n    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === \"RestElement\" && last.argument.type !== \"Identifier\")\n      { this.unexpected(last.argument.start); }\n  }\n  return exprList\n};\n\n// Parses spread element.\n\npp$2.parseSpread = function(refDestructuringErrors) {\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n  return this.finishNode(node, \"SpreadElement\")\n};\n\npp$2.parseRestBinding = function() {\n  var node = this.startNode();\n  this.next();\n\n  // RestElement inside of a function parameter must be an identifier\n  if (this.options.ecmaVersion === 6 && this.type !== types.name)\n    { this.unexpected(); }\n\n  node.argument = this.parseBindingAtom();\n\n  return this.finishNode(node, \"RestElement\")\n};\n\n// Parses lvalue (assignable) atom.\n\npp$2.parseBindingAtom = function() {\n  if (this.options.ecmaVersion >= 6) {\n    switch (this.type) {\n    case types.bracketL:\n      var node = this.startNode();\n      this.next();\n      node.elements = this.parseBindingList(types.bracketR, true, true);\n      return this.finishNode(node, \"ArrayPattern\")\n\n    case types.braceL:\n      return this.parseObj(true)\n    }\n  }\n  return this.parseIdent()\n};\n\npp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (first) { first = false; }\n    else { this$1.expect(types.comma); }\n    if (allowEmpty && this$1.type === types.comma) {\n      elts.push(null);\n    } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {\n      break\n    } else if (this$1.type === types.ellipsis) {\n      var rest = this$1.parseRestBinding();\n      this$1.parseBindingListItem(rest);\n      elts.push(rest);\n      if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n      this$1.expect(close);\n      break\n    } else {\n      var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);\n      this$1.parseBindingListItem(elem);\n      elts.push(elem);\n    }\n  }\n  return elts\n};\n\npp$2.parseBindingListItem = function(param) {\n  return param\n};\n\n// Parses assignment pattern around given atom if possible.\n\npp$2.parseMaybeDefault = function(startPos, startLoc, left) {\n  left = left || this.parseBindingAtom();\n  if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) { return left }\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.right = this.parseMaybeAssign();\n  return this.finishNode(node, \"AssignmentPattern\")\n};\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n// bindingType can be either:\n// 'var' indicating that the lval creates a 'var' binding\n// 'let' indicating that the lval creates a lexical ('let' or 'const') binding\n// 'none' indicating that the binding should be checked for illegal identifiers, but not for duplicate references\n\npp$2.checkLVal = function(expr, bindingType, checkClashes) {\n  var this$1 = this;\n\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && this.reservedWordsStrictBind.test(expr.name))\n      { this.raiseRecoverable(expr.start, (bindingType ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\"); }\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        { this.raiseRecoverable(expr.start, \"Argument name clash\"); }\n      checkClashes[expr.name] = true;\n    }\n    if (bindingType && bindingType !== \"none\") {\n      if (\n        bindingType === \"var\" && !this.canDeclareVarName(expr.name) ||\n        bindingType !== \"var\" && !this.canDeclareLexicalName(expr.name)\n      ) {\n        this.raiseRecoverable(expr.start, (\"Identifier '\" + (expr.name) + \"' has already been declared\"));\n      }\n      if (bindingType === \"var\") {\n        this.declareVarName(expr.name);\n      } else {\n        this.declareLexicalName(expr.name);\n      }\n    }\n    break\n\n  case \"MemberExpression\":\n    if (bindingType) { this.raiseRecoverable(expr.start, \"Binding member expression\"); }\n    break\n\n  case \"ObjectPattern\":\n    for (var i = 0, list = expr.properties; i < list.length; i += 1)\n      {\n    var prop = list[i];\n\n    this$1.checkLVal(prop, bindingType, checkClashes);\n  }\n    break\n\n  case \"Property\":\n    // AssignmentProperty has type === \"Property\"\n    this.checkLVal(expr.value, bindingType, checkClashes);\n    break\n\n  case \"ArrayPattern\":\n    for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {\n      var elem = list$1[i$1];\n\n    if (elem) { this$1.checkLVal(elem, bindingType, checkClashes); }\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, bindingType, checkClashes);\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, bindingType, checkClashes);\n    break\n\n  case \"ParenthesizedExpression\":\n    this.checkLVal(expr.expression, bindingType, checkClashes);\n    break\n\n  default:\n    this.raise(expr.start, (bindingType ? \"Binding\" : \"Assigning to\") + \" rvalue\");\n  }\n};\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nvar pp$3 = Parser.prototype;\n\n// Check if property name clashes with already added.\n// Object/class getters and setters are not allowed to clash —\n// either with each other or with an init property — and in\n// strict mode, init properties are also not allowed to be repeated.\n\npp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {\n  if (this.options.ecmaVersion >= 9 && prop.type === \"SpreadElement\")\n    { return }\n  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))\n    { return }\n  var key = prop.key;\n  var name;\n  switch (key.type) {\n  case \"Identifier\": name = key.name; break\n  case \"Literal\": name = String(key.value); break\n  default: return\n  }\n  var kind = prop.kind;\n  if (this.options.ecmaVersion >= 6) {\n    if (name === \"__proto__\" && kind === \"init\") {\n      if (propHash.proto) {\n        if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) { refDestructuringErrors.doubleProto = key.start; }\n        // Backwards-compat kludge. Can be removed in version 6.0\n        else { this.raiseRecoverable(key.start, \"Redefinition of __proto__ property\"); }\n      }\n      propHash.proto = true;\n    }\n    return\n  }\n  name = \"$\" + name;\n  var other = propHash[name];\n  if (other) {\n    var redefinition;\n    if (kind === \"init\") {\n      redefinition = this.strict && other.init || other.get || other.set;\n    } else {\n      redefinition = other.init || other[kind];\n    }\n    if (redefinition)\n      { this.raiseRecoverable(key.start, \"Redefinition of property\"); }\n  } else {\n    other = propHash[name] = {\n      init: false,\n      get: false,\n      set: false\n    };\n  }\n  other[kind] = true;\n};\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function(s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\n\n// Parse a full expression. The optional arguments are used to\n// forbid the `in` operator (in for loops initalization expressions)\n// and provide reference for storing '=' operator inside shorthand\n// property assignment in contexts where both object expression\n// and object pattern might appear (so it's possible to raise\n// delayed syntax error at correct position).\n\npp$3.parseExpression = function(noIn, refDestructuringErrors) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);\n  if (this.type === types.comma) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.expressions = [expr];\n    while (this.eat(types.comma)) { node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors)); }\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n};\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n\npp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {\n  if (this.inGenerator && this.isContextual(\"yield\")) { return this.parseYield() }\n\n  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;\n  if (refDestructuringErrors) {\n    oldParenAssign = refDestructuringErrors.parenthesizedAssign;\n    oldTrailingComma = refDestructuringErrors.trailingComma;\n    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;\n  } else {\n    refDestructuringErrors = new DestructuringErrors;\n    ownDestructuringErrors = true;\n  }\n\n  var startPos = this.start, startLoc = this.startLoc;\n  if (this.type === types.parenL || this.type === types.name)\n    { this.potentialArrowAt = this.start; }\n  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);\n  if (afterLeftParse) { left = afterLeftParse.call(this, left, startPos, startLoc); }\n  if (this.type.isAssign) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.operator = this.value;\n    node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;\n    if (!ownDestructuringErrors) { DestructuringErrors.call(refDestructuringErrors); }\n    refDestructuringErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n    this.checkLVal(left);\n    this.next();\n    node.right = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"AssignmentExpression\")\n  } else {\n    if (ownDestructuringErrors) { this.checkExpressionErrors(refDestructuringErrors, true); }\n  }\n  if (oldParenAssign > -1) { refDestructuringErrors.parenthesizedAssign = oldParenAssign; }\n  if (oldTrailingComma > -1) { refDestructuringErrors.trailingComma = oldTrailingComma; }\n  return left\n};\n\n// Parse a ternary conditional (`?:`) operator.\n\npp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprOps(noIn, refDestructuringErrors);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  if (this.eat(types.question)) {\n    var node = this.startNodeAt(startPos, startLoc);\n    node.test = expr;\n    node.consequent = this.parseMaybeAssign();\n    this.expect(types.colon);\n    node.alternate = this.parseMaybeAssign(noIn);\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n};\n\n// Start the precedence parser.\n\npp$3.parseExprOps = function(noIn, refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseMaybeUnary(refDestructuringErrors, false);\n  if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n  return expr.start === startPos && expr.type === \"ArrowFunctionExpression\" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn)\n};\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\n\npp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n  var prec = this.type.binop;\n  if (prec != null && (!noIn || this.type !== types._in)) {\n    if (prec > minPrec) {\n      var logical = this.type === types.logicalOR || this.type === types.logicalAND;\n      var op = this.value;\n      this.next();\n      var startPos = this.start, startLoc = this.startLoc;\n      var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);\n      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)\n    }\n  }\n  return left\n};\n\npp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {\n  var node = this.startNodeAt(startPos, startLoc);\n  node.left = left;\n  node.operator = op;\n  node.right = right;\n  return this.finishNode(node, logical ? \"LogicalExpression\" : \"BinaryExpression\")\n};\n\n// Parse unary operators, both prefix and postfix.\n\npp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, expr;\n  if (this.isContextual(\"await\") && (this.inAsync || (!this.inFunction && this.options.allowAwaitOutsideFunction))) {\n    expr = this.parseAwait();\n    sawUnary = true;\n  } else if (this.type.prefix) {\n    var node = this.startNode(), update = this.type === types.incDec;\n    node.operator = this.value;\n    node.prefix = true;\n    this.next();\n    node.argument = this.parseMaybeUnary(null, true);\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    if (update) { this.checkLVal(node.argument); }\n    else if (this.strict && node.operator === \"delete\" &&\n             node.argument.type === \"Identifier\")\n      { this.raiseRecoverable(node.start, \"Deleting local variable in strict mode\"); }\n    else { sawUnary = true; }\n    expr = this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n  } else {\n    expr = this.parseExprSubscripts(refDestructuringErrors);\n    if (this.checkExpressionErrors(refDestructuringErrors)) { return expr }\n    while (this.type.postfix && !this.canInsertSemicolon()) {\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.operator = this$1.value;\n      node$1.prefix = false;\n      node$1.argument = expr;\n      this$1.checkLVal(expr);\n      this$1.next();\n      expr = this$1.finishNode(node$1, \"UpdateExpression\");\n    }\n  }\n\n  if (!sawUnary && this.eat(types.starstar))\n    { return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), \"**\", false) }\n  else\n    { return expr }\n};\n\n// Parse call, dot, and `[]`-subscript expressions.\n\npp$3.parseExprSubscripts = function(refDestructuringErrors) {\n  var startPos = this.start, startLoc = this.startLoc;\n  var expr = this.parseExprAtom(refDestructuringErrors);\n  var skipArrowSubscripts = expr.type === \"ArrowFunctionExpression\" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== \")\";\n  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) { return expr }\n  var result = this.parseSubscripts(expr, startPos, startLoc);\n  if (refDestructuringErrors && result.type === \"MemberExpression\") {\n    if (refDestructuringErrors.parenthesizedAssign >= result.start) { refDestructuringErrors.parenthesizedAssign = -1; }\n    if (refDestructuringErrors.parenthesizedBind >= result.start) { refDestructuringErrors.parenthesizedBind = -1; }\n  }\n  return result\n};\n\npp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {\n  var this$1 = this;\n\n  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === \"Identifier\" && base.name === \"async\" &&\n      this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  for (var computed = (void 0);;) {\n    if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {\n      var node = this$1.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);\n      node.computed = !!computed;\n      if (computed) { this$1.expect(types.bracketR); }\n      base = this$1.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this$1.eat(types.parenL)) {\n      var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this$1.yieldPos, oldAwaitPos = this$1.awaitPos;\n      this$1.yieldPos = 0;\n      this$1.awaitPos = 0;\n      var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);\n      if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {\n        this$1.checkPatternErrors(refDestructuringErrors, false);\n        this$1.checkYieldAwaitInDefaultParams();\n        this$1.yieldPos = oldYieldPos;\n        this$1.awaitPos = oldAwaitPos;\n        return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true)\n      }\n      this$1.checkExpressionErrors(refDestructuringErrors, true);\n      this$1.yieldPos = oldYieldPos || this$1.yieldPos;\n      this$1.awaitPos = oldAwaitPos || this$1.awaitPos;\n      var node$1 = this$1.startNodeAt(startPos, startLoc);\n      node$1.callee = base;\n      node$1.arguments = exprList;\n      base = this$1.finishNode(node$1, \"CallExpression\");\n    } else if (this$1.type === types.backQuote) {\n      var node$2 = this$1.startNodeAt(startPos, startLoc);\n      node$2.tag = base;\n      node$2.quasi = this$1.parseTemplate({isTagged: true});\n      base = this$1.finishNode(node$2, \"TaggedTemplateExpression\");\n    } else {\n      return base\n    }\n  }\n};\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n\npp$3.parseExprAtom = function(refDestructuringErrors) {\n  var node, canBeArrow = this.potentialArrowAt === this.start;\n  switch (this.type) {\n  case types._super:\n    if (!this.inFunction)\n      { this.raise(this.start, \"'super' outside of function or class\"); }\n    node = this.startNode();\n    this.next();\n    // The `super` keyword can appear at below:\n    // SuperProperty:\n    //     super [ Expression ]\n    //     super . IdentifierName\n    // SuperCall:\n    //     super Arguments\n    if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL)\n      { this.unexpected(); }\n    return this.finishNode(node, \"Super\")\n\n  case types._this:\n    node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"ThisExpression\")\n\n  case types.name:\n    var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;\n    var id = this.parseIdent(this.type !== types.name);\n    if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === \"async\" && !this.canInsertSemicolon() && this.eat(types._function))\n      { return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true) }\n    if (canBeArrow && !this.canInsertSemicolon()) {\n      if (this.eat(types.arrow))\n        { return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false) }\n      if (this.options.ecmaVersion >= 8 && id.name === \"async\" && this.type === types.name && !containsEsc) {\n        id = this.parseIdent();\n        if (this.canInsertSemicolon() || !this.eat(types.arrow))\n          { this.unexpected(); }\n        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true)\n      }\n    }\n    return id\n\n  case types.regexp:\n    var value = this.value;\n    node = this.parseLiteral(value.value);\n    node.regex = {pattern: value.pattern, flags: value.flags};\n    return node\n\n  case types.num: case types.string:\n    return this.parseLiteral(this.value)\n\n  case types._null: case types._true: case types._false:\n    node = this.startNode();\n    node.value = this.type === types._null ? null : this.type === types._true;\n    node.raw = this.type.keyword;\n    this.next();\n    return this.finishNode(node, \"Literal\")\n\n  case types.parenL:\n    var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);\n    if (refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr))\n        { refDestructuringErrors.parenthesizedAssign = start; }\n      if (refDestructuringErrors.parenthesizedBind < 0)\n        { refDestructuringErrors.parenthesizedBind = start; }\n    }\n    return expr\n\n  case types.bracketL:\n    node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case types.braceL:\n    return this.parseObj(false, refDestructuringErrors)\n\n  case types._function:\n    node = this.startNode();\n    this.next();\n    return this.parseFunction(node, false)\n\n  case types._class:\n    return this.parseClass(this.startNode(), false)\n\n  case types._new:\n    return this.parseNew()\n\n  case types.backQuote:\n    return this.parseTemplate()\n\n  default:\n    this.unexpected();\n  }\n};\n\npp$3.parseLiteral = function(value) {\n  var node = this.startNode();\n  node.value = value;\n  node.raw = this.input.slice(this.start, this.end);\n  this.next();\n  return this.finishNode(node, \"Literal\")\n};\n\npp$3.parseParenExpression = function() {\n  this.expect(types.parenL);\n  var val = this.parseExpression();\n  this.expect(types.parenR);\n  return val\n};\n\npp$3.parseParenAndDistinguishExpression = function(canBeArrow) {\n  var this$1 = this;\n\n  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;\n  if (this.options.ecmaVersion >= 6) {\n    this.next();\n\n    var innerStartPos = this.start, innerStartLoc = this.startLoc;\n    var exprList = [], first = true, lastIsComma = false;\n    var refDestructuringErrors = new DestructuringErrors, oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;\n    this.yieldPos = 0;\n    this.awaitPos = 0;\n    while (this.type !== types.parenR) {\n      first ? first = false : this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {\n        lastIsComma = true;\n        break\n      } else if (this$1.type === types.ellipsis) {\n        spreadStart = this$1.start;\n        exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));\n        if (this$1.type === types.comma) { this$1.raise(this$1.start, \"Comma is not permitted after the rest element\"); }\n        break\n      } else {\n        exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));\n      }\n    }\n    var innerEndPos = this.start, innerEndLoc = this.startLoc;\n    this.expect(types.parenR);\n\n    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {\n      this.checkPatternErrors(refDestructuringErrors, false);\n      this.checkYieldAwaitInDefaultParams();\n      this.yieldPos = oldYieldPos;\n      this.awaitPos = oldAwaitPos;\n      return this.parseParenArrowList(startPos, startLoc, exprList)\n    }\n\n    if (!exprList.length || lastIsComma) { this.unexpected(this.lastTokStart); }\n    if (spreadStart) { this.unexpected(spreadStart); }\n    this.checkExpressionErrors(refDestructuringErrors, true);\n    this.yieldPos = oldYieldPos || this.yieldPos;\n    this.awaitPos = oldAwaitPos || this.awaitPos;\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n  } else {\n    val = this.parseParenExpression();\n  }\n\n  if (this.options.preserveParens) {\n    var par = this.startNodeAt(startPos, startLoc);\n    par.expression = val;\n    return this.finishNode(par, \"ParenthesizedExpression\")\n  } else {\n    return val\n  }\n};\n\npp$3.parseParenItem = function(item) {\n  return item\n};\n\npp$3.parseParenArrowList = function(startPos, startLoc, exprList) {\n  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)\n};\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\n\nvar empty$1 = [];\n\npp$3.parseNew = function() {\n  var node = this.startNode();\n  var meta = this.parseIdent(true);\n  if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {\n    node.meta = meta;\n    var containsEsc = this.containsEsc;\n    node.property = this.parseIdent(true);\n    if (node.property.name !== \"target\" || containsEsc)\n      { this.raiseRecoverable(node.property.start, \"The only valid meta property for new is new.target\"); }\n    if (!this.inFunction)\n      { this.raiseRecoverable(node.start, \"new.target can only be used in functions\"); }\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  var startPos = this.start, startLoc = this.startLoc;\n  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  if (this.eat(types.parenL)) { node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false); }\n  else { node.arguments = empty$1; }\n  return this.finishNode(node, \"NewExpression\")\n};\n\n// Parse template expression.\n\npp$3.parseTemplateElement = function(ref) {\n  var isTagged = ref.isTagged;\n\n  var elem = this.startNode();\n  if (this.type === types.invalidTemplate) {\n    if (!isTagged) {\n      this.raiseRecoverable(this.start, \"Bad escape sequence in untagged template literal\");\n    }\n    elem.value = {\n      raw: this.value,\n      cooked: null\n    };\n  } else {\n    elem.value = {\n      raw: this.input.slice(this.start, this.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.value\n    };\n  }\n  this.next();\n  elem.tail = this.type === types.backQuote;\n  return this.finishNode(elem, \"TemplateElement\")\n};\n\npp$3.parseTemplate = function(ref) {\n  var this$1 = this;\n  if ( ref === void 0 ) ref = {};\n  var isTagged = ref.isTagged; if ( isTagged === void 0 ) isTagged = false;\n\n  var node = this.startNode();\n  this.next();\n  node.expressions = [];\n  var curElt = this.parseTemplateElement({isTagged: isTagged});\n  node.quasis = [curElt];\n  while (!curElt.tail) {\n    if (this$1.type === types.eof) { this$1.raise(this$1.pos, \"Unterminated template literal\"); }\n    this$1.expect(types.dollarBraceL);\n    node.expressions.push(this$1.parseExpression());\n    this$1.expect(types.braceR);\n    node.quasis.push(curElt = this$1.parseTemplateElement({isTagged: isTagged}));\n  }\n  this.next();\n  return this.finishNode(node, \"TemplateLiteral\")\n};\n\npp$3.isAsyncProp = function(prop) {\n  return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" &&\n    (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || (this.options.ecmaVersion >= 9 && this.type === types.star)) &&\n    !lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n};\n\n// Parse an object literal or binding pattern.\n\npp$3.parseObj = function(isPattern, refDestructuringErrors) {\n  var this$1 = this;\n\n  var node = this.startNode(), first = true, propHash = {};\n  node.properties = [];\n  this.next();\n  while (!this.eat(types.braceR)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (this$1.afterTrailingComma(types.braceR)) { break }\n    } else { first = false; }\n\n    var prop = this$1.parseProperty(isPattern, refDestructuringErrors);\n    if (!isPattern) { this$1.checkPropClash(prop, propHash, refDestructuringErrors); }\n    node.properties.push(prop);\n  }\n  return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\")\n};\n\npp$3.parseProperty = function(isPattern, refDestructuringErrors) {\n  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;\n  if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {\n    if (isPattern) {\n      prop.argument = this.parseIdent(false);\n      if (this.type === types.comma) {\n        this.raise(this.start, \"Comma is not permitted after the rest element\");\n      }\n      return this.finishNode(prop, \"RestElement\")\n    }\n    // To disallow parenthesized identifier via `this.toAssignable()`.\n    if (this.type === types.parenL && refDestructuringErrors) {\n      if (refDestructuringErrors.parenthesizedAssign < 0) {\n        refDestructuringErrors.parenthesizedAssign = this.start;\n      }\n      if (refDestructuringErrors.parenthesizedBind < 0) {\n        refDestructuringErrors.parenthesizedBind = this.start;\n      }\n    }\n    // Parse argument.\n    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);\n    // To disallow trailing comma via `this.toAssignable()`.\n    if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {\n      refDestructuringErrors.trailingComma = this.start;\n    }\n    // Finish\n    return this.finishNode(prop, \"SpreadElement\")\n  }\n  if (this.options.ecmaVersion >= 6) {\n    prop.method = false;\n    prop.shorthand = false;\n    if (isPattern || refDestructuringErrors) {\n      startPos = this.start;\n      startLoc = this.startLoc;\n    }\n    if (!isPattern)\n      { isGenerator = this.eat(types.star); }\n  }\n  var containsEsc = this.containsEsc;\n  this.parsePropertyName(prop);\n  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {\n    isAsync = true;\n    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);\n    this.parsePropertyName(prop, refDestructuringErrors);\n  } else {\n    isAsync = false;\n  }\n  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);\n  return this.finishNode(prop, \"Property\")\n};\n\npp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {\n  if ((isGenerator || isAsync) && this.type === types.colon)\n    { this.unexpected(); }\n\n  if (this.eat(types.colon)) {\n    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);\n    prop.kind = \"init\";\n  } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {\n    if (isPattern) { this.unexpected(); }\n    prop.kind = \"init\";\n    prop.method = true;\n    prop.value = this.parseMethod(isGenerator, isAsync);\n  } else if (!isPattern && !containsEsc &&\n             this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === \"Identifier\" &&\n             (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n             (this.type !== types.comma && this.type !== types.braceR)) {\n    if (isGenerator || isAsync) { this.unexpected(); }\n    prop.kind = prop.key.name;\n    this.parsePropertyName(prop);\n    prop.value = this.parseMethod(false);\n    var paramCount = prop.kind === \"get\" ? 0 : 1;\n    if (prop.value.params.length !== paramCount) {\n      var start = prop.value.start;\n      if (prop.kind === \"get\")\n        { this.raiseRecoverable(start, \"getter should have no params\"); }\n      else\n        { this.raiseRecoverable(start, \"setter should have exactly one param\"); }\n    } else {\n      if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\")\n        { this.raiseRecoverable(prop.value.params[0].start, \"Setter cannot use rest params\"); }\n    }\n  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === \"Identifier\") {\n    this.checkUnreserved(prop.key);\n    prop.kind = \"init\";\n    if (isPattern) {\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else if (this.type === types.eq && refDestructuringErrors) {\n      if (refDestructuringErrors.shorthandAssign < 0)\n        { refDestructuringErrors.shorthandAssign = this.start; }\n      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);\n    } else {\n      prop.value = prop.key;\n    }\n    prop.shorthand = true;\n  } else { this.unexpected(); }\n};\n\npp$3.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n      return prop.key\n    } else {\n      prop.computed = false;\n    }\n  }\n  return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true)\n};\n\n// Initialize empty function node.\n\npp$3.initFunction = function(node) {\n  node.id = null;\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false;\n    node.expression = false;\n  }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = false; }\n};\n\n// Parse object or class method.\n\npp$3.parseMethod = function(isGenerator, isAsync) {\n  var node = this.startNode(), oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 6)\n    { node.generator = isGenerator; }\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = node.generator;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n  this.enterFunctionScope();\n\n  this.expect(types.parenL);\n  node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);\n  this.checkYieldAwaitInDefaultParams();\n  this.parseFunctionBody(node, false);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"FunctionExpression\")\n};\n\n// Parse arrow function expression with given parameters.\n\npp$3.parseArrowExpression = function(node, params, isAsync) {\n  var oldInGen = this.inGenerator, oldInAsync = this.inAsync,\n      oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldInFunc = this.inFunction;\n\n  this.enterFunctionScope();\n  this.initFunction(node);\n  if (this.options.ecmaVersion >= 8)\n    { node.async = !!isAsync; }\n\n  this.inGenerator = false;\n  this.inAsync = node.async;\n  this.yieldPos = 0;\n  this.awaitPos = 0;\n  this.inFunction = true;\n\n  node.params = this.toAssignableList(params, true);\n  this.parseFunctionBody(node, true);\n\n  this.inGenerator = oldInGen;\n  this.inAsync = oldInAsync;\n  this.yieldPos = oldYieldPos;\n  this.awaitPos = oldAwaitPos;\n  this.inFunction = oldInFunc;\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n};\n\n// Parse function body and check parameters.\n\npp$3.parseFunctionBody = function(node, isArrowFunction) {\n  var isExpression = isArrowFunction && this.type !== types.braceL;\n  var oldStrict = this.strict, useStrict = false;\n\n  if (isExpression) {\n    node.body = this.parseMaybeAssign();\n    node.expression = true;\n    this.checkParams(node, false);\n  } else {\n    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);\n    if (!oldStrict || nonSimple) {\n      useStrict = this.strictDirective(this.end);\n      // If this is a strict mode function, verify that argument names\n      // are not repeated, and it does not try to bind the words `eval`\n      // or `arguments`.\n      if (useStrict && nonSimple)\n        { this.raiseRecoverable(node.start, \"Illegal 'use strict' directive in function with non-simple parameter list\"); }\n    }\n    // Start a new scope with regard to labels and the `inFunction`\n    // flag (restore them to their old value afterwards).\n    var oldLabels = this.labels;\n    this.labels = [];\n    if (useStrict) { this.strict = true; }\n\n    // Add the params to varDeclaredNames to ensure that an error is thrown\n    // if a let/const declaration in the function clashes with one of the params.\n    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));\n    node.body = this.parseBlock(false);\n    node.expression = false;\n    this.adaptDirectivePrologue(node.body.body);\n    this.labels = oldLabels;\n  }\n  this.exitFunctionScope();\n\n  if (this.strict && node.id) {\n    // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n    this.checkLVal(node.id, \"none\");\n  }\n  this.strict = oldStrict;\n};\n\npp$3.isSimpleParamList = function(params) {\n  for (var i = 0, list = params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    if (param.type !== \"Identifier\") { return false\n  } }\n  return true\n};\n\n// Checks function params for various disallowed patterns such as using \"eval\"\n// or \"arguments\" and duplicate parameters.\n\npp$3.checkParams = function(node, allowDuplicates) {\n  var this$1 = this;\n\n  var nameHash = {};\n  for (var i = 0, list = node.params; i < list.length; i += 1)\n    {\n    var param = list[i];\n\n    this$1.checkLVal(param, \"var\", allowDuplicates ? null : nameHash);\n  }\n};\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\npp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {\n  var this$1 = this;\n\n  var elts = [], first = true;\n  while (!this.eat(close)) {\n    if (!first) {\n      this$1.expect(types.comma);\n      if (allowTrailingComma && this$1.afterTrailingComma(close)) { break }\n    } else { first = false; }\n\n    var elt = (void 0);\n    if (allowEmpty && this$1.type === types.comma)\n      { elt = null; }\n    else if (this$1.type === types.ellipsis) {\n      elt = this$1.parseSpread(refDestructuringErrors);\n      if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0)\n        { refDestructuringErrors.trailingComma = this$1.start; }\n    } else {\n      elt = this$1.parseMaybeAssign(false, refDestructuringErrors);\n    }\n    elts.push(elt);\n  }\n  return elts\n};\n\npp$3.checkUnreserved = function(ref) {\n  var start = ref.start;\n  var end = ref.end;\n  var name = ref.name;\n\n  if (this.inGenerator && name === \"yield\")\n    { this.raiseRecoverable(start, \"Can not use 'yield' as identifier inside a generator\"); }\n  if (this.inAsync && name === \"await\")\n    { this.raiseRecoverable(start, \"Can not use 'await' as identifier inside an async function\"); }\n  if (this.isKeyword(name))\n    { this.raise(start, (\"Unexpected keyword '\" + name + \"'\")); }\n  if (this.options.ecmaVersion < 6 &&\n    this.input.slice(start, end).indexOf(\"\\\\\") !== -1) { return }\n  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;\n  if (re.test(name)) {\n    if (!this.inAsync && name === \"await\")\n      { this.raiseRecoverable(start, \"Can not use keyword 'await' outside an async function\"); }\n    this.raiseRecoverable(start, (\"The keyword '\" + name + \"' is reserved\"));\n  }\n};\n\n// Parse the next token as an identifier. If `liberal` is true (used\n// when parsing properties), it will also convert keywords into\n// identifiers.\n\npp$3.parseIdent = function(liberal, isBinding) {\n  var node = this.startNode();\n  if (liberal && this.options.allowReserved === \"never\") { liberal = false; }\n  if (this.type === types.name) {\n    node.name = this.value;\n  } else if (this.type.keyword) {\n    node.name = this.type.keyword;\n\n    // To fix https://github.com/acornjs/acorn/issues/575\n    // `class` and `function` keywords push new context into this.context.\n    // But there is no chance to pop the context if the keyword is consumed as an identifier such as a property name.\n    // If the previous token is a dot, this does not apply because the context-managing code already ignored the keyword\n    if ((node.name === \"class\" || node.name === \"function\") &&\n        (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {\n      this.context.pop();\n    }\n  } else {\n    this.unexpected();\n  }\n  this.next();\n  this.finishNode(node, \"Identifier\");\n  if (!liberal) { this.checkUnreserved(node); }\n  return node\n};\n\n// Parses yield expression inside generator.\n\npp$3.parseYield = function() {\n  if (!this.yieldPos) { this.yieldPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  if (this.type === types.semi || this.canInsertSemicolon() || (this.type !== types.star && !this.type.startsExpr)) {\n    node.delegate = false;\n    node.argument = null;\n  } else {\n    node.delegate = this.eat(types.star);\n    node.argument = this.parseMaybeAssign();\n  }\n  return this.finishNode(node, \"YieldExpression\")\n};\n\npp$3.parseAwait = function() {\n  if (!this.awaitPos) { this.awaitPos = this.start; }\n\n  var node = this.startNode();\n  this.next();\n  node.argument = this.parseMaybeUnary(null, true);\n  return this.finishNode(node, \"AwaitExpression\")\n};\n\nvar pp$4 = Parser.prototype;\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\npp$4.raise = function(pos, message) {\n  var loc = getLineInfo(this.input, pos);\n  message += \" (\" + loc.line + \":\" + loc.column + \")\";\n  var err = new SyntaxError(message);\n  err.pos = pos; err.loc = loc; err.raisedAt = this.pos;\n  throw err\n};\n\npp$4.raiseRecoverable = pp$4.raise;\n\npp$4.curPosition = function() {\n  if (this.options.locations) {\n    return new Position(this.curLine, this.pos - this.lineStart)\n  }\n};\n\nvar pp$5 = Parser.prototype;\n\n// Object.assign polyfill\nvar assign = Object.assign || function(target) {\n  var sources = [], len = arguments.length - 1;\n  while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n  for (var i = 0, list = sources; i < list.length; i += 1) {\n    var source = list[i];\n\n    for (var key in source) {\n      if (has(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target\n};\n\n// The functions in this module keep track of declared variables in the current scope in order to detect duplicate variable names.\n\npp$5.enterFunctionScope = function() {\n  // var: a hash of var-declared names in the current lexical scope\n  // lexical: a hash of lexically-declared names in the current lexical scope\n  // childVar: a hash of var-declared names in all child lexical scopes of the current lexical scope (within the current function scope)\n  // parentLexical: a hash of lexically-declared names in all parent lexical scopes of the current lexical scope (within the current function scope)\n  this.scopeStack.push({var: {}, lexical: {}, childVar: {}, parentLexical: {}});\n};\n\npp$5.exitFunctionScope = function() {\n  this.scopeStack.pop();\n};\n\npp$5.enterLexicalScope = function() {\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n  var childScope = {var: {}, lexical: {}, childVar: {}, parentLexical: {}};\n\n  this.scopeStack.push(childScope);\n  assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);\n};\n\npp$5.exitLexicalScope = function() {\n  var childScope = this.scopeStack.pop();\n  var parentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  assign(parentScope.childVar, childScope.var, childScope.childVar);\n};\n\n/**\n * A name can be declared with `var` if there are no variables with the same name declared with `let`/`const`\n * in the current lexical scope or any of the parent lexical scopes in this function.\n */\npp$5.canDeclareVarName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name)\n};\n\n/**\n * A name can be declared with `let`/`const` if there are no variables with the same name declared with `let`/`const`\n * in the current scope, and there are no variables with the same name declared with `var` in the current scope or in\n * any child lexical scopes in this function.\n */\npp$5.canDeclareLexicalName = function(name) {\n  var currentScope = this.scopeStack[this.scopeStack.length - 1];\n\n  return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name)\n};\n\npp$5.declareVarName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].var[name] = true;\n};\n\npp$5.declareLexicalName = function(name) {\n  this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;\n};\n\nvar Node = function Node(parser, pos, loc) {\n  this.type = \"\";\n  this.start = pos;\n  this.end = 0;\n  if (parser.options.locations)\n    { this.loc = new SourceLocation(parser, loc); }\n  if (parser.options.directSourceFile)\n    { this.sourceFile = parser.options.directSourceFile; }\n  if (parser.options.ranges)\n    { this.range = [pos, 0]; }\n};\n\n// Start an AST node, attaching a start offset.\n\nvar pp$6 = Parser.prototype;\n\npp$6.startNode = function() {\n  return new Node(this, this.start, this.startLoc)\n};\n\npp$6.startNodeAt = function(pos, loc) {\n  return new Node(this, pos, loc)\n};\n\n// Finish an AST node, adding `type` and `end` properties.\n\nfunction finishNodeAt(node, type, pos, loc) {\n  node.type = type;\n  node.end = pos;\n  if (this.options.locations)\n    { node.loc.end = loc; }\n  if (this.options.ranges)\n    { node.range[1] = pos; }\n  return node\n}\n\npp$6.finishNode = function(node, type) {\n  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)\n};\n\n// Finish node at given position\n\npp$6.finishNodeAt = function(node, type, pos, loc) {\n  return finishNodeAt.call(this, node, type, pos, loc)\n};\n\n// The algorithm used to determine whether a regexp can appear at a\n// given point in the program is loosely based on sweet.js' approach.\n// See https://github.com/mozilla/sweet.js/wiki/design\n\nvar TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {\n  this.token = token;\n  this.isExpr = !!isExpr;\n  this.preserveSpace = !!preserveSpace;\n  this.override = override;\n  this.generator = !!generator;\n};\n\nvar types$1 = {\n  b_stat: new TokContext(\"{\", false),\n  b_expr: new TokContext(\"{\", true),\n  b_tmpl: new TokContext(\"${\", false),\n  p_stat: new TokContext(\"(\", false),\n  p_expr: new TokContext(\"(\", true),\n  q_tmpl: new TokContext(\"`\", true, true, function (p) { return p.tryReadTemplateToken(); }),\n  f_stat: new TokContext(\"function\", false),\n  f_expr: new TokContext(\"function\", true),\n  f_expr_gen: new TokContext(\"function\", true, false, null, true),\n  f_gen: new TokContext(\"function\", false, false, null, true)\n};\n\nvar pp$7 = Parser.prototype;\n\npp$7.initialContext = function() {\n  return [types$1.b_stat]\n};\n\npp$7.braceIsBlock = function(prevType) {\n  var parent = this.curContext();\n  if (parent === types$1.f_expr || parent === types$1.f_stat)\n    { return true }\n  if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr))\n    { return !parent.isExpr }\n\n  // The check for `tt.name && exprAllowed` detects whether we are\n  // after a `yield` or `of` construct. See the `updateContext` for\n  // `tt.name`.\n  if (prevType === types._return || prevType === types.name && this.exprAllowed)\n    { return lineBreak.test(this.input.slice(this.lastTokEnd, this.start)) }\n  if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow)\n    { return true }\n  if (prevType === types.braceL)\n    { return parent === types$1.b_stat }\n  if (prevType === types._var || prevType === types.name)\n    { return false }\n  return !this.exprAllowed\n};\n\npp$7.inGeneratorContext = function() {\n  var this$1 = this;\n\n  for (var i = this.context.length - 1; i >= 1; i--) {\n    var context = this$1.context[i];\n    if (context.token === \"function\")\n      { return context.generator }\n  }\n  return false\n};\n\npp$7.updateContext = function(prevType) {\n  var update, type = this.type;\n  if (type.keyword && prevType === types.dot)\n    { this.exprAllowed = false; }\n  else if (update = type.updateContext)\n    { update.call(this, prevType); }\n  else\n    { this.exprAllowed = type.beforeExpr; }\n};\n\n// Token-specific context update code\n\ntypes.parenR.updateContext = types.braceR.updateContext = function() {\n  if (this.context.length === 1) {\n    this.exprAllowed = true;\n    return\n  }\n  var out = this.context.pop();\n  if (out === types$1.b_stat && this.curContext().token === \"function\") {\n    out = this.context.pop();\n  }\n  this.exprAllowed = !out.isExpr;\n};\n\ntypes.braceL.updateContext = function(prevType) {\n  this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);\n  this.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function() {\n  this.context.push(types$1.b_tmpl);\n  this.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function(prevType) {\n  var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);\n  this.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function() {\n  // tokExprAllowed stays unchanged\n};\n\ntypes._function.updateContext = types._class.updateContext = function(prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else &&\n      !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat))\n    { this.context.push(types$1.f_expr); }\n  else\n    { this.context.push(types$1.f_stat); }\n  this.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function() {\n  if (this.curContext() === types$1.q_tmpl)\n    { this.context.pop(); }\n  else\n    { this.context.push(types$1.q_tmpl); }\n  this.exprAllowed = false;\n};\n\ntypes.star.updateContext = function(prevType) {\n  if (prevType === types._function) {\n    var index = this.context.length - 1;\n    if (this.context[index] === types$1.f_expr)\n      { this.context[index] = types$1.f_expr_gen; }\n    else\n      { this.context[index] = types$1.f_gen; }\n  }\n  this.exprAllowed = true;\n};\n\ntypes.name.updateContext = function(prevType) {\n  var allowed = false;\n  if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {\n    if (this.value === \"of\" && !this.exprAllowed ||\n        this.value === \"yield\" && this.inGeneratorContext())\n      { allowed = true; }\n  }\n  this.exprAllowed = allowed;\n};\n\nvar data = {\n  \"$LONE\": [\n    \"ASCII\",\n    \"ASCII_Hex_Digit\",\n    \"AHex\",\n    \"Alphabetic\",\n    \"Alpha\",\n    \"Any\",\n    \"Assigned\",\n    \"Bidi_Control\",\n    \"Bidi_C\",\n    \"Bidi_Mirrored\",\n    \"Bidi_M\",\n    \"Case_Ignorable\",\n    \"CI\",\n    \"Cased\",\n    \"Changes_When_Casefolded\",\n    \"CWCF\",\n    \"Changes_When_Casemapped\",\n    \"CWCM\",\n    \"Changes_When_Lowercased\",\n    \"CWL\",\n    \"Changes_When_NFKC_Casefolded\",\n    \"CWKCF\",\n    \"Changes_When_Titlecased\",\n    \"CWT\",\n    \"Changes_When_Uppercased\",\n    \"CWU\",\n    \"Dash\",\n    \"Default_Ignorable_Code_Point\",\n    \"DI\",\n    \"Deprecated\",\n    \"Dep\",\n    \"Diacritic\",\n    \"Dia\",\n    \"Emoji\",\n    \"Emoji_Component\",\n    \"Emoji_Modifier\",\n    \"Emoji_Modifier_Base\",\n    \"Emoji_Presentation\",\n    \"Extender\",\n    \"Ext\",\n    \"Grapheme_Base\",\n    \"Gr_Base\",\n    \"Grapheme_Extend\",\n    \"Gr_Ext\",\n    \"Hex_Digit\",\n    \"Hex\",\n    \"IDS_Binary_Operator\",\n    \"IDSB\",\n    \"IDS_Trinary_Operator\",\n    \"IDST\",\n    \"ID_Continue\",\n    \"IDC\",\n    \"ID_Start\",\n    \"IDS\",\n    \"Ideographic\",\n    \"Ideo\",\n    \"Join_Control\",\n    \"Join_C\",\n    \"Logical_Order_Exception\",\n    \"LOE\",\n    \"Lowercase\",\n    \"Lower\",\n    \"Math\",\n    \"Noncharacter_Code_Point\",\n    \"NChar\",\n    \"Pattern_Syntax\",\n    \"Pat_Syn\",\n    \"Pattern_White_Space\",\n    \"Pat_WS\",\n    \"Quotation_Mark\",\n    \"QMark\",\n    \"Radical\",\n    \"Regional_Indicator\",\n    \"RI\",\n    \"Sentence_Terminal\",\n    \"STerm\",\n    \"Soft_Dotted\",\n    \"SD\",\n    \"Terminal_Punctuation\",\n    \"Term\",\n    \"Unified_Ideograph\",\n    \"UIdeo\",\n    \"Uppercase\",\n    \"Upper\",\n    \"Variation_Selector\",\n    \"VS\",\n    \"White_Space\",\n    \"space\",\n    \"XID_Continue\",\n    \"XIDC\",\n    \"XID_Start\",\n    \"XIDS\"\n  ],\n  \"General_Category\": [\n    \"Cased_Letter\",\n    \"LC\",\n    \"Close_Punctuation\",\n    \"Pe\",\n    \"Connector_Punctuation\",\n    \"Pc\",\n    \"Control\",\n    \"Cc\",\n    \"cntrl\",\n    \"Currency_Symbol\",\n    \"Sc\",\n    \"Dash_Punctuation\",\n    \"Pd\",\n    \"Decimal_Number\",\n    \"Nd\",\n    \"digit\",\n    \"Enclosing_Mark\",\n    \"Me\",\n    \"Final_Punctuation\",\n    \"Pf\",\n    \"Format\",\n    \"Cf\",\n    \"Initial_Punctuation\",\n    \"Pi\",\n    \"Letter\",\n    \"L\",\n    \"Letter_Number\",\n    \"Nl\",\n    \"Line_Separator\",\n    \"Zl\",\n    \"Lowercase_Letter\",\n    \"Ll\",\n    \"Mark\",\n    \"M\",\n    \"Combining_Mark\",\n    \"Math_Symbol\",\n    \"Sm\",\n    \"Modifier_Letter\",\n    \"Lm\",\n    \"Modifier_Symbol\",\n    \"Sk\",\n    \"Nonspacing_Mark\",\n    \"Mn\",\n    \"Number\",\n    \"N\",\n    \"Open_Punctuation\",\n    \"Ps\",\n    \"Other\",\n    \"C\",\n    \"Other_Letter\",\n    \"Lo\",\n    \"Other_Number\",\n    \"No\",\n    \"Other_Punctuation\",\n    \"Po\",\n    \"Other_Symbol\",\n    \"So\",\n    \"Paragraph_Separator\",\n    \"Zp\",\n    \"Private_Use\",\n    \"Co\",\n    \"Punctuation\",\n    \"P\",\n    \"punct\",\n    \"Separator\",\n    \"Z\",\n    \"Space_Separator\",\n    \"Zs\",\n    \"Spacing_Mark\",\n    \"Mc\",\n    \"Surrogate\",\n    \"Cs\",\n    \"Symbol\",\n    \"S\",\n    \"Titlecase_Letter\",\n    \"Lt\",\n    \"Unassigned\",\n    \"Cn\",\n    \"Uppercase_Letter\",\n    \"Lu\"\n  ],\n  \"Script\": [\n    \"Adlam\",\n    \"Adlm\",\n    \"Ahom\",\n    \"Anatolian_Hieroglyphs\",\n    \"Hluw\",\n    \"Arabic\",\n    \"Arab\",\n    \"Armenian\",\n    \"Armn\",\n    \"Avestan\",\n    \"Avst\",\n    \"Balinese\",\n    \"Bali\",\n    \"Bamum\",\n    \"Bamu\",\n    \"Bassa_Vah\",\n    \"Bass\",\n    \"Batak\",\n    \"Batk\",\n    \"Bengali\",\n    \"Beng\",\n    \"Bhaiksuki\",\n    \"Bhks\",\n    \"Bopomofo\",\n    \"Bopo\",\n    \"Brahmi\",\n    \"Brah\",\n    \"Braille\",\n    \"Brai\",\n    \"Buginese\",\n    \"Bugi\",\n    \"Buhid\",\n    \"Buhd\",\n    \"Canadian_Aboriginal\",\n    \"Cans\",\n    \"Carian\",\n    \"Cari\",\n    \"Caucasian_Albanian\",\n    \"Aghb\",\n    \"Chakma\",\n    \"Cakm\",\n    \"Cham\",\n    \"Cherokee\",\n    \"Cher\",\n    \"Common\",\n    \"Zyyy\",\n    \"Coptic\",\n    \"Copt\",\n    \"Qaac\",\n    \"Cuneiform\",\n    \"Xsux\",\n    \"Cypriot\",\n    \"Cprt\",\n    \"Cyrillic\",\n    \"Cyrl\",\n    \"Deseret\",\n    \"Dsrt\",\n    \"Devanagari\",\n    \"Deva\",\n    \"Duployan\",\n    \"Dupl\",\n    \"Egyptian_Hieroglyphs\",\n    \"Egyp\",\n    \"Elbasan\",\n    \"Elba\",\n    \"Ethiopic\",\n    \"Ethi\",\n    \"Georgian\",\n    \"Geor\",\n    \"Glagolitic\",\n    \"Glag\",\n    \"Gothic\",\n    \"Goth\",\n    \"Grantha\",\n    \"Gran\",\n    \"Greek\",\n    \"Grek\",\n    \"Gujarati\",\n    \"Gujr\",\n    \"Gurmukhi\",\n    \"Guru\",\n    \"Han\",\n    \"Hani\",\n    \"Hangul\",\n    \"Hang\",\n    \"Hanunoo\",\n    \"Hano\",\n    \"Hatran\",\n    \"Hatr\",\n    \"Hebrew\",\n    \"Hebr\",\n    \"Hiragana\",\n    \"Hira\",\n    \"Imperial_Aramaic\",\n    \"Armi\",\n    \"Inherited\",\n    \"Zinh\",\n    \"Qaai\",\n    \"Inscriptional_Pahlavi\",\n    \"Phli\",\n    \"Inscriptional_Parthian\",\n    \"Prti\",\n    \"Javanese\",\n    \"Java\",\n    \"Kaithi\",\n    \"Kthi\",\n    \"Kannada\",\n    \"Knda\",\n    \"Katakana\",\n    \"Kana\",\n    \"Kayah_Li\",\n    \"Kali\",\n    \"Kharoshthi\",\n    \"Khar\",\n    \"Khmer\",\n    \"Khmr\",\n    \"Khojki\",\n    \"Khoj\",\n    \"Khudawadi\",\n    \"Sind\",\n    \"Lao\",\n    \"Laoo\",\n    \"Latin\",\n    \"Latn\",\n    \"Lepcha\",\n    \"Lepc\",\n    \"Limbu\",\n    \"Limb\",\n    \"Linear_A\",\n    \"Lina\",\n    \"Linear_B\",\n    \"Linb\",\n    \"Lisu\",\n    \"Lycian\",\n    \"Lyci\",\n    \"Lydian\",\n    \"Lydi\",\n    \"Mahajani\",\n    \"Mahj\",\n    \"Malayalam\",\n    \"Mlym\",\n    \"Mandaic\",\n    \"Mand\",\n    \"Manichaean\",\n    \"Mani\",\n    \"Marchen\",\n    \"Marc\",\n    \"Masaram_Gondi\",\n    \"Gonm\",\n    \"Meetei_Mayek\",\n    \"Mtei\",\n    \"Mende_Kikakui\",\n    \"Mend\",\n    \"Meroitic_Cursive\",\n    \"Merc\",\n    \"Meroitic_Hieroglyphs\",\n    \"Mero\",\n    \"Miao\",\n    \"Plrd\",\n    \"Modi\",\n    \"Mongolian\",\n    \"Mong\",\n    \"Mro\",\n    \"Mroo\",\n    \"Multani\",\n    \"Mult\",\n    \"Myanmar\",\n    \"Mymr\",\n    \"Nabataean\",\n    \"Nbat\",\n    \"New_Tai_Lue\",\n    \"Talu\",\n    \"Newa\",\n    \"Nko\",\n    \"Nkoo\",\n    \"Nushu\",\n    \"Nshu\",\n    \"Ogham\",\n    \"Ogam\",\n    \"Ol_Chiki\",\n    \"Olck\",\n    \"Old_Hungarian\",\n    \"Hung\",\n    \"Old_Italic\",\n    \"Ital\",\n    \"Old_North_Arabian\",\n    \"Narb\",\n    \"Old_Permic\",\n    \"Perm\",\n    \"Old_Persian\",\n    \"Xpeo\",\n    \"Old_South_Arabian\",\n    \"Sarb\",\n    \"Old_Turkic\",\n    \"Orkh\",\n    \"Oriya\",\n    \"Orya\",\n    \"Osage\",\n    \"Osge\",\n    \"Osmanya\",\n    \"Osma\",\n    \"Pahawh_Hmong\",\n    \"Hmng\",\n    \"Palmyrene\",\n    \"Palm\",\n    \"Pau_Cin_Hau\",\n    \"Pauc\",\n    \"Phags_Pa\",\n    \"Phag\",\n    \"Phoenician\",\n    \"Phnx\",\n    \"Psalter_Pahlavi\",\n    \"Phlp\",\n    \"Rejang\",\n    \"Rjng\",\n    \"Runic\",\n    \"Runr\",\n    \"Samaritan\",\n    \"Samr\",\n    \"Saurashtra\",\n    \"Saur\",\n    \"Sharada\",\n    \"Shrd\",\n    \"Shavian\",\n    \"Shaw\",\n    \"Siddham\",\n    \"Sidd\",\n    \"SignWriting\",\n    \"Sgnw\",\n    \"Sinhala\",\n    \"Sinh\",\n    \"Sora_Sompeng\",\n    \"Sora\",\n    \"Soyombo\",\n    \"Soyo\",\n    \"Sundanese\",\n    \"Sund\",\n    \"Syloti_Nagri\",\n    \"Sylo\",\n    \"Syriac\",\n    \"Syrc\",\n    \"Tagalog\",\n    \"Tglg\",\n    \"Tagbanwa\",\n    \"Tagb\",\n    \"Tai_Le\",\n    \"Tale\",\n    \"Tai_Tham\",\n    \"Lana\",\n    \"Tai_Viet\",\n    \"Tavt\",\n    \"Takri\",\n    \"Takr\",\n    \"Tamil\",\n    \"Taml\",\n    \"Tangut\",\n    \"Tang\",\n    \"Telugu\",\n    \"Telu\",\n    \"Thaana\",\n    \"Thaa\",\n    \"Thai\",\n    \"Tibetan\",\n    \"Tibt\",\n    \"Tifinagh\",\n    \"Tfng\",\n    \"Tirhuta\",\n    \"Tirh\",\n    \"Ugaritic\",\n    \"Ugar\",\n    \"Vai\",\n    \"Vaii\",\n    \"Warang_Citi\",\n    \"Wara\",\n    \"Yi\",\n    \"Yiii\",\n    \"Zanabazar_Square\",\n    \"Zanb\"\n  ]\n};\nArray.prototype.push.apply(data.$LONE, data.General_Category);\ndata.gc = data.General_Category;\ndata.sc = data.Script_Extensions = data.scx = data.Script;\n\nvar pp$9 = Parser.prototype;\n\nvar RegExpValidationState = function RegExpValidationState(parser) {\n  this.parser = parser;\n  this.validFlags = \"gim\" + (parser.options.ecmaVersion >= 6 ? \"uy\" : \"\") + (parser.options.ecmaVersion >= 9 ? \"s\" : \"\");\n  this.source = \"\";\n  this.flags = \"\";\n  this.start = 0;\n  this.switchU = false;\n  this.switchN = false;\n  this.pos = 0;\n  this.lastIntValue = 0;\n  this.lastStringValue = \"\";\n  this.lastAssertionIsQuantifiable = false;\n  this.numCapturingParens = 0;\n  this.maxBackReference = 0;\n  this.groupNames = [];\n  this.backReferenceNames = [];\n};\n\nRegExpValidationState.prototype.reset = function reset (start, pattern, flags) {\n  var unicode = flags.indexOf(\"u\") !== -1;\n  this.start = start | 0;\n  this.source = pattern + \"\";\n  this.flags = flags;\n  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;\n  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;\n};\n\nRegExpValidationState.prototype.raise = function raise (message) {\n  this.parser.raiseRecoverable(this.start, (\"Invalid regular expression: /\" + (this.source) + \"/: \" + message));\n};\n\n// If u flag is given, this returns the code point at the index (it combines a surrogate pair).\n// Otherwise, this returns the code unit of the index (can be a part of a surrogate pair).\nRegExpValidationState.prototype.at = function at (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return -1\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return c\n  }\n  return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00\n};\n\nRegExpValidationState.prototype.nextIndex = function nextIndex (i) {\n  var s = this.source;\n  var l = s.length;\n  if (i >= l) {\n    return l\n  }\n  var c = s.charCodeAt(i);\n  if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {\n    return i + 1\n  }\n  return i + 2\n};\n\nRegExpValidationState.prototype.current = function current () {\n  return this.at(this.pos)\n};\n\nRegExpValidationState.prototype.lookahead = function lookahead () {\n  return this.at(this.nextIndex(this.pos))\n};\n\nRegExpValidationState.prototype.advance = function advance () {\n  this.pos = this.nextIndex(this.pos);\n};\n\nRegExpValidationState.prototype.eat = function eat (ch) {\n  if (this.current() === ch) {\n    this.advance();\n    return true\n  }\n  return false\n};\n\nfunction codePointToString$1(ch) {\n  if (ch <= 0xFFFF) { return String.fromCharCode(ch) }\n  ch -= 0x10000;\n  return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00)\n}\n\n/**\n * Validate the flags part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpFlags = function(state) {\n  var this$1 = this;\n\n  var validFlags = state.validFlags;\n  var flags = state.flags;\n\n  for (var i = 0; i < flags.length; i++) {\n    var flag = flags.charAt(i);\n    if (validFlags.indexOf(flag) === -1) {\n      this$1.raise(state.start, \"Invalid regular expression flag\");\n    }\n    if (flags.indexOf(flag, i + 1) > -1) {\n      this$1.raise(state.start, \"Duplicate regular expression flag\");\n    }\n  }\n};\n\n/**\n * Validate the pattern part of a given RegExpLiteral.\n *\n * @param {RegExpValidationState} state The state to validate RegExp.\n * @returns {void}\n */\npp$9.validateRegExpPattern = function(state) {\n  this.regexp_pattern(state);\n\n  // The goal symbol for the parse is |Pattern[~U, ~N]|. If the result of\n  // parsing contains a |GroupName|, reparse with the goal symbol\n  // |Pattern[~U, +N]| and use this result instead. Throw a *SyntaxError*\n  // exception if _P_ did not conform to the grammar, if any elements of _P_\n  // were not matched by the parse, or if any Early Error conditions exist.\n  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {\n    state.switchN = true;\n    this.regexp_pattern(state);\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Pattern\npp$9.regexp_pattern = function(state) {\n  state.pos = 0;\n  state.lastIntValue = 0;\n  state.lastStringValue = \"\";\n  state.lastAssertionIsQuantifiable = false;\n  state.numCapturingParens = 0;\n  state.maxBackReference = 0;\n  state.groupNames.length = 0;\n  state.backReferenceNames.length = 0;\n\n  this.regexp_disjunction(state);\n\n  if (state.pos !== state.source.length) {\n    // Make the same messages as V8.\n    if (state.eat(0x29 /* ) */)) {\n      state.raise(\"Unmatched ')'\");\n    }\n    if (state.eat(0x5D /* [ */) || state.eat(0x7D /* } */)) {\n      state.raise(\"Lone quantifier brackets\");\n    }\n  }\n  if (state.maxBackReference > state.numCapturingParens) {\n    state.raise(\"Invalid escape\");\n  }\n  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {\n    var name = list[i];\n\n    if (state.groupNames.indexOf(name) === -1) {\n      state.raise(\"Invalid named capture referenced\");\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Disjunction\npp$9.regexp_disjunction = function(state) {\n  var this$1 = this;\n\n  this.regexp_alternative(state);\n  while (state.eat(0x7C /* | */)) {\n    this$1.regexp_alternative(state);\n  }\n\n  // Make the same message as V8.\n  if (this.regexp_eatQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  if (state.eat(0x7B /* { */)) {\n    state.raise(\"Lone quantifier brackets\");\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Alternative\npp$9.regexp_alternative = function(state) {\n  while (state.pos < state.source.length && this.regexp_eatTerm(state))\n    {  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Term\npp$9.regexp_eatTerm = function(state) {\n  if (this.regexp_eatAssertion(state)) {\n    // Handle `QuantifiableAssertion Quantifier` alternative.\n    // `state.lastAssertionIsQuantifiable` is true if the last eaten Assertion\n    // is a QuantifiableAssertion.\n    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {\n      // Make the same message as V8.\n      if (state.switchU) {\n        state.raise(\"Invalid quantifier\");\n      }\n    }\n    return true\n  }\n\n  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {\n    this.regexp_eatQuantifier(state);\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-Assertion\npp$9.regexp_eatAssertion = function(state) {\n  var start = state.pos;\n  state.lastAssertionIsQuantifiable = false;\n\n  // ^, $\n  if (state.eat(0x5E /* ^ */) || state.eat(0x24 /* $ */)) {\n    return true\n  }\n\n  // \\b \\B\n  if (state.eat(0x5C /* \\ */)) {\n    if (state.eat(0x42 /* B */) || state.eat(0x62 /* b */)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  // Lookahead / Lookbehind\n  if (state.eat(0x28 /* ( */) && state.eat(0x3F /* ? */)) {\n    var lookbehind = false;\n    if (this.options.ecmaVersion >= 9) {\n      lookbehind = state.eat(0x3C /* < */);\n    }\n    if (state.eat(0x3D /* = */) || state.eat(0x21 /* ! */)) {\n      this.regexp_disjunction(state);\n      if (!state.eat(0x29 /* ) */)) {\n        state.raise(\"Unterminated group\");\n      }\n      state.lastAssertionIsQuantifiable = !lookbehind;\n      return true\n    }\n  }\n\n  state.pos = start;\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Quantifier\npp$9.regexp_eatQuantifier = function(state, noError) {\n  if ( noError === void 0 ) noError = false;\n\n  if (this.regexp_eatQuantifierPrefix(state, noError)) {\n    state.eat(0x3F /* ? */);\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-QuantifierPrefix\npp$9.regexp_eatQuantifierPrefix = function(state, noError) {\n  return (\n    state.eat(0x2A /* * */) ||\n    state.eat(0x2B /* + */) ||\n    state.eat(0x3F /* ? */) ||\n    this.regexp_eatBracedQuantifier(state, noError)\n  )\n};\npp$9.regexp_eatBracedQuantifier = function(state, noError) {\n  var start = state.pos;\n  if (state.eat(0x7B /* { */)) {\n    var min = 0, max = -1;\n    if (this.regexp_eatDecimalDigits(state)) {\n      min = state.lastIntValue;\n      if (state.eat(0x2C /* , */) && this.regexp_eatDecimalDigits(state)) {\n        max = state.lastIntValue;\n      }\n      if (state.eat(0x7D /* } */)) {\n        // SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-term\n        if (max !== -1 && max < min && !noError) {\n          state.raise(\"numbers out of order in {} quantifier\");\n        }\n        return true\n      }\n    }\n    if (state.switchU && !noError) {\n      state.raise(\"Incomplete quantifier\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Atom\npp$9.regexp_eatAtom = function(state) {\n  return (\n    this.regexp_eatPatternCharacters(state) ||\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state)\n  )\n};\npp$9.regexp_eatReverseSolidusAtomEscape = function(state) {\n  var start = state.pos;\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatAtomEscape(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatUncapturingGroup = function(state) {\n  var start = state.pos;\n  if (state.eat(0x28 /* ( */)) {\n    if (state.eat(0x3F /* ? */) && state.eat(0x3A /* : */)) {\n      this.regexp_disjunction(state);\n      if (state.eat(0x29 /* ) */)) {\n        return true\n      }\n      state.raise(\"Unterminated group\");\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatCapturingGroup = function(state) {\n  if (state.eat(0x28 /* ( */)) {\n    if (this.options.ecmaVersion >= 9) {\n      this.regexp_groupSpecifier(state);\n    } else if (state.current() === 0x3F /* ? */) {\n      state.raise(\"Invalid group\");\n    }\n    this.regexp_disjunction(state);\n    if (state.eat(0x29 /* ) */)) {\n      state.numCapturingParens += 1;\n      return true\n    }\n    state.raise(\"Unterminated group\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedAtom\npp$9.regexp_eatExtendedAtom = function(state) {\n  return (\n    state.eat(0x2E /* . */) ||\n    this.regexp_eatReverseSolidusAtomEscape(state) ||\n    this.regexp_eatCharacterClass(state) ||\n    this.regexp_eatUncapturingGroup(state) ||\n    this.regexp_eatCapturingGroup(state) ||\n    this.regexp_eatInvalidBracedQuantifier(state) ||\n    this.regexp_eatExtendedPatternCharacter(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-InvalidBracedQuantifier\npp$9.regexp_eatInvalidBracedQuantifier = function(state) {\n  if (this.regexp_eatBracedQuantifier(state, true)) {\n    state.raise(\"Nothing to repeat\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-SyntaxCharacter\npp$9.regexp_eatSyntaxCharacter = function(state) {\n  var ch = state.current();\n  if (isSyntaxCharacter(ch)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isSyntaxCharacter(ch) {\n  return (\n    ch === 0x24 /* $ */ ||\n    ch >= 0x28 /* ( */ && ch <= 0x2B /* + */ ||\n    ch === 0x2E /* . */ ||\n    ch === 0x3F /* ? */ ||\n    ch >= 0x5B /* [ */ && ch <= 0x5E /* ^ */ ||\n    ch >= 0x7B /* { */ && ch <= 0x7D /* } */\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-PatternCharacter\n// But eat eager.\npp$9.regexp_eatPatternCharacters = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {\n    state.advance();\n  }\n  return state.pos !== start\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ExtendedPatternCharacter\npp$9.regexp_eatExtendedPatternCharacter = function(state) {\n  var ch = state.current();\n  if (\n    ch !== -1 &&\n    ch !== 0x24 /* $ */ &&\n    !(ch >= 0x28 /* ( */ && ch <= 0x2B /* + */) &&\n    ch !== 0x2E /* . */ &&\n    ch !== 0x3F /* ? */ &&\n    ch !== 0x5B /* [ */ &&\n    ch !== 0x5E /* ^ */ &&\n    ch !== 0x7C /* | */\n  ) {\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// GroupSpecifier[U] ::\n//   [empty]\n//   `?` GroupName[?U]\npp$9.regexp_groupSpecifier = function(state) {\n  if (state.eat(0x3F /* ? */)) {\n    if (this.regexp_eatGroupName(state)) {\n      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {\n        state.raise(\"Duplicate capture group name\");\n      }\n      state.groupNames.push(state.lastStringValue);\n      return\n    }\n    state.raise(\"Invalid group\");\n  }\n};\n\n// GroupName[U] ::\n//   `<` RegExpIdentifierName[?U] `>`\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatGroupName = function(state) {\n  state.lastStringValue = \"\";\n  if (state.eat(0x3C /* < */)) {\n    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E /* > */)) {\n      return true\n    }\n    state.raise(\"Invalid capture group name\");\n  }\n  return false\n};\n\n// RegExpIdentifierName[U] ::\n//   RegExpIdentifierStart[?U]\n//   RegExpIdentifierName[?U] RegExpIdentifierPart[?U]\n// Note: this updates `state.lastStringValue` property with the eaten name.\npp$9.regexp_eatRegExpIdentifierName = function(state) {\n  state.lastStringValue = \"\";\n  if (this.regexp_eatRegExpIdentifierStart(state)) {\n    state.lastStringValue += codePointToString$1(state.lastIntValue);\n    while (this.regexp_eatRegExpIdentifierPart(state)) {\n      state.lastStringValue += codePointToString$1(state.lastIntValue);\n    }\n    return true\n  }\n  return false\n};\n\n// RegExpIdentifierStart[U] ::\n//   UnicodeIDStart\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\npp$9.regexp_eatRegExpIdentifierStart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierStart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierStart(ch) {\n  return isIdentifierStart(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */\n}\n\n// RegExpIdentifierPart[U] ::\n//   UnicodeIDContinue\n//   `$`\n//   `_`\n//   `\\` RegExpUnicodeEscapeSequence[?U]\n//   <ZWNJ>\n//   <ZWJ>\npp$9.regexp_eatRegExpIdentifierPart = function(state) {\n  var start = state.pos;\n  var ch = state.current();\n  state.advance();\n\n  if (ch === 0x5C /* \\ */ && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {\n    ch = state.lastIntValue;\n  }\n  if (isRegExpIdentifierPart(ch)) {\n    state.lastIntValue = ch;\n    return true\n  }\n\n  state.pos = start;\n  return false\n};\nfunction isRegExpIdentifierPart(ch) {\n  return isIdentifierChar(ch, true) || ch === 0x24 /* $ */ || ch === 0x5F /* _ */ || ch === 0x200C /* <ZWNJ> */ || ch === 0x200D /* <ZWJ> */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-AtomEscape\npp$9.regexp_eatAtomEscape = function(state) {\n  if (\n    this.regexp_eatBackReference(state) ||\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state) ||\n    (state.switchN && this.regexp_eatKGroupName(state))\n  ) {\n    return true\n  }\n  if (state.switchU) {\n    // Make the same message as V8.\n    if (state.current() === 0x63 /* c */) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.raise(\"Invalid escape\");\n  }\n  return false\n};\npp$9.regexp_eatBackReference = function(state) {\n  var start = state.pos;\n  if (this.regexp_eatDecimalEscape(state)) {\n    var n = state.lastIntValue;\n    if (state.switchU) {\n      // For SyntaxError in https://www.ecma-international.org/ecma-262/8.0/#sec-atomescape\n      if (n > state.maxBackReference) {\n        state.maxBackReference = n;\n      }\n      return true\n    }\n    if (n <= state.numCapturingParens) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatKGroupName = function(state) {\n  if (state.eat(0x6B /* k */)) {\n    if (this.regexp_eatGroupName(state)) {\n      state.backReferenceNames.push(state.lastStringValue);\n      return true\n    }\n    state.raise(\"Invalid named reference\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-CharacterEscape\npp$9.regexp_eatCharacterEscape = function(state) {\n  return (\n    this.regexp_eatControlEscape(state) ||\n    this.regexp_eatCControlLetter(state) ||\n    this.regexp_eatZero(state) ||\n    this.regexp_eatHexEscapeSequence(state) ||\n    this.regexp_eatRegExpUnicodeEscapeSequence(state) ||\n    (!state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state)) ||\n    this.regexp_eatIdentityEscape(state)\n  )\n};\npp$9.regexp_eatCControlLetter = function(state) {\n  var start = state.pos;\n  if (state.eat(0x63 /* c */)) {\n    if (this.regexp_eatControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n  return false\n};\npp$9.regexp_eatZero = function(state) {\n  if (state.current() === 0x30 /* 0 */ && !isDecimalDigit(state.lookahead())) {\n    state.lastIntValue = 0;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlEscape\npp$9.regexp_eatControlEscape = function(state) {\n  var ch = state.current();\n  if (ch === 0x74 /* t */) {\n    state.lastIntValue = 0x09; /* \\t */\n    state.advance();\n    return true\n  }\n  if (ch === 0x6E /* n */) {\n    state.lastIntValue = 0x0A; /* \\n */\n    state.advance();\n    return true\n  }\n  if (ch === 0x76 /* v */) {\n    state.lastIntValue = 0x0B; /* \\v */\n    state.advance();\n    return true\n  }\n  if (ch === 0x66 /* f */) {\n    state.lastIntValue = 0x0C; /* \\f */\n    state.advance();\n    return true\n  }\n  if (ch === 0x72 /* r */) {\n    state.lastIntValue = 0x0D; /* \\r */\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ControlLetter\npp$9.regexp_eatControlLetter = function(state) {\n  var ch = state.current();\n  if (isControlLetter(ch)) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\nfunction isControlLetter(ch) {\n  return (\n    (ch >= 0x41 /* A */ && ch <= 0x5A /* Z */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x7A /* z */)\n  )\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-RegExpUnicodeEscapeSequence\npp$9.regexp_eatRegExpUnicodeEscapeSequence = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x75 /* u */)) {\n    if (this.regexp_eatFixedHexDigits(state, 4)) {\n      var lead = state.lastIntValue;\n      if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {\n        var leadSurrogateEnd = state.pos;\n        if (state.eat(0x5C /* \\ */) && state.eat(0x75 /* u */) && this.regexp_eatFixedHexDigits(state, 4)) {\n          var trail = state.lastIntValue;\n          if (trail >= 0xDC00 && trail <= 0xDFFF) {\n            state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;\n            return true\n          }\n        }\n        state.pos = leadSurrogateEnd;\n        state.lastIntValue = lead;\n      }\n      return true\n    }\n    if (\n      state.switchU &&\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatHexDigits(state) &&\n      state.eat(0x7D /* } */) &&\n      isValidUnicode(state.lastIntValue)\n    ) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid unicode escape\");\n    }\n    state.pos = start;\n  }\n\n  return false\n};\nfunction isValidUnicode(ch) {\n  return ch >= 0 && ch <= 0x10FFFF\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-IdentityEscape\npp$9.regexp_eatIdentityEscape = function(state) {\n  if (state.switchU) {\n    if (this.regexp_eatSyntaxCharacter(state)) {\n      return true\n    }\n    if (state.eat(0x2F /* / */)) {\n      state.lastIntValue = 0x2F; /* / */\n      return true\n    }\n    return false\n  }\n\n  var ch = state.current();\n  if (ch !== 0x63 /* c */ && (!state.switchN || ch !== 0x6B /* k */)) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalEscape\npp$9.regexp_eatDecimalEscape = function(state) {\n  state.lastIntValue = 0;\n  var ch = state.current();\n  if (ch >= 0x31 /* 1 */ && ch <= 0x39 /* 9 */) {\n    do {\n      state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n      state.advance();\n    } while ((ch = state.current()) >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */)\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClassEscape\npp$9.regexp_eatCharacterClassEscape = function(state) {\n  var ch = state.current();\n\n  if (isCharacterClassEscape(ch)) {\n    state.lastIntValue = -1;\n    state.advance();\n    return true\n  }\n\n  if (\n    state.switchU &&\n    this.options.ecmaVersion >= 9 &&\n    (ch === 0x50 /* P */ || ch === 0x70 /* p */)\n  ) {\n    state.lastIntValue = -1;\n    state.advance();\n    if (\n      state.eat(0x7B /* { */) &&\n      this.regexp_eatUnicodePropertyValueExpression(state) &&\n      state.eat(0x7D /* } */)\n    ) {\n      return true\n    }\n    state.raise(\"Invalid property name\");\n  }\n\n  return false\n};\nfunction isCharacterClassEscape(ch) {\n  return (\n    ch === 0x64 /* d */ ||\n    ch === 0x44 /* D */ ||\n    ch === 0x73 /* s */ ||\n    ch === 0x53 /* S */ ||\n    ch === 0x77 /* w */ ||\n    ch === 0x57 /* W */\n  )\n}\n\n// UnicodePropertyValueExpression ::\n//   UnicodePropertyName `=` UnicodePropertyValue\n//   LoneUnicodePropertyNameOrValue\npp$9.regexp_eatUnicodePropertyValueExpression = function(state) {\n  var start = state.pos;\n\n  // UnicodePropertyName `=` UnicodePropertyValue\n  if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D /* = */)) {\n    var name = state.lastStringValue;\n    if (this.regexp_eatUnicodePropertyValue(state)) {\n      var value = state.lastStringValue;\n      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);\n      return true\n    }\n  }\n  state.pos = start;\n\n  // LoneUnicodePropertyNameOrValue\n  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {\n    var nameOrValue = state.lastStringValue;\n    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);\n    return true\n  }\n  return false\n};\npp$9.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {\n  if (!data.hasOwnProperty(name) || data[name].indexOf(value) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\npp$9.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {\n  if (data.$LONE.indexOf(nameOrValue) === -1) {\n    state.raise(\"Invalid property name\");\n  }\n};\n\n// UnicodePropertyName ::\n//   UnicodePropertyNameCharacters\npp$9.regexp_eatUnicodePropertyName = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyNameCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyNameCharacter(ch) {\n  return isControlLetter(ch) || ch === 0x5F /* _ */\n}\n\n// UnicodePropertyValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatUnicodePropertyValue = function(state) {\n  var ch = 0;\n  state.lastStringValue = \"\";\n  while (isUnicodePropertyValueCharacter(ch = state.current())) {\n    state.lastStringValue += codePointToString$1(ch);\n    state.advance();\n  }\n  return state.lastStringValue !== \"\"\n};\nfunction isUnicodePropertyValueCharacter(ch) {\n  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch)\n}\n\n// LoneUnicodePropertyNameOrValue ::\n//   UnicodePropertyValueCharacters\npp$9.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {\n  return this.regexp_eatUnicodePropertyValue(state)\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-CharacterClass\npp$9.regexp_eatCharacterClass = function(state) {\n  if (state.eat(0x5B /* [ */)) {\n    state.eat(0x5E /* ^ */);\n    this.regexp_classRanges(state);\n    if (state.eat(0x5D /* [ */)) {\n      return true\n    }\n    // Unreachable since it threw \"unterminated regular expression\" error before.\n    state.raise(\"Unterminated character class\");\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRanges\n// https://www.ecma-international.org/ecma-262/8.0/#prod-NonemptyClassRangesNoDash\npp$9.regexp_classRanges = function(state) {\n  var this$1 = this;\n\n  while (this.regexp_eatClassAtom(state)) {\n    var left = state.lastIntValue;\n    if (state.eat(0x2D /* - */) && this$1.regexp_eatClassAtom(state)) {\n      var right = state.lastIntValue;\n      if (state.switchU && (left === -1 || right === -1)) {\n        state.raise(\"Invalid character class\");\n      }\n      if (left !== -1 && right !== -1 && left > right) {\n        state.raise(\"Range out of order in character class\");\n      }\n    }\n  }\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtom\n// https://www.ecma-international.org/ecma-262/8.0/#prod-ClassAtomNoDash\npp$9.regexp_eatClassAtom = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x5C /* \\ */)) {\n    if (this.regexp_eatClassEscape(state)) {\n      return true\n    }\n    if (state.switchU) {\n      // Make the same message as V8.\n      var ch$1 = state.current();\n      if (ch$1 === 0x63 /* c */ || isOctalDigit(ch$1)) {\n        state.raise(\"Invalid class escape\");\n      }\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n\n  var ch = state.current();\n  if (ch !== 0x5D /* [ */) {\n    state.lastIntValue = ch;\n    state.advance();\n    return true\n  }\n\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassEscape\npp$9.regexp_eatClassEscape = function(state) {\n  var start = state.pos;\n\n  if (state.eat(0x62 /* b */)) {\n    state.lastIntValue = 0x08; /* <BS> */\n    return true\n  }\n\n  if (state.switchU && state.eat(0x2D /* - */)) {\n    state.lastIntValue = 0x2D; /* - */\n    return true\n  }\n\n  if (!state.switchU && state.eat(0x63 /* c */)) {\n    if (this.regexp_eatClassControlLetter(state)) {\n      return true\n    }\n    state.pos = start;\n  }\n\n  return (\n    this.regexp_eatCharacterClassEscape(state) ||\n    this.regexp_eatCharacterEscape(state)\n  )\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-ClassControlLetter\npp$9.regexp_eatClassControlLetter = function(state) {\n  var ch = state.current();\n  if (isDecimalDigit(ch) || ch === 0x5F /* _ */) {\n    state.lastIntValue = ch % 0x20;\n    state.advance();\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatHexEscapeSequence = function(state) {\n  var start = state.pos;\n  if (state.eat(0x78 /* x */)) {\n    if (this.regexp_eatFixedHexDigits(state, 2)) {\n      return true\n    }\n    if (state.switchU) {\n      state.raise(\"Invalid escape\");\n    }\n    state.pos = start;\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-DecimalDigits\npp$9.regexp_eatDecimalDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isDecimalDigit(ch = state.current())) {\n    state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30 /* 0 */);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isDecimalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigits\npp$9.regexp_eatHexDigits = function(state) {\n  var start = state.pos;\n  var ch = 0;\n  state.lastIntValue = 0;\n  while (isHexDigit(ch = state.current())) {\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return state.pos !== start\n};\nfunction isHexDigit(ch) {\n  return (\n    (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) ||\n    (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) ||\n    (ch >= 0x61 /* a */ && ch <= 0x66 /* f */)\n  )\n}\nfunction hexToInt(ch) {\n  if (ch >= 0x41 /* A */ && ch <= 0x46 /* F */) {\n    return 10 + (ch - 0x41 /* A */)\n  }\n  if (ch >= 0x61 /* a */ && ch <= 0x66 /* f */) {\n    return 10 + (ch - 0x61 /* a */)\n  }\n  return ch - 0x30 /* 0 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-annexB-LegacyOctalEscapeSequence\n// Allows only 0-377(octal) i.e. 0-255(decimal).\npp$9.regexp_eatLegacyOctalEscapeSequence = function(state) {\n  if (this.regexp_eatOctalDigit(state)) {\n    var n1 = state.lastIntValue;\n    if (this.regexp_eatOctalDigit(state)) {\n      var n2 = state.lastIntValue;\n      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {\n        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;\n      } else {\n        state.lastIntValue = n1 * 8 + n2;\n      }\n    } else {\n      state.lastIntValue = n1;\n    }\n    return true\n  }\n  return false\n};\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-OctalDigit\npp$9.regexp_eatOctalDigit = function(state) {\n  var ch = state.current();\n  if (isOctalDigit(ch)) {\n    state.lastIntValue = ch - 0x30; /* 0 */\n    state.advance();\n    return true\n  }\n  state.lastIntValue = 0;\n  return false\n};\nfunction isOctalDigit(ch) {\n  return ch >= 0x30 /* 0 */ && ch <= 0x37 /* 7 */\n}\n\n// https://www.ecma-international.org/ecma-262/8.0/#prod-Hex4Digits\n// https://www.ecma-international.org/ecma-262/8.0/#prod-HexDigit\n// And HexDigit HexDigit in https://www.ecma-international.org/ecma-262/8.0/#prod-HexEscapeSequence\npp$9.regexp_eatFixedHexDigits = function(state, length) {\n  var start = state.pos;\n  state.lastIntValue = 0;\n  for (var i = 0; i < length; ++i) {\n    var ch = state.current();\n    if (!isHexDigit(ch)) {\n      state.pos = start;\n      return false\n    }\n    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);\n    state.advance();\n  }\n  return true\n};\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nvar Token = function Token(p) {\n  this.type = p.type;\n  this.value = p.value;\n  this.start = p.start;\n  this.end = p.end;\n  if (p.options.locations)\n    { this.loc = new SourceLocation(p, p.startLoc, p.endLoc); }\n  if (p.options.ranges)\n    { this.range = [p.start, p.end]; }\n};\n\n// ## Tokenizer\n\nvar pp$8 = Parser.prototype;\n\n// Move to the next token\n\npp$8.next = function() {\n  if (this.options.onToken)\n    { this.options.onToken(new Token(this)); }\n\n  this.lastTokEnd = this.end;\n  this.lastTokStart = this.start;\n  this.lastTokEndLoc = this.endLoc;\n  this.lastTokStartLoc = this.startLoc;\n  this.nextToken();\n};\n\npp$8.getToken = function() {\n  this.next();\n  return new Token(this)\n};\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  { pp$8[Symbol.iterator] = function() {\n    var this$1 = this;\n\n    return {\n      next: function () {\n        var token = this$1.getToken();\n        return {\n          done: token.type === types.eof,\n          value: token\n        }\n      }\n    }\n  }; }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp$8.curContext = function() {\n  return this.context[this.context.length - 1]\n};\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp$8.nextToken = function() {\n  var curContext = this.curContext();\n  if (!curContext || !curContext.preserveSpace) { this.skipSpace(); }\n\n  this.start = this.pos;\n  if (this.options.locations) { this.startLoc = this.curPosition(); }\n  if (this.pos >= this.input.length) { return this.finishToken(types.eof) }\n\n  if (curContext.override) { return curContext.override(this) }\n  else { this.readToken(this.fullCharCodeAtPos()); }\n};\n\npp$8.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    { return this.readWord() }\n\n  return this.getTokenFromCode(code)\n};\n\npp$8.fullCharCodeAtPos = function() {\n  var code = this.input.charCodeAt(this.pos);\n  if (code <= 0xd7ff || code >= 0xe000) { return code }\n  var next = this.input.charCodeAt(this.pos + 1);\n  return (code << 10) + next - 0x35fdc00\n};\n\npp$8.skipBlockComment = function() {\n  var this$1 = this;\n\n  var startLoc = this.options.onComment && this.curPosition();\n  var start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2);\n  if (end === -1) { this.raise(this.pos - 2, \"Unterminated comment\"); }\n  this.pos = end + 2;\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start;\n    var match;\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this$1.curLine;\n      this$1.lineStart = match.index + match[0].length;\n    }\n  }\n  if (this.options.onComment)\n    { this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\npp$8.skipLineComment = function(startSkip) {\n  var this$1 = this;\n\n  var start = this.pos;\n  var startLoc = this.options.onComment && this.curPosition();\n  var ch = this.input.charCodeAt(this.pos += startSkip);\n  while (this.pos < this.input.length && !isNewLine(ch)) {\n    ch = this$1.input.charCodeAt(++this$1.pos);\n  }\n  if (this.options.onComment)\n    { this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition()); }\n};\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp$8.skipSpace = function() {\n  var this$1 = this;\n\n  loop: while (this.pos < this.input.length) {\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this$1.pos;\n      break\n    case 13:\n      if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {\n        ++this$1.pos;\n      }\n    case 10: case 8232: case 8233:\n      ++this$1.pos;\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      break\n    case 47: // '/'\n      switch (this$1.input.charCodeAt(this$1.pos + 1)) {\n      case 42: // '*'\n        this$1.skipBlockComment();\n        break\n      case 47:\n        this$1.skipLineComment(2);\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this$1.pos;\n      } else {\n        break loop\n      }\n    }\n  }\n};\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp$8.finishToken = function(type, val) {\n  this.end = this.pos;\n  if (this.options.locations) { this.endLoc = this.curPosition(); }\n  var prevType = this.type;\n  this.type = type;\n  this.value = val;\n\n  this.updateContext(prevType);\n};\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp$8.readToken_dot = function() {\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next >= 48 && next <= 57) { return this.readNumber(true) }\n  var next2 = this.input.charCodeAt(this.pos + 2);\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3;\n    return this.finishToken(types.ellipsis)\n  } else {\n    ++this.pos;\n    return this.finishToken(types.dot)\n  }\n};\n\npp$8.readToken_slash = function() { // '/'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.slash, 1)\n};\n\npp$8.readToken_mult_modulo_exp = function(code) { // '%*'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  var tokentype = code === 42 ? types.star : types.modulo;\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {\n    ++size;\n    tokentype = types.starstar;\n    next = this.input.charCodeAt(this.pos + 2);\n  }\n\n  if (next === 61) { return this.finishOp(types.assign, size + 1) }\n  return this.finishOp(tokentype, size)\n};\n\npp$8.readToken_pipe_amp = function(code) { // '|&'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) { return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2) }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1)\n};\n\npp$8.readToken_caret = function() { // '^'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.bitwiseXOR, 1)\n};\n\npp$8.readToken_plus_min = function(code) { // '+-'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === code) {\n    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 &&\n        (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {\n      // A `-->` line comment\n      this.skipLineComment(3);\n      this.skipSpace();\n      return this.nextToken()\n    }\n    return this.finishOp(types.incDec, 2)\n  }\n  if (next === 61) { return this.finishOp(types.assign, 2) }\n  return this.finishOp(types.plusMin, 1)\n};\n\npp$8.readToken_lt_gt = function(code) { // '<>'\n  var next = this.input.charCodeAt(this.pos + 1);\n  var size = 1;\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;\n    if (this.input.charCodeAt(this.pos + size) === 61) { return this.finishOp(types.assign, size + 1) }\n    return this.finishOp(types.bitShift, size)\n  }\n  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 &&\n      this.input.charCodeAt(this.pos + 3) === 45) {\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4);\n    this.skipSpace();\n    return this.nextToken()\n  }\n  if (next === 61) { size = 2; }\n  return this.finishOp(types.relational, size)\n};\n\npp$8.readToken_eq_excl = function(code) { // '=!'\n  var next = this.input.charCodeAt(this.pos + 1);\n  if (next === 61) { return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2) }\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2;\n    return this.finishToken(types.arrow)\n  }\n  return this.finishOp(code === 61 ? types.eq : types.prefix, 1)\n};\n\npp$8.getTokenFromCode = function(code) {\n  switch (code) {\n  // The interpretation of a dot depends on whether it is followed\n  // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n  // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(types.parenL)\n  case 41: ++this.pos; return this.finishToken(types.parenR)\n  case 59: ++this.pos; return this.finishToken(types.semi)\n  case 44: ++this.pos; return this.finishToken(types.comma)\n  case 91: ++this.pos; return this.finishToken(types.bracketL)\n  case 93: ++this.pos; return this.finishToken(types.bracketR)\n  case 123: ++this.pos; return this.finishToken(types.braceL)\n  case 125: ++this.pos; return this.finishToken(types.braceR)\n  case 58: ++this.pos; return this.finishToken(types.colon)\n  case 63: ++this.pos; return this.finishToken(types.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) { break }\n    ++this.pos;\n    return this.finishToken(types.backQuote)\n\n  case 48: // '0'\n    var next = this.input.charCodeAt(this.pos + 1);\n    if (next === 120 || next === 88) { return this.readRadixNumber(16) } // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) { return this.readRadixNumber(8) } // '0o', '0O' - octal number\n      if (next === 98 || next === 66) { return this.readRadixNumber(2) } // '0b', '0B' - binary number\n    }\n\n  // Anything else beginning with a digit is an integer, octal\n  // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n  // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n  // Operators are parsed inline in tiny state machines. '=' (61) is\n  // often referred to. `finishOp` simply skips the amount of\n  // characters it is given as second argument, and returns a token\n  // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(types.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\");\n};\n\npp$8.finishOp = function(type, size) {\n  var str = this.input.slice(this.pos, this.pos + size);\n  this.pos += size;\n  return this.finishToken(type, str)\n};\n\npp$8.readRegexp = function() {\n  var this$1 = this;\n\n  var escaped, inClass, start = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(start, \"Unterminated regular expression\"); }\n    var ch = this$1.input.charAt(this$1.pos);\n    if (lineBreak.test(ch)) { this$1.raise(start, \"Unterminated regular expression\"); }\n    if (!escaped) {\n      if (ch === \"[\") { inClass = true; }\n      else if (ch === \"]\" && inClass) { inClass = false; }\n      else if (ch === \"/\" && !inClass) { break }\n      escaped = ch === \"\\\\\";\n    } else { escaped = false; }\n    ++this$1.pos;\n  }\n  var pattern = this.input.slice(start, this.pos);\n  ++this.pos;\n  var flagsStart = this.pos;\n  var flags = this.readWord1();\n  if (this.containsEsc) { this.unexpected(flagsStart); }\n\n  // Validate pattern\n  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));\n  state.reset(start, pattern, flags);\n  this.validateRegExpFlags(state);\n  this.validateRegExpPattern(state);\n\n  // Create Literal#value property value.\n  var value = null;\n  try {\n    value = new RegExp(pattern, flags);\n  } catch (e) {\n    // ESTree requires null if it failed to instantiate RegExp object.\n    // https://github.com/estree/estree/blob/a27003adf4fd7bfad44de9cef372a2eacd527b1c/es5.md#regexpliteral\n  }\n\n  return this.finishToken(types.regexp, {pattern: pattern, flags: flags, value: value})\n};\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp$8.readInt = function(radix, len) {\n  var this$1 = this;\n\n  var start = this.pos, total = 0;\n  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    var code = this$1.input.charCodeAt(this$1.pos), val = (void 0);\n    if (code >= 97) { val = code - 97 + 10; } // a\n    else if (code >= 65) { val = code - 65 + 10; } // A\n    else if (code >= 48 && code <= 57) { val = code - 48; } // 0-9\n    else { val = Infinity; }\n    if (val >= radix) { break }\n    ++this$1.pos;\n    total = total * radix + val;\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) { return null }\n\n  return total\n};\n\npp$8.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  var val = this.readInt(radix);\n  if (val == null) { this.raise(this.start + 2, \"Expected number in radix \" + radix); }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n  return this.finishToken(types.num, val)\n};\n\n// Read an integer, octal integer, or floating-point number.\n\npp$8.readNumber = function(startsWithDot) {\n  var start = this.pos;\n  if (!startsWithDot && this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n  if (octal && this.strict) { this.raise(start, \"Invalid number\"); }\n  if (octal && /[89]/.test(this.input.slice(start, this.pos))) { octal = false; }\n  var next = this.input.charCodeAt(this.pos);\n  if (next === 46 && !octal) { // '.'\n    ++this.pos;\n    this.readInt(10);\n    next = this.input.charCodeAt(this.pos);\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos);\n    if (next === 43 || next === 45) { ++this.pos; } // '+-'\n    if (this.readInt(10) === null) { this.raise(start, \"Invalid number\"); }\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) { this.raise(this.pos, \"Identifier directly after number\"); }\n\n  var str = this.input.slice(start, this.pos);\n  var val = octal ? parseInt(str, 8) : parseFloat(str);\n  return this.finishToken(types.num, val)\n};\n\n// Read a string value, interpreting backslash-escapes.\n\npp$8.readCodePoint = function() {\n  var ch = this.input.charCodeAt(this.pos), code;\n\n  if (ch === 123) { // '{'\n    if (this.options.ecmaVersion < 6) { this.unexpected(); }\n    var codePos = ++this.pos;\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos);\n    ++this.pos;\n    if (code > 0x10FFFF) { this.invalidStringToken(codePos, \"Code point out of bounds\"); }\n  } else {\n    code = this.readHexChar(4);\n  }\n  return code\n};\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) { return String.fromCharCode(code) }\n  code -= 0x10000;\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp$8.readString = function(quote) {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = ++this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === quote) { break }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(false);\n      chunkStart = this$1.pos;\n    } else {\n      if (isNewLine(ch, this$1.options.ecmaVersion >= 10)) { this$1.raise(this$1.start, \"Unterminated string constant\"); }\n      ++this$1.pos;\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++);\n  return this.finishToken(types.string, out)\n};\n\n// Reads template string tokens.\n\nvar INVALID_TEMPLATE_ESCAPE_ERROR = {};\n\npp$8.tryReadTemplateToken = function() {\n  this.inTemplateElement = true;\n  try {\n    this.readTmplToken();\n  } catch (err) {\n    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {\n      this.readInvalidTemplateToken();\n    } else {\n      throw err\n    }\n  }\n\n  this.inTemplateElement = false;\n};\n\npp$8.invalidStringToken = function(position, message) {\n  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {\n    throw INVALID_TEMPLATE_ESCAPE_ERROR\n  } else {\n    this.raise(position, message);\n  }\n};\n\npp$8.readTmplToken = function() {\n  var this$1 = this;\n\n  var out = \"\", chunkStart = this.pos;\n  for (;;) {\n    if (this$1.pos >= this$1.input.length) { this$1.raise(this$1.start, \"Unterminated template\"); }\n    var ch = this$1.input.charCodeAt(this$1.pos);\n    if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'\n      if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {\n        if (ch === 36) {\n          this$1.pos += 2;\n          return this$1.finishToken(types.dollarBraceL)\n        } else {\n          ++this$1.pos;\n          return this$1.finishToken(types.backQuote)\n        }\n      }\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      return this$1.finishToken(types.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      out += this$1.readEscapedChar(true);\n      chunkStart = this$1.pos;\n    } else if (isNewLine(ch)) {\n      out += this$1.input.slice(chunkStart, this$1.pos);\n      ++this$1.pos;\n      switch (ch) {\n      case 13:\n        if (this$1.input.charCodeAt(this$1.pos) === 10) { ++this$1.pos; }\n      case 10:\n        out += \"\\n\";\n        break\n      default:\n        out += String.fromCharCode(ch);\n        break\n      }\n      if (this$1.options.locations) {\n        ++this$1.curLine;\n        this$1.lineStart = this$1.pos;\n      }\n      chunkStart = this$1.pos;\n    } else {\n      ++this$1.pos;\n    }\n  }\n};\n\n// Reads a template token to search for the end, without validating any escape sequences\npp$8.readInvalidTemplateToken = function() {\n  var this$1 = this;\n\n  for (; this.pos < this.input.length; this.pos++) {\n    switch (this$1.input[this$1.pos]) {\n    case \"\\\\\":\n      ++this$1.pos;\n      break\n\n    case \"$\":\n      if (this$1.input[this$1.pos + 1] !== \"{\") {\n        break\n      }\n    // falls through\n\n    case \"`\":\n      return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos))\n\n    // no default\n    }\n  }\n  this.raise(this.start, \"Unterminated template\");\n};\n\n// Used to read escaped characters\n\npp$8.readEscapedChar = function(inTemplate) {\n  var ch = this.input.charCodeAt(++this.pos);\n  ++this.pos;\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) { ++this.pos; } // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine; }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];\n      var octal = parseInt(octalStr, 8);\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1);\n        octal = parseInt(octalStr, 8);\n      }\n      this.pos += octalStr.length - 1;\n      ch = this.input.charCodeAt(this.pos);\n      if ((octalStr !== \"0\" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {\n        this.invalidStringToken(\n          this.pos - 1 - octalStr.length,\n          inTemplate\n            ? \"Octal literal in template string\"\n            : \"Octal literal in strict mode\"\n        );\n      }\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n};\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp$8.readHexChar = function(len) {\n  var codePos = this.pos;\n  var n = this.readInt(16, len);\n  if (n === null) { this.invalidStringToken(codePos, \"Bad character escape sequence\"); }\n  return n\n};\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp$8.readWord1 = function() {\n  var this$1 = this;\n\n  this.containsEsc = false;\n  var word = \"\", first = true, chunkStart = this.pos;\n  var astral = this.options.ecmaVersion >= 6;\n  while (this.pos < this.input.length) {\n    var ch = this$1.fullCharCodeAtPos();\n    if (isIdentifierChar(ch, astral)) {\n      this$1.pos += ch <= 0xffff ? 1 : 2;\n    } else if (ch === 92) { // \"\\\"\n      this$1.containsEsc = true;\n      word += this$1.input.slice(chunkStart, this$1.pos);\n      var escStart = this$1.pos;\n      if (this$1.input.charCodeAt(++this$1.pos) !== 117) // \"u\"\n        { this$1.invalidStringToken(this$1.pos, \"Expecting Unicode escape sequence \\\\uXXXX\"); }\n      ++this$1.pos;\n      var esc = this$1.readCodePoint();\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        { this$1.invalidStringToken(escStart, \"Invalid Unicode escape\"); }\n      word += codePointToString(esc);\n      chunkStart = this$1.pos;\n    } else {\n      break\n    }\n    first = false;\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n};\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp$8.readWord = function() {\n  var word = this.readWord1();\n  var type = types.name;\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) { this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word); }\n    type = keywords$1[word];\n  }\n  return this.finishToken(type, word)\n};\n\n// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/acornjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/acornjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nvar version = \"5.7.3\";\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nfunction parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nfunction parseExpressionAt(input, pos, options) {\n  var p = new Parser(options, input, pos);\n  p.nextToken();\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nfunction tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nvar parse_dammit;\nvar LooseParser;\nvar pluginsLoose; // eslint-disable-line camelcase\nfunction addLooseExports(parse, Parser$$1, plugins$$1) {\n  parse_dammit = parse; // eslint-disable-line camelcase\n  LooseParser = Parser$$1;\n  pluginsLoose = plugins$$1;\n}\n\n\n\n\n//# sourceURL=webpack:///./node_modules/acorn/dist/acorn.es.js?");

/***/ }),

/***/ "./node_modules/gl/browser_index.js":
/*!******************************************!*\
  !*** ./node_modules/gl/browser_index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction createContext (width, height, options) {\n  width = width | 0\n  height = height | 0\n  if (!(width > 0 && height > 0)) {\n    return null\n  }\n\n  var canvas = document.createElement('canvas')\n  if (!canvas) {\n    return null\n  }\n  var gl\n  canvas.width = width\n  canvas.height = height\n\n  try {\n    gl = canvas.getContext('webgl', options)\n  } catch (e) {\n    try {\n      gl = canvas.getContext('experimental-webgl', options)\n    } catch (e) {\n      return null\n    }\n  }\n\n  var _getExtension = gl.getExtension\n  var extDestroy = {\n    destroy: function () {\n      var loseContext = _getExtension.call(gl, 'WEBGL_lose_context')\n      if (loseContext) {\n        loseContext.loseContext()\n      }\n    }\n  }\n\n  var extResize = {\n    resize: function (w, h) {\n      canvas.width = w\n      canvas.height = h\n    }\n  }\n\n  var _supportedExtensions = gl.getSupportedExtensions().slice()\n  _supportedExtensions.push(\n    'STACKGL_destroy_context',\n    'STACKGL_resize_drawingbuffer')\n  gl.getSupportedExtensions = function () {\n    return _supportedExtensions.slice()\n  }\n\n  gl.getExtension = function (extName) {\n    var name = extName.toLowerCase()\n    if (name === 'stackgl_resize_drawingbuffer') {\n      return extResize\n    }\n    if (name === 'stackgl_destroy_context') {\n      return extDestroy\n    }\n    return _getExtension.call(gl, extName)\n  }\n\n  return gl || null\n}\n\nmodule.exports = createContext\n\n\n//# sourceURL=webpack:///./node_modules/gl/browser_index.js?");

/***/ }),

/***/ "./node_modules/gpu-mock.js/index.js":
/*!*******************************************!*\
  !*** ./node_modules/gpu-mock.js/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction mock1D() {\n  const row = [];\n  for (let x = 0; x < this.output.x; x++) {\n    this.thread.x = x;\n    this.thread.y = 0;\n    this.thread.z = 0;\n    row.push(this._fn.apply(this, arguments));\n  }\n  return row;\n}\n\nfunction mock2D() {\n  const matrix = [];\n  for (let y = 0; y < this.output.y; y++) {\n    const row = [];\n    for (let x = 0; x < this.output.x; x++) {\n      this.thread.x = x;\n      this.thread.y = y;\n      this.thread.z = 0;\n      row.push(this._fn.apply(this, arguments));\n    }\n    matrix.push(row);\n  }\n  return matrix;\n}\n\nfunction mock3D() {\n  const cube = [];\n  for (let z = 0; z < this.output.z; z++) {\n    const matrix = [];\n    for (let y = 0; y < this.output.y; y++) {\n      const row = [];\n      for (let x = 0; x < this.output.x; x++) {\n        this.thread.x = x;\n        this.thread.y = y;\n        this.thread.z = z;\n        row.push(this._fn.apply(this, arguments));\n      }\n      matrix.push(row);\n    }\n    cube.push(matrix);\n  }\n  return cube;\n}\n\nmodule.exports = function gpuMock(fn, options) {\n  let contextOutput = null;\n  if (options.output.length) {\n    if (options.output.length === 3) {\n      contextOutput = { x: options.output[0], y: options.output[1], z: options.output[2] };\n    } else if (options.output.length === 2) {\n      contextOutput = { x: options.output[0], y: options.output[1] };\n    } else {\n      contextOutput = { x: options.output[0] };\n    }\n  } else {\n    contextOutput = options.output;\n  }\n\n  const context = {\n    _fn: fn,\n    constants: options.constants,\n    output: contextOutput,\n    thread: {\n      x: 0,\n      y: 0,\n      z: 0\n    }\n  };\n\n  if (contextOutput.z) {\n    return mock3D.bind(context);\n  } else if (contextOutput.y) {\n    return mock2D.bind(context);\n  } else {\n    return mock1D.bind(context);\n  }\n};\n\n\n//# sourceURL=webpack:///./node_modules/gpu-mock.js/index.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/alias.js":
/*!******************************************!*\
  !*** ./node_modules/gpu.js/src/alias.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tutils\n} = __webpack_require__(/*! ./utils */ \"./node_modules/gpu.js/src/utils.js\");\n\n/**\n *\n * @param name\n * @param source\n * @returns {Function}\n */\nfunction alias(name, source) {\n\tconst fnString = source.toString();\n\treturn new Function(`return function ${ name } (${ utils.getArgumentNamesFromString(fnString).join(', ') }) {\n  ${ utils.getFunctionBodyFromString(fnString) }\n}`)();\n}\n\nmodule.exports = {\n\talias\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/alias.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/cpu/function-node.js":
/*!**************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/cpu/function-node.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tFunctionNode\n} = __webpack_require__(/*! ../function-node */ \"./node_modules/gpu.js/src/backend/function-node.js\");\n\n/**\n * @desc [INTERNAL] Represents a single function, inside JS\n *\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n */\nclass CPUFunctionNode extends FunctionNode {\n\t/**\n\t * @desc Parses the abstract syntax tree for to its *named function*\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastFunctionExpression(ast, retArr) {\n\n\t\t// Setup function return type and name\n\t\tif (!this.isRootKernel) {\n\t\t\tretArr.push('function');\n\t\t\tretArr.push(' ');\n\t\t\tretArr.push(this.name);\n\t\t\tretArr.push('(');\n\n\t\t\t// Arguments handling\n\t\t\tfor (let i = 0; i < this.argumentNames.length; ++i) {\n\t\t\t\tconst argumentName = this.argumentNames[i];\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tretArr.push('user_');\n\t\t\t\tretArr.push(argumentName);\n\t\t\t}\n\n\t\t\t// Function opening\n\t\t\tretArr.push(') {\\n');\n\t\t}\n\n\t\t// Body statement iteration\n\t\tfor (let i = 0; i < ast.body.body.length; ++i) {\n\t\t\tthis.astGeneric(ast.body.body[i], retArr);\n\t\t\tretArr.push('\\n');\n\t\t}\n\n\t\tif (!this.isRootKernel) {\n\t\t\t// Function closing\n\t\t\tretArr.push('}\\n');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for to *return* statement\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastReturnStatement(ast, retArr) {\n\t\tif (this.isRootKernel) {\n\t\t\tretArr.push(this.leadingReturnStatement);\n\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\tretArr.push(';\\n');\n\t\t\tretArr.push(this.followingReturnStatement);\n\t\t\tretArr.push('continue;\\n');\n\t\t} else if (this.isSubKernel) {\n\t\t\tretArr.push(`subKernelResult_${ this.name } = `);\n\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\tretArr.push(';');\n\t\t\tretArr.push(`return subKernelResult_${ this.name };`);\n\t\t} else {\n\t\t\tretArr.push('return ');\n\t\t\tthis.astGeneric(ast.argument, retArr);\n\t\t\tretArr.push(';');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *literal value*\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastLiteral(ast, retArr) {\n\n\t\t// Reject non numeric literals\n\t\tif (isNaN(ast.value)) {\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'Non-numeric literal not supported : ' + ast.value,\n\t\t\t\tast\n\t\t\t);\n\t\t}\n\n\t\tretArr.push(ast.value);\n\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *binary* expression\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastBinaryExpression(ast, retArr) {\n\t\tretArr.push('(');\n\t\tthis.astGeneric(ast.left, retArr);\n\t\tretArr.push(ast.operator);\n\t\tthis.astGeneric(ast.right, retArr);\n\t\tretArr.push(')');\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *identifier* expression\n\t * @param {Object} idtNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastIdentifierExpression(idtNode, retArr) {\n\t\tif (idtNode.type !== 'Identifier') {\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'IdentifierExpression - not an Identifier',\n\t\t\t\tidtNode\n\t\t\t);\n\t\t}\n\n\t\tswitch (idtNode.name) {\n\t\t\tcase 'Infinity':\n\t\t\t\tretArr.push('Infinity');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.constants && this.constants.hasOwnProperty(idtNode.name)) {\n\t\t\t\t\tretArr.push('constants_' + idtNode.name);\n\t\t\t\t} else {\n\t\t\t\t\tconst name = this.getKernelArgumentName(idtNode.name);\n\t\t\t\t\tif (name) {\n\t\t\t\t\t\tretArr.push('user_' + name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArr.push('user_' + idtNode.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *for-loop* expression\n\t * @param {Object} forNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed webgl string\n\t */\n\tastForStatement(forNode, retArr) {\n\t\tif (forNode.type !== 'ForStatement') {\n\t\t\tthrow this.astErrorOutput('Invalid for statement', forNode);\n\t\t}\n\n\t\tconst initArr = [];\n\t\tconst testArr = [];\n\t\tconst updateArr = [];\n\t\tconst bodyArr = [];\n\t\tlet isSafe = null;\n\n\t\tif (forNode.init) {\n\t\t\tthis.pushState('in-for-loop-init');\n\t\t\tthis.astGeneric(forNode.init, initArr);\n\t\t\tfor (let i = 0; i < initArr.length; i++) {\n\t\t\t\tif (initArr[i].includes && initArr[i].includes(',')) {\n\t\t\t\t\tisSafe = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.popState('in-for-loop-init');\n\t\t} else {\n\t\t\tisSafe = false;\n\t\t}\n\n\t\tif (forNode.test) {\n\t\t\tthis.astGeneric(forNode.test, testArr);\n\t\t} else {\n\t\t\tisSafe = false;\n\t\t}\n\n\t\tif (forNode.update) {\n\t\t\tthis.astGeneric(forNode.update, updateArr);\n\t\t} else {\n\t\t\tisSafe = false;\n\t\t}\n\n\t\tif (forNode.body) {\n\t\t\tthis.pushState('loop-body');\n\t\t\tthis.astGeneric(forNode.body, bodyArr);\n\t\t\tthis.popState('loop-body');\n\t\t}\n\n\t\t// have all parts, now make them safe\n\t\tif (isSafe === null) {\n\t\t\tisSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n\t\t}\n\n\t\tif (isSafe) {\n\t\t\tretArr.push(`for (${initArr.join('')};${testArr.join('')};${updateArr.join('')}){\\n`);\n\t\t\tretArr.push(bodyArr.join(''));\n\t\t\tretArr.push('}\\n');\n\t\t} else {\n\t\t\tconst iVariableName = this.getInternalVariableName('safeI');\n\t\t\tif (initArr.length > 0) {\n\t\t\t\tretArr.push(initArr.join(''), ';\\n');\n\t\t\t}\n\t\t\tretArr.push(`for (let ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n\t\t\tif (testArr.length > 0) {\n\t\t\t\tretArr.push(`if (!${testArr.join('')}) break;\\n`);\n\t\t\t}\n\t\t\tretArr.push(bodyArr.join(''));\n\t\t\tretArr.push(`\\n${updateArr.join('')};`);\n\t\t\tretArr.push('}\\n');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *while* loop\n\t * @param {Object} whileNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed javascript string\n\t */\n\tastWhileStatement(whileNode, retArr) {\n\t\tif (whileNode.type !== 'WhileStatement') {\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'Invalid while statement',\n\t\t\t\twhileNode\n\t\t\t);\n\t\t}\n\n\t\tretArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n\t\tretArr.push('if (');\n\t\tthis.astGeneric(whileNode.test, retArr);\n\t\tretArr.push(') {\\n');\n\t\tthis.astGeneric(whileNode.body, retArr);\n\t\tretArr.push('} else {\\n');\n\t\tretArr.push('break;\\n');\n\t\tretArr.push('}\\n');\n\t\tretArr.push('}\\n');\n\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *do while* loop\n\t * @param {Object} doWhileNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed webgl string\n\t */\n\tastDoWhileStatement(doWhileNode, retArr) {\n\t\tif (doWhileNode.type !== 'DoWhileStatement') {\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'Invalid while statement',\n\t\t\t\tdoWhileNode\n\t\t\t);\n\t\t}\n\n\t\tretArr.push('for (let i = 0; i < LOOP_MAX; i++) {');\n\t\tthis.astGeneric(doWhileNode.body, retArr);\n\t\tretArr.push('if (!');\n\t\tthis.astGeneric(doWhileNode.test, retArr);\n\t\tretArr.push(') {\\n');\n\t\tretArr.push('break;\\n');\n\t\tretArr.push('}\\n');\n\t\tretArr.push('}\\n');\n\n\t\treturn retArr;\n\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Assignment* Expression\n\t * @param {Object} assNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastAssignmentExpression(assNode, retArr) {\n\t\tthis.astGeneric(assNode.left, retArr);\n\t\tretArr.push(assNode.operator);\n\t\tthis.astGeneric(assNode.right, retArr);\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Block* statement\n\t * @param {Object} bNode - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastBlockStatement(bNode, retArr) {\n\t\tif (this.isState('loop-body')) {\n\t\t\tthis.pushState('block-body'); // this prevents recursive removal of braces\n\t\t\tfor (let i = 0; i < bNode.body.length; i++) {\n\t\t\t\tthis.astGeneric(bNode.body[i], retArr);\n\t\t\t}\n\t\t\tthis.popState('block-body');\n\t\t} else {\n\t\t\tretArr.push('{\\n');\n\t\t\tfor (let i = 0; i < bNode.body.length; i++) {\n\t\t\t\tthis.astGeneric(bNode.body[i], retArr);\n\t\t\t}\n\t\t\tretArr.push('}\\n');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Variable Declaration*\n\t * @param {Object} varDecNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastVariableDeclaration(varDecNode, retArr) {\n\t\tif (varDecNode.kind === 'var') {\n\t\t\tthis.varWarn();\n\t\t}\n\t\tretArr.push(`${varDecNode.kind} `);\n\t\tconst firstDeclaration = varDecNode.declarations[0];\n\t\tconst type = this.getType(firstDeclaration.init);\n\t\tfor (let i = 0; i < varDecNode.declarations.length; i++) {\n\t\t\tthis.declarations[varDecNode.declarations[i].id.name] = {\n\t\t\t\ttype: type === 'LiteralInteger' ? 'Number' : type,\n\t\t\t\tdependencies: {\n\t\t\t\t\tconstants: [],\n\t\t\t\t\targuments: []\n\t\t\t\t},\n\t\t\t\tisUnsafe: false\n\t\t\t};\n\t\t\tif (i > 0) {\n\t\t\t\tretArr.push(',');\n\t\t\t}\n\t\t\tthis.astGeneric(varDecNode.declarations[i], retArr);\n\t\t}\n\t\tif (!this.isState('in-for-loop-init')) {\n\t\t\tretArr.push(';');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *If* Statement\n\t * @param {Object} ifNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastIfStatement(ifNode, retArr) {\n\t\tretArr.push('if (');\n\t\tthis.astGeneric(ifNode.test, retArr);\n\t\tretArr.push(')');\n\t\tif (ifNode.consequent.type === 'BlockStatement') {\n\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t} else {\n\t\t\tretArr.push(' {\\n');\n\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t\tretArr.push('\\n}\\n');\n\t\t}\n\n\t\tif (ifNode.alternate) {\n\t\t\tretArr.push('else ');\n\t\t\tif (ifNode.alternate.type === 'BlockStatement') {\n\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t} else {\n\t\t\t\tretArr.push(' {\\n');\n\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t\tretArr.push('\\n}\\n');\n\t\t\t}\n\t\t}\n\t\treturn retArr;\n\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *This* expression\n\t * @param {Object} tNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastThisExpression(tNode, retArr) {\n\t\tretArr.push('_this');\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Member* Expression\n\t * @param {Object} mNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastMemberExpression(mNode, retArr) {\n\t\tconst {\n\t\t\tsignature,\n\t\t\ttype,\n\t\t\tproperty,\n\t\t\txProperty,\n\t\t\tyProperty,\n\t\t\tzProperty,\n\t\t\tname,\n\t\t\torigin\n\t\t} = this.getMemberExpressionDetails(mNode);\n\t\tswitch (signature) {\n\t\t\tcase 'this.thread.value':\n\t\t\t\tretArr.push(`_this.thread.${ name }`);\n\t\t\t\treturn retArr;\n\t\t\tcase 'this.output.value':\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'x':\n\t\t\t\t\t\tretArr.push(this.output[0]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'y':\n\t\t\t\t\t\tretArr.push(this.output[1]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'z':\n\t\t\t\t\t\tretArr.push(this.output[2]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', mNode);\n\t\t\t\t}\n\t\t\t\treturn retArr;\n\t\t\tcase 'value':\n\t\t\t\tthrow this.astErrorOutput('Unexpected expression', mNode);\n\t\t\tcase 'value[]':\n\t\t\tcase 'value[][]':\n\t\t\tcase 'value[][][]':\n\t\t\tcase 'value.value':\n\t\t\t\tif (origin === 'Math') {\n\t\t\t\t\tretArr.push(Math[name]);\n\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t\tswitch (property) {\n\t\t\t\t\tcase 'r':\n\t\t\t\t\t\tretArr.push(`user_${ name }[0]`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t\tcase 'g':\n\t\t\t\t\t\tretArr.push(`user_${ name }[1]`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tretArr.push(`user_${ name }[2]`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tretArr.push(`user_${ name }[3]`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'this.constants.value':\n\t\t\tcase 'this.constants.value[]':\n\t\t\tcase 'this.constants.value[][]':\n\t\t\tcase 'this.constants.value[][][]':\n\t\t\t\tbreak;\n\t\t\tcase 'fn()[]':\n\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\tretArr.push('[');\n\t\t\t\tthis.astGeneric(mNode.property, retArr);\n\t\t\t\tretArr.push(']');\n\t\t\t\treturn retArr;\n\t\t\tdefault:\n\t\t\t\tthrow this.astErrorOutput('Unexpected expression', mNode);\n\t\t}\n\n\t\t// handle simple types\n\t\tswitch (type) {\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\tcase 'Boolean':\n\t\t\t\tretArr.push(`${ origin }_${ name}`);\n\t\t\t\treturn retArr;\n\t\t}\n\n\t\t// handle more complex types\n\t\t// argument may have come from a parent\n\t\tconst synonymName = this.getKernelArgumentName(name);\n\t\tconst markupName = `${origin}_${synonymName || name}`;\n\n\t\tswitch (type) {\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\tcase 'HTMLImageArray':\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\tcase 'HTMLImage':\n\t\t\tdefault:\n\t\t\t\tconst isInput = this.isInput(synonymName || name);\n\t\t\t\tretArr.push(`${ markupName }`);\n\t\t\t\tif (zProperty && yProperty) {\n\t\t\t\t\tif (isInput) {\n\t\t\t\t\t\tconst size = this.argumentSizes[this.argumentNames.indexOf(name)];\n\t\t\t\t\t\tretArr.push('[(');\n\t\t\t\t\t\tthis.astGeneric(zProperty, retArr);\n\t\t\t\t\t\tretArr.push(`*${ size[1] * size[0]})+(`);\n\t\t\t\t\t\tthis.astGeneric(yProperty, retArr);\n\t\t\t\t\t\tretArr.push(`*${ size[0] })+`);\n\t\t\t\t\t\tthis.astGeneric(xProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArr.push('[');\n\t\t\t\t\t\tthis.astGeneric(zProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t\tretArr.push('[');\n\t\t\t\t\t\tthis.astGeneric(yProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t\tretArr.push('[');\n\t\t\t\t\t\tthis.astGeneric(xProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t}\n\t\t\t\t} else if (yProperty) {\n\t\t\t\t\tif (isInput) {\n\t\t\t\t\t\tconst size = this.argumentSizes[this.argumentNames.indexOf(name)];\n\t\t\t\t\t\tretArr.push('[(');\n\t\t\t\t\t\tthis.astGeneric(yProperty, retArr);\n\t\t\t\t\t\tretArr.push(`*${ size[0] })+`);\n\t\t\t\t\t\tthis.astGeneric(xProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArr.push('[');\n\t\t\t\t\t\tthis.astGeneric(yProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t\tretArr.push('[');\n\t\t\t\t\t\tthis.astGeneric(xProperty, retArr);\n\t\t\t\t\t\tretArr.push(']');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tretArr.push('[');\n\t\t\t\t\tthis.astGeneric(xProperty, retArr);\n\t\t\t\t\tretArr.push(']');\n\t\t\t\t}\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *call* expression\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns  {Array} the append retArr\n\t */\n\tastCallExpression(ast, retArr) {\n\t\tif (ast.callee) {\n\t\t\t// Get the full function call, unrolled\n\t\t\tlet funcName = this.astMemberExpressionUnroll(ast.callee);\n\n\t\t\t// Register the function into the called registry\n\t\t\tif (this.calledFunctions.indexOf(funcName) < 0) {\n\t\t\t\tthis.calledFunctions.push(funcName);\n\t\t\t}\n\t\t\tif (!this.calledFunctionsArguments[funcName]) {\n\t\t\t\tthis.calledFunctionsArguments[funcName] = [];\n\t\t\t}\n\n\t\t\tconst functionArguments = [];\n\t\t\tthis.calledFunctionsArguments[funcName].push(functionArguments);\n\n\t\t\t// Call the function\n\t\t\tretArr.push(funcName);\n\n\t\t\t// Open arguments space\n\t\t\tretArr.push('(');\n\n\t\t\t// Add the vars\n\t\t\tfor (let i = 0; i < ast.arguments.length; ++i) {\n\t\t\t\tconst argument = ast.arguments[i];\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\tconst argumentType = this.getType(argument);\n\t\t\t\tif (argumentType) {\n\t\t\t\t\tfunctionArguments.push({\n\t\t\t\t\t\tname: argument.name || null,\n\t\t\t\t\t\ttype: argumentType\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tfunctionArguments.push(null);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Close arguments space\n\t\t\tretArr.push(')');\n\n\t\t\treturn retArr;\n\t\t}\n\n\t\t// Failure, unknown expression\n\t\tthrow this.astErrorOutput(\n\t\t\t'Unknown CallExpression',\n\t\t\tast\n\t\t);\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Array* Expression\n\t * @param {Object} arrNode - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastArrayExpression(arrNode, retArr) {\n\t\tconst arrLen = arrNode.elements.length;\n\n\t\tretArr.push('[');\n\t\tfor (let i = 0; i < arrLen; ++i) {\n\t\t\tif (i > 0) {\n\t\t\t\tretArr.push(', ');\n\t\t\t}\n\t\t\tconst subNode = arrNode.elements[i];\n\t\t\tthis.astGeneric(subNode, retArr)\n\t\t}\n\t\tretArr.push(']');\n\n\t\treturn retArr;\n\t}\n\n\tastDebuggerStatement(arrNode, retArr) {\n\t\tretArr.push('debugger;');\n\t\treturn retArr;\n\t}\n}\n\nmodule.exports = {\n\tCPUFunctionNode\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/cpu/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/cpu/kernel-string.js":
/*!**************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/cpu/kernel-string.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tutils\n} = __webpack_require__(/*! ../../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tkernelRunShortcut\n} = __webpack_require__(/*! ../../kernel-run-shortcut */ \"./node_modules/gpu.js/src/kernel-run-shortcut.js\");\n\nfunction removeFnNoise(fn) {\n\tif (/^function /.test(fn)) {\n\t\tfn = fn.substring(9);\n\t}\n\treturn fn.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction removeNoise(str) {\n\treturn str\n\t\t.replace(/^[A-Za-z]+/, 'function')\n\t\t.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction cpuKernelString(cpuKernel, name) {\n\treturn `() => {\n    ${ kernelRunShortcut.toString() };\n    const utils = {\n      allPropertiesOf: ${ removeNoise(utils.allPropertiesOf.toString()) },\n      clone: ${ removeNoise(utils.clone.toString()) },\n    };\n    let Input = function() {};\n    class ${ name || 'Kernel' } {\n      constructor() {        \n        this.argumentsLength = 0;\n        this.canvas = null;\n        this.context = null;\n        this.built = false;\n        this.program = null;\n        this.argumentNames = ${ JSON.stringify(cpuKernel.argumentNames) };\n        this.argumentTypes = ${ JSON.stringify(cpuKernel.argumentTypes) };\n        this.argumentSizes = ${ JSON.stringify(cpuKernel.argumentSizes) };\n        this.output = ${ JSON.stringify(cpuKernel.output) };\n        this._kernelString = \\`${ cpuKernel._kernelString }\\`;\n        this.output = ${ JSON.stringify(cpuKernel.output) };\n\t\t    this.run = function() {\n          this.run = null;\n          this.build(arguments);\n          return this.run.apply(this, arguments);\n        }.bind(this);\n        this.thread = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      }\n      setCanvas(canvas) { this.canvas = canvas; return this; }\n      setContext(context) { this.context = context; return this; }\n      setInput(Type) { Input = Type; }\n      ${ removeFnNoise(cpuKernel.build.toString()) }\n      setupArguments() {}\n      ${ removeFnNoise(cpuKernel.setupConstants.toString()) }\n      translateSource() {}\n      pickRenderStrategy() {}\n      run () { ${ cpuKernel.kernelString } }\n      getKernelString() { return this._kernelString; }\n      ${ removeFnNoise(cpuKernel.validateSettings.toString()) }\n      ${ removeFnNoise(cpuKernel.checkOutput.toString()) }\n    };\n    return kernelRunShortcut(new Kernel());\n  };`;\n}\n\nmodule.exports = {\n\tcpuKernelString\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/cpu/kernel-string.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/cpu/kernel.js":
/*!*******************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/cpu/kernel.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tKernel\n} = __webpack_require__(/*! ../kernel */ \"./node_modules/gpu.js/src/backend/kernel.js\");\nconst {\n\tFunctionBuilder\n} = __webpack_require__(/*! ../function-builder */ \"./node_modules/gpu.js/src/backend/function-builder.js\");\nconst {\n\tCPUFunctionNode\n} = __webpack_require__(/*! ./function-node */ \"./node_modules/gpu.js/src/backend/cpu/function-node.js\");\nconst {\n\tutils\n} = __webpack_require__(/*! ../../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tcpuKernelString\n} = __webpack_require__(/*! ./kernel-string */ \"./node_modules/gpu.js/src/backend/cpu/kernel-string.js\");\n\n/**\n * @desc Kernel Implementation for CPU.\n * <p>Instantiates properties to the CPU Kernel.</p>\n */\nclass CPUKernel extends Kernel {\n\tstatic getFeatures() {\n\t\treturn this.features;\n\t}\n\tstatic get features() {\n\t\treturn Object.freeze({\n\t\t\tkernelMap: true,\n\t\t\tisIntegerDivisionAccurate: true\n\t\t});\n\t}\n\tstatic get isSupported() {\n\t\treturn true;\n\t}\n\tstatic isContextMatch(context) {\n\t\treturn false;\n\t}\n\t/**\n\t * @desc The current mode in which gpu.js is executing.\n\t */\n\tstatic get mode() {\n\t\treturn 'cpu';\n\t}\n\n\tstatic nativeFunctionArguments() {\n\t\treturn null;\n\t}\n\n\tstatic nativeFunctionReturnType() {\n\t\treturn null;\n\t}\n\n\tstatic combineKernels(combinedKernel) {\n\t\treturn combinedKernel;\n\t}\n\n\tconstructor(source, settings) {\n\t\tsuper(source, settings);\n\t\tthis.mergeSettings(source.settings || settings);\n\n\t\tthis._imageData = null;\n\t\tthis._colorData = null;\n\t\tthis._kernelString = null;\n\t\tthis.thread = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tz: 0\n\t\t};\n\t\tthis.translatedSources = null;\n\t\tthis.run = function() { //note: need arguments\n\t\t\tthis.run = null;\n\t\t\tthis.build.apply(this, arguments);\n\t\t\treturn this.run.apply(this, arguments);\n\t\t}.bind(this);\n\t}\n\n\tinitCanvas() {\n\t\tif (typeof document !== 'undefined') {\n\t\t\treturn document.createElement('canvas');\n\t\t} else if (typeof OffscreenCanvas !== 'undefined') {\n\t\t\treturn new OffscreenCanvas(0, 0);\n\t\t}\n\t}\n\n\tinitContext() {\n\t\tif (!this.canvas) return null;\n\t\treturn this.canvas.getContext('2d');\n\t}\n\n\tinitPlugins(settings) {\n\t\treturn [];\n\t}\n\n\t/**\n\t * @desc Validate settings related to CPU Kernel, such as\n\t * dimensions size, and auto dimension support.\n\t */\n\tvalidateSettings() {\n\t\tif (!this.output || this.output.length === 0) {\n\t\t\tif (arguments.length !== 1) {\n\t\t\t\tthrow 'Auto dimensions only supported for kernels with only one input';\n\t\t\t}\n\n\t\t\tconst argType = utils.getVariableType(arguments[0]);\n\t\t\tif (argType === 'Array') {\n\t\t\t\tthis.output = utils.getDimensions(argType);\n\t\t\t} else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n\t\t\t\tthis.output = arguments[0].output;\n\t\t\t} else {\n\t\t\t\tthrow 'Auto dimensions not supported for input type: ' + argType;\n\t\t\t}\n\t\t}\n\n\t\tif (this.graphical) {\n\t\t\tif (this.output.length !== 2) {\n\t\t\t\tthrow new Error('Output must have 2 dimensions on graphical mode');\n\t\t\t}\n\t\t}\n\n\t\tthis.checkOutput();\n\t}\n\n\ttranslateSource() {\n\t\tthis.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';\n\t\tif (this.subKernels) {\n\t\t\tconst followingReturnStatement = []\n\t\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\t\tconst {\n\t\t\t\t\tname\n\t\t\t\t} = this.subKernels[i];\n\t\t\t\tfollowingReturnStatement.push(this.output.length > 1 ? `resultX_${ name }[x] = subKernelResult_${ name };\\n` : `result_${ name }[x] = subKernelResult_${ name };\\n`);\n\t\t\t}\n\t\t\tthis.followingReturnStatement = followingReturnStatement.join('');\n\t\t}\n\t\tconst functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);\n\t\tthis.translatedSources = functionBuilder.getPrototypes('kernel');\n\t\tif (!this.graphical && !this.returnType) {\n\t\t\tthis.returnType = functionBuilder.getKernelResultType();\n\t\t}\n\t}\n\n\t/**\n\t * @desc Builds the Kernel, by generating the kernel\n\t * string using thread dimensions, and arguments\n\t * supplied to the kernel.\n\t *\n\t * <p>If the graphical flag is enabled, canvas is used.</p>\n\t */\n\tbuild() {\n\t\tthis.setupConstants();\n\t\tthis.setupArguments(arguments);\n\t\tthis.validateSettings();\n\t\tthis.translateSource();\n\n\t\tif (this.graphical) {\n\t\t\tconst {\n\t\t\t\tcanvas,\n\t\t\t\toutput\n\t\t\t} = this;\n\t\t\tif (!canvas) {\n\t\t\t\tthrow new Error('no canvas available for using graphical output');\n\t\t\t}\n\t\t\tconst width = output[0];\n\t\t\tconst height = output[1] || 1;\n\t\t\tcanvas.width = width;\n\t\t\tcanvas.height = height;\n\t\t\tthis._imageData = this.context.createImageData(width, height);\n\t\t\tthis._colorData = new Uint8ClampedArray(width * height * 4);\n\t\t}\n\n\t\tconst kernelString = this.getKernelString();\n\t\tthis.kernelString = kernelString;\n\n\t\tif (this.debug) {\n\t\t\tconsole.log('Function output:');\n\t\t\tconsole.log(kernelString);\n\t\t}\n\n\t\ttry {\n\t\t\tthis.run = new Function([], kernelString).bind(this)();\n\t\t} catch (e) {\n\t\t\tconsole.error('An error occurred compiling the javascript: ', e);\n\t\t}\n\t}\n\n\tcolor(r, g, b, a) {\n\t\tif (typeof a === 'undefined') {\n\t\t\ta = 1;\n\t\t}\n\n\t\tr = Math.floor(r * 255);\n\t\tg = Math.floor(g * 255);\n\t\tb = Math.floor(b * 255);\n\t\ta = Math.floor(a * 255);\n\n\t\tconst width = this.output[0];\n\t\tconst height = this.output[1];\n\n\t\tconst x = this.thread.x;\n\t\tconst y = height - this.thread.y - 1;\n\n\t\tconst index = x + y * width;\n\n\t\tthis._colorData[index * 4 + 0] = r;\n\t\tthis._colorData[index * 4 + 1] = g;\n\t\tthis._colorData[index * 4 + 2] = b;\n\t\tthis._colorData[index * 4 + 3] = a;\n\t}\n\n\t/**\n\t * @desc Generates kernel string for this kernel program.\n\t *\n\t * <p>If sub-kernels are supplied, they are also factored in.\n\t * This string can be saved by calling the `toString` method\n\t * and then can be reused later.</p>\n\t *\n\t * @returns {String} result\n\t *\n\t */\n\tgetKernelString() {\n\t\tif (this._kernelString !== null) return this._kernelString;\n\n\t\tlet kernelThreadString = null;\n\t\tlet {\n\t\t\ttranslatedSources\n\t\t} = this;\n\t\tif (translatedSources.length > 1) {\n\t\t\ttranslatedSources = translatedSources.filter(fn => {\n\t\t\t\tif (/^function/.test(fn)) return fn;\n\t\t\t\tkernelThreadString = fn;\n\t\t\t\treturn false;\n\t\t\t})\n\t\t} else {\n\t\t\tkernelThreadString = translatedSources.shift();\n\t\t}\n\t\tconst kernelString = this._kernelString = `  const LOOP_MAX = ${ this._getLoopMaxString() }\n  const constants = this.constants;\n  const _this = this;\n  return (${ this.argumentNames.map(argumentName => 'user_' + argumentName).join(', ') }) => {\n    ${ this._processConstants() }\n    ${ this._processArguments() }\n    ${ this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString) }\n    ${ translatedSources.length > 0 ? translatedSources.join('\\n') : '' }\n  };`;\n\t\treturn kernelString;\n\t}\n\n\t/**\n\t * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n\t */\n\ttoString() {\n\t\treturn cpuKernelString(this);\n\t}\n\n\t/**\n\t * @desc Get the maximum loop size String.\n\t * @returns {String} result\n\t */\n\t_getLoopMaxString() {\n\t\treturn (\n\t\t\tthis.loopMaxIterations ?\n\t\t\t` ${ parseInt(this.loopMaxIterations) };` :\n\t\t\t' 1000;'\n\t\t);\n\t}\n\n\t_processConstants() {\n\t\tif (!this.constants) return '';\n\n\t\tconst result = [];\n\t\tfor (let p in this.constants) {\n\t\t\tconst type = this.constantTypes[p];\n\t\t\tswitch (type) {\n\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\tresult.push(`    const constants_${p} = this._imageTo2DArray(this.constants.${p});\\n`);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\tresult.push(`    const constants_${p} = this._imageTo3DArray(this.constants.${p});\\n`);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Input':\n\t\t\t\t\tresult.push(`    const constants_${p} = this.constants.${p}.value;\\n`);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tresult.push(`    const constants_${p} = this.constants.${p};\\n`);\n\t\t\t}\n\t\t}\n\t\treturn result.join('');\n\t}\n\n\t_processArguments() {\n\t\tconst result = [];\n\t\tfor (let i = 0; i < this.argumentTypes.length; i++) {\n\t\t\tswitch (this.argumentTypes[i]) {\n\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\tresult.push(`    user_${this.argumentNames[i]} = this._imageTo2DArray(user_${this.argumentNames[i]});\\n`);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\tresult.push(`    user_${this.argumentNames[i]} = this._imageTo3DArray(user_${this.argumentNames[i]});\\n`);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Input':\n\t\t\t\t\tresult.push(`    user_${this.argumentNames[i]} = user_${this.argumentNames[i]}.value;\\n`);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn result.join('');\n\t}\n\n\t_imageTo2DArray(image) {\n\t\tconst canvas = this.canvas;\n\t\tif (canvas.width < image.width) {\n\t\t\tcanvas.width = image.width;\n\t\t}\n\t\tif (canvas.height < image.height) {\n\t\t\tcanvas.height = image.height;\n\t\t}\n\t\tconst ctx = this.context;\n\t\tctx.drawImage(image, 0, 0, image.width, image.height);\n\t\tconst pixelsData = ctx.getImageData(0, 0, image.width, image.height).data;\n\t\tconst imageArray = new Array(image.height);\n\t\tlet index = 0;\n\t\tfor (let y = image.height - 1; y >= 0; y--) {\n\t\t\tconst row = imageArray[y] = new Array(image.width);\n\t\t\tfor (let x = 0; x < image.width; x++) {\n\t\t\t\tconst pixel = new Float32Array(4);\n\t\t\t\tpixel[0] = pixelsData[index++] / 255; // r\n\t\t\t\tpixel[1] = pixelsData[index++] / 255; // g\n\t\t\t\tpixel[2] = pixelsData[index++] / 255; // b\n\t\t\t\tpixel[3] = pixelsData[index++] / 255; // a\n\t\t\t\trow[x] = pixel;\n\t\t\t}\n\t\t}\n\t\treturn imageArray;\n\t}\n\n\tgetPixels() {\n\t\t// https://stackoverflow.com/a/41973289/1324039\n\t\tconst [width, height] = this.output;\n\t\tconst halfHeight = height / 2 | 0; // the | 0 keeps the result an int\n\t\tconst bytesPerRow = width * 4;\n\t\t// make a temp buffer to hold one row\n\t\tconst temp = new Uint8Array(width * 4);\n\t\tconst pixels = this._imageData.data.slice(0);\n\t\tfor (let y = 0; y < halfHeight; ++y) {\n\t\t\tvar topOffset = y * bytesPerRow;\n\t\t\tvar bottomOffset = (height - y - 1) * bytesPerRow;\n\n\t\t\t// make copy of a row on the top half\n\t\t\ttemp.set(pixels.subarray(topOffset, topOffset + bytesPerRow));\n\n\t\t\t// copy a row from the bottom half to the top\n\t\t\tpixels.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n\n\t\t\t// copy the copy of the top half row to the bottom half\n\t\t\tpixels.set(temp, bottomOffset);\n\t\t}\n\t\treturn pixels;\n\t}\n\n\t_imageTo3DArray(images) {\n\t\tconst imagesArray = new Array(images.length);\n\t\tfor (let i = 0; i < images.length; i++) {\n\t\t\timagesArray[i] = this._imageTo2DArray(images[i]);\n\t\t}\n\t\treturn imagesArray;\n\t}\n\n\t_resultKernelBody(kernelString) {\n\t\tswitch (this.output.length) {\n\t\t\tcase 1:\n\t\t\t\treturn this._resultKernel1DLoop(kernelString) + this._kernelOutput();\n\t\t\tcase 2:\n\t\t\t\treturn this._resultKernel2DLoop(kernelString) + this._kernelOutput();\n\t\t\tcase 3:\n\t\t\t\treturn this._resultKernel3DLoop(kernelString) + this._kernelOutput();\n\t\t\tdefault:\n\t\t\t\tthrow new Error('unsupported size kernel');\n\t\t}\n\t}\n\n\t_graphicalKernelBody(kernelThreadString) {\n\t\tswitch (this.output.length) {\n\t\t\tcase 2:\n\t\t\t\treturn this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();\n\t\t\tdefault:\n\t\t\t\tthrow new Error('unsupported size kernel');\n\t\t}\n\t}\n\n\t_graphicalOutput() {\n\t\treturn `\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;`\n\t}\n\n\t_getKernelResultTypeConstructorString() {\n\t\tswitch (this.returnType) {\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\t\treturn 'Float32Array';\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\t\treturn 'Array';\n\t\t\tdefault:\n\t\t\t\tif (this.graphical) {\n\t\t\t\t\treturn 'Float32Array';\n\t\t\t\t}\n\t\t\t\tthrow new Error(`unhandled returnType ${ this.returnType }`);\n\t\t}\n\t}\n\n\t_resultKernel1DLoop(kernelString) {\n\t\tconst {\n\t\t\toutput\n\t\t} = this;\n\t\tconst constructorString = this._getKernelResultTypeConstructorString();\n\t\treturn `const result = new ${constructorString}(${ output[0] });\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new ${constructorString}(${ output[0] });\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let x = 0; x < ${ output[0] }; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ${ kernelString }\n    }`;\n\t}\n\n\t_resultKernel2DLoop(kernelString) {\n\t\tconst {\n\t\t\toutput\n\t\t} = this;\n\t\tconst constructorString = this._getKernelResultTypeConstructorString();\n\t\treturn `const result = new Array(${ output[1] });\n\t\t${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(${ output[1] });\\n`).join('    ') }\n\t\t${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let y = 0; y < ${ output[1] }; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ${constructorString}(${ output[0] });\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(${ output[0] });\\n`).join('') }\n      for (let x = 0; x < ${ output[0] }; x++) {\n      \tthis.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n\t}\n\n\t_graphicalKernel2DLoop(kernelString) {\n\t\tconst {\n\t\t\toutput\n\t\t} = this;\n\t\tconst constructorString = this._getKernelResultTypeConstructorString();\n\t\treturn `  ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(${ output[1] });\\n`).join('    ') }\n\t\t${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let y = 0; y < ${ output[1] }; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = result_${subKernel.name}[y] = new ${constructorString}(${ output[0] });\\n`).join('') }\n      for (let x = 0; x < ${ output[0] }; x++) {\n      \tthis.thread.x = x;\n        ${ kernelString }\n      }\n    }`;\n\t}\n\n\t_resultKernel3DLoop(kernelString) {\n\t\tconst {\n\t\t\toutput\n\t\t} = this;\n\t\tconst constructorString = this._getKernelResultTypeConstructorString();\n\t\treturn `const result = new Array(${ output[2] });\n    ${ this._mapSubKernels(subKernel => `const result_${ subKernel.name } = new Array(${ output[2] });\\n`).join('    ') }\n    ${ this._mapSubKernels(subKernel => `let subKernelResult_${ subKernel.name };\\n`).join('    ') }\n    for (let z = 0; z < ${ output[2] }; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(${ output[1] });\n      ${ this._mapSubKernels(subKernel => `const resultY_${ subKernel.name } = result_${subKernel.name}[z] = new Array(${ output[1] });\\n`).join('      ') }\n      for (let y = 0; y < ${ output[1] }; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ${constructorString}(${ output[0] });\n        ${ this._mapSubKernels(subKernel => `const resultX_${ subKernel.name } = resultY_${subKernel.name}[y] = new ${constructorString}(${ output[0] });\\n`).join('        ') }\n        for (let x = 0; x < ${ output[0] }; x++) {\n        \tthis.thread.x = x;\n          ${ kernelString }\n        }\n      }\n    }`;\n\t}\n\n\t_kernelOutput() {\n\t\tif (!this.subKernels) {\n\t\t\treturn '\\n    return result;';\n\t\t}\n\t\treturn `\\n    return {\n      result: result,\n      ${ this.subKernels.map(subKernel => `${ subKernel.property }: result_${ subKernel.name }`).join(',\\n      ') }\n    };`;\n\t}\n\n\t_mapSubKernels(fn) {\n\t\treturn this.subKernels === null ? [''] :\n\t\t\tthis.subKernels.map(fn);\n\t}\n\n\n\n\tdestroy(removeCanvasReference) {\n\t\tif (removeCanvasReference) {\n\t\t\tdelete this.canvas;\n\t\t}\n\t}\n\n\tstatic destroyContext(context) {}\n\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\t\tjson.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();\n\t\treturn json;\n\t}\n}\n\nmodule.exports = {\n\tCPUKernel\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/cpu/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/function-builder.js":
/*!*************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/function-builder.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @desc This handles all the raw state, converted state, etc. of a single function.\n * [INTERNAL] A collection of functionNodes.\n */\nclass FunctionBuilder {\n\t/**\n\t *\n\t * @param {Kernel} kernel\n\t * @param {FunctionNode} FunctionNode\n\t * @param {object} [extraNodeOptions]\n\t * @returns FunctionBuilder\n\t */\n\tstatic fromKernel(kernel, FunctionNode, extraNodeOptions) {\n\t\tconst {\n\t\t\targumentNames,\n\t\t\targumentTypes,\n\t\t\targumentSizes,\n\t\t\targumentBitRatios,\n\t\t\tconstants,\n\t\t\tconstantTypes,\n\t\t\tconstantBitRatios,\n\t\t\tdebug,\n\t\t\tloopMaxIterations,\n\t\t\tnativeFunctions,\n\t\t\toutput,\n\t\t\toptimizeFloatMemory,\n\t\t\tprecision,\n\t\t\tplugins,\n\t\t\tsource,\n\t\t\tsubKernels,\n\t\t\tfunctions,\n\t\t\tleadingReturnStatement,\n\t\t\tfollowingReturnStatement,\n\t\t} = kernel;\n\n\t\tconst lookupReturnType = (functionName, ast, requestingNode) => {\n\t\t\treturn functionBuilder.lookupReturnType(functionName, ast, requestingNode);\n\t\t};\n\n\t\tconst lookupArgumentType = (argumentName, requestingNode) => {\n\t\t\treturn functionBuilder.lookupArgumentType(argumentName, requestingNode);\n\t\t};\n\n\t\tconst lookupFunctionArgumentTypes = (functionName) => {\n\t\t\treturn functionBuilder.lookupFunctionArgumentTypes(functionName);\n\t\t};\n\n\t\tconst lookupFunctionArgumentName = (functionName, argumentIndex) => {\n\t\t\treturn functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);\n\t\t};\n\n\t\tconst lookupFunctionArgumentBitRatio = (functionName, argumentName) => {\n\t\t\treturn functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);\n\t\t};\n\n\t\tconst triggerImplyArgumentType = (functionName, i, argumentType, requestingNode) => {\n\t\t\tfunctionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);\n\t\t};\n\n\t\tconst triggerTrackArgumentSynonym = (functionName, argumentName, calleeFunctionName, argumentIndex) => {\n\t\t\tfunctionBuilder.trackArgumentSynonym(functionName, argumentName, calleeFunctionName, argumentIndex);\n\t\t};\n\n\t\tconst lookupArgumentSynonym = (originFunctionName, functionName, argumentName) => {\n\t\t\treturn functionBuilder.lookupArgumentSynonym(originFunctionName, functionName, argumentName);\n\t\t};\n\n\t\tconst onFunctionCall = (functionName, calleeFunctionName) => {\n\t\t\tfunctionBuilder.trackFunctionCall(functionName, calleeFunctionName);\n\t\t};\n\n\t\tconst onNestedFunction = (fnString, returnType) => {\n\t\t\tfunctionBuilder.addFunctionNode(new FunctionNode(fnString, Object.assign({}, nodeOptions, {\n\t\t\t\treturnType: returnType || 'Number', // TODO: I think this needs removed\n\t\t\t\tlookupReturnType,\n\t\t\t\tlookupArgumentType,\n\t\t\t\tlookupFunctionArgumentTypes,\n\t\t\t\tlookupFunctionArgumentName,\n\t\t\t\tlookupFunctionArgumentBitRatio,\n\t\t\t\ttriggerImplyArgumentType,\n\t\t\t\ttriggerTrackArgumentSynonym,\n\t\t\t\tlookupArgumentSynonym,\n\t\t\t\tonFunctionCall\n\t\t\t})));\n\t\t};\n\n\t\tconst nodeOptions = Object.assign({\n\t\t\tisRootKernel: false,\n\t\t\tonNestedFunction,\n\t\t\tlookupReturnType,\n\t\t\tlookupArgumentType,\n\t\t\tlookupFunctionArgumentTypes,\n\t\t\tlookupFunctionArgumentName,\n\t\t\tlookupFunctionArgumentBitRatio,\n\t\t\ttriggerImplyArgumentType,\n\t\t\ttriggerTrackArgumentSynonym,\n\t\t\tlookupArgumentSynonym,\n\t\t\tonFunctionCall,\n\t\t\toptimizeFloatMemory,\n\t\t\tprecision,\n\t\t\tconstants,\n\t\t\tconstantTypes,\n\t\t\tconstantBitRatios,\n\t\t\tdebug,\n\t\t\tloopMaxIterations,\n\t\t\toutput,\n\t\t\tplugins,\n\t\t}, extraNodeOptions || {});\n\n\t\tconst rootNodeOptions = Object.assign({}, nodeOptions, {\n\t\t\tisRootKernel: true,\n\t\t\tname: 'kernel',\n\t\t\targumentNames,\n\t\t\targumentTypes,\n\t\t\targumentSizes,\n\t\t\targumentBitRatios,\n\t\t\tleadingReturnStatement,\n\t\t\tfollowingReturnStatement,\n\t\t});\n\n\t\tif (typeof source === 'object' && source.functionNodes) {\n\t\t\treturn new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);\n\t\t}\n\n\t\tconst rootNode = new FunctionNode(source, rootNodeOptions);\n\n\t\tlet functionNodes = null;\n\t\tif (functions) {\n\t\t\tfunctionNodes = functions.map((fn) => new FunctionNode(fn.source, {\n\t\t\t\treturnType: fn.returnType,\n\t\t\t\targumentTypes: fn.argumentTypes,\n\t\t\t\toutput,\n\t\t\t\tplugins,\n\t\t\t\tconstants,\n\t\t\t\tconstantTypes,\n\t\t\t\tconstantBitRatios,\n\t\t\t\toptimizeFloatMemory,\n\t\t\t\tprecision,\n\t\t\t\tlookupReturnType,\n\t\t\t\tlookupArgumentType,\n\t\t\t\tlookupFunctionArgumentTypes,\n\t\t\t\tlookupFunctionArgumentName,\n\t\t\t\tlookupFunctionArgumentBitRatio,\n\t\t\t\ttriggerImplyArgumentType,\n\t\t\t\ttriggerTrackArgumentSynonym,\n\t\t\t\tlookupArgumentSynonym,\n\t\t\t\tonFunctionCall,\n\t\t\t}));\n\t\t}\n\n\t\tlet subKernelNodes = null;\n\t\tif (subKernels) {\n\t\t\tsubKernelNodes = subKernels.map((subKernel) => {\n\t\t\t\tconst {\n\t\t\t\t\tname,\n\t\t\t\t\tsource\n\t\t\t\t} = subKernel;\n\t\t\t\treturn new FunctionNode(source, Object.assign({}, nodeOptions, {\n\t\t\t\t\tname,\n\t\t\t\t\tisSubKernel: true,\n\t\t\t\t\tisRootKernel: false,\n\t\t\t\t\treturnType: 'Number', // TODO: I think this needs removed\n\t\t\t\t}));\n\t\t\t});\n\t\t}\n\n\t\tconst functionBuilder = new FunctionBuilder({\n\t\t\tkernel,\n\t\t\trootNode,\n\t\t\tfunctionNodes,\n\t\t\tnativeFunctions,\n\t\t\tsubKernelNodes\n\t\t});\n\n\t\treturn functionBuilder;\n\t}\n\n\t/**\n\t *\n\t * @param {IFunctionBuilderSettings} [settings]\n\t */\n\tconstructor(settings) {\n\t\tsettings = settings || {};\n\t\tthis.kernel = settings.kernel;\n\t\tthis.rootNode = settings.rootNode;\n\t\tthis.functionNodes = settings.functionNodes || [];\n\t\tthis.subKernelNodes = settings.subKernelNodes || [];\n\t\tthis.nativeFunctions = settings.nativeFunctions || [];\n\t\tthis.functionMap = {};\n\t\tthis.nativeFunctionNames = [];\n\t\tthis.lookupChain = [];\n\t\tthis.argumentChain = [];\n\t\tthis.functionNodeDependencies = {};\n\n\t\tif (this.rootNode) {\n\t\t\tthis.functionMap['kernel'] = this.rootNode;\n\t\t}\n\n\t\tif (this.functionNodes) {\n\t\t\tfor (let i = 0; i < this.functionNodes.length; i++) {\n\t\t\t\tthis.functionMap[this.functionNodes[i].name] = this.functionNodes[i];\n\t\t\t}\n\t\t}\n\n\t\tif (this.subKernelNodes) {\n\t\t\tfor (let i = 0; i < this.subKernelNodes.length; i++) {\n\t\t\t\tthis.functionMap[this.subKernelNodes[i].name] = this.subKernelNodes[i];\n\t\t\t}\n\t\t}\n\n\t\tif (this.nativeFunctions) {\n\t\t\tfor (let i = 0; i < this.nativeFunctions.length; i++) {\n\t\t\t\tconst nativeFunction = this.nativeFunctions[i];\n\t\t\t\tthis.nativeFunctionNames.push(nativeFunction.name);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @desc Add the function node directly\n\t *\n\t * @param {FunctionNode} functionNode - functionNode to add\n\t *\n\t */\n\taddFunctionNode(functionNode) {\n\t\tthis.functionMap[functionNode.name] = functionNode;\n\t\tif (functionNode.isRootKernel) {\n\t\t\tthis.rootNode = functionNode;\n\t\t}\n\t}\n\n\t/**\n\t * @desc Trace all the depending functions being called, from a single function\n\t *\n\t * This allow for 'unneeded' functions to be automatically optimized out.\n\t * Note that the 0-index, is the starting function trace.\n\t *\n\t * @param {String} functionName - Function name to trace from, default to 'kernel'\n\t * @param {String[]} [retList] - Returning list of function names that is traced. Including itself.\n\t *\n\t * @returns {String[]}  Returning list of function names that is traced. Including itself.\n\t */\n\ttraceFunctionCalls(functionName, retList) {\n\t\tfunctionName = functionName || 'kernel';\n\t\tretList = retList || [];\n\n\t\tif (this.nativeFunctionNames.indexOf(functionName) > -1) {\n\t\t\tif (retList.indexOf(functionName) === -1) {\n\t\t\t\tretList.push(functionName);\n\t\t\t}\n\t\t\treturn retList;\n\t\t}\n\n\t\tconst functionNode = this.functionMap[functionName];\n\t\tif (functionNode) {\n\t\t\t// Check if function already exists\n\t\t\tconst functionIndex = retList.indexOf(functionName);\n\t\t\tif (functionIndex === -1) {\n\t\t\t\tretList.push(functionName);\n\t\t\t\tfunctionNode.toString(); //ensure JS trace is done\n\t\t\t\tfor (let i = 0; i < functionNode.calledFunctions.length; ++i) {\n\t\t\t\t\tthis.traceFunctionCalls(functionNode.calledFunctions[i], retList);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/**\n\t\t\t\t * https://github.com/gpujs/gpu.js/issues/207\n\t\t\t\t * if dependent function is already in the list, because a function depends on it, and because it has\n\t\t\t\t * already been traced, we know that we must move the dependent function to the end of the the retList.\n\t\t\t\t * */\n\t\t\t\tconst dependantFunctionName = retList.splice(functionIndex, 1)[0];\n\t\t\t\tretList.push(dependantFunctionName);\n\t\t\t}\n\t\t}\n\n\t\treturn retList;\n\t}\n\n\t/**\n\t * @desc Return the string for a function\n\t * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n\t * @returns {String} The full string, of all the various functions. Trace optimized if functionName given\n\t */\n\tgetPrototypeString(functionName) {\n\t\treturn this.getPrototypes(functionName).join('\\n');\n\t}\n\n\t/**\n\t * @desc Return the string for a function\n\t * @param {String} [functionName] - Function name to trace from. If null, it returns the WHOLE builder stack\n\t * @returns {Array} The full string, of all the various functions. Trace optimized if functionName given\n\t */\n\tgetPrototypes(functionName) {\n\t\tif (this.rootNode) {\n\t\t\tthis.rootNode.toString();\n\t\t}\n\t\tif (functionName) {\n\t\t\treturn this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());\n\t\t}\n\t\treturn this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));\n\t}\n\n\t/**\n\t * @desc Get string from function names\n\t * @param {String[]} functionList - List of function to build string\n\t * @returns {String} The string, of all the various functions. Trace optimized if functionName given\n\t */\n\tgetStringFromFunctionNames(functionList) {\n\t\tconst ret = [];\n\t\tfor (let i = 0; i < functionList.length; ++i) {\n\t\t\tconst node = this.functionMap[functionList[i]];\n\t\t\tif (node) {\n\t\t\t\tret.push(this.functionMap[functionList[i]].toString());\n\t\t\t}\n\t\t}\n\t\treturn ret.join('\\n');\n\t}\n\n\t/**\n\t * @desc Return string of all functions converted\n\t * @param {String[]} functionList - List of function names to build the string.\n\t * @returns {Array} Prototypes of all functions converted\n\t */\n\tgetPrototypesFromFunctionNames(functionList) {\n\t\tconst ret = [];\n\t\tfor (let i = 0; i < functionList.length; ++i) {\n\t\t\tconst functionName = functionList[i];\n\t\t\tconst functionIndex = this.nativeFunctionNames.indexOf(functionName);\n\t\t\tif (functionIndex > -1) {\n\t\t\t\tret.push(this.nativeFunctions[functionIndex].source);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst node = this.functionMap[functionName];\n\t\t\tif (node) {\n\t\t\t\tret.push(node.toString());\n\t\t\t}\n\t\t}\n\t\treturn ret;\n\t}\n\n\ttoJSON() {\n\t\treturn this.traceFunctionCalls(this.rootNode.name).reverse().map(name => {\n\t\t\tconst nativeIndex = this.nativeFunctions.indexOf(name);\n\t\t\tif (nativeIndex > -1) {\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\tsource: this.nativeFunctions[nativeIndex].source\n\t\t\t\t};\n\t\t\t} else if (this.functionMap[name]) {\n\t\t\t\treturn this.functionMap[name].toJSON();\n\t\t\t} else {\n\t\t\t\tthrow new Error(`function ${ name } not found`);\n\t\t\t}\n\t\t});\n\t}\n\n\tfromJSON(jsonFunctionNodes, FunctionNode) {\n\t\tthis.functionMap = {};\n\t\tfor (let i = 0; i < jsonFunctionNodes.length; i++) {\n\t\t\tconst jsonFunctionNode = jsonFunctionNodes[i];\n\t\t\tthis.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Get string for a particular function name\n\t * @param {String} functionName - Function name to trace from. If null, it returns the WHOLE builder stack\n\t * @returns {String} settings - The string, of all the various functions. Trace optimized if functionName given\n\t */\n\tgetString(functionName) {\n\t\tif (functionName) {\n\t\t\treturn this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());\n\t\t}\n\t\treturn this.getStringFromFunctionNames(Object.keys(this.functionMap));\n\t}\n\n\tlookupArgumentType(argumentName, requestingNode) {\n\t\tconst index = requestingNode.argumentNames.indexOf(argumentName);\n\t\tif (index === -1) return null;\n\t\tif (this.lookupChain.length === 0) return null;\n\t\tlet link = this.lookupChain[this.lookupChain.length - 1 - this.argumentChain.length];\n\t\tif (!link) return null;\n\t\tconst {\n\t\t\tast,\n\t\t\trequestingNode: parentRequestingNode\n\t\t} = link;\n\t\tif (ast.arguments.length === 0) return null;\n\t\tconst usedVariable = ast.arguments[index];\n\t\tif (!usedVariable) return null;\n\t\tthis.argumentChain.push(argumentName);\n\t\tconst type = parentRequestingNode.getType(usedVariable);\n\t\tthis.argumentChain.pop();\n\t\treturn type;\n\t}\n\n\tlookupReturnType(functionName, ast, requestingNode) {\n\t\t// TODO: track circlical logic\n\t\tif (ast.type !== 'CallExpression') {\n\t\t\tthrow new Error(`expected ast type of \"CallExpression\", but is ${ ast.type }`);\n\t\t}\n\t\tif (this._isNativeFunction(functionName)) {\n\t\t\treturn this._lookupNativeFunctionReturnType(functionName);\n\t\t} else if (this._isFunction(functionName)) {\n\t\t\tconst node = this._getFunction(functionName);\n\t\t\tif (node.returnType) {\n\t\t\t\treturn node.returnType;\n\t\t\t} else {\n\t\t\t\t// get ready for a ride!\n\t\t\t\tthis.lookupChain.push({\n\t\t\t\t\tname: requestingNode.name,\n\t\t\t\t\tast,\n\t\t\t\t\trequestingNode\n\t\t\t\t});\n\t\t\t\tconst type = node.getType(node.getJsAST());\n\t\t\t\tthis.lookupChain.pop();\n\t\t\t\treturn node.returnType = type;\n\t\t\t}\n\t\t}\n\n\t\t// function not found, maybe native?\n\t\treturn null;\n\t}\n\n\t_getFunction(functionName) {\n\t\tif (!this._isFunction(functionName)) {\n\t\t\tnew Error(`Function ${functionName} not found`);\n\t\t}\n\t\treturn this.functionMap[functionName];\n\t}\n\n\t_isFunction(functionName) {\n\t\treturn Boolean(this.functionMap[functionName]);\n\t}\n\n\t_getNativeFunction(functionName) {\n\t\tfor (let i = 0; i < this.nativeFunctions.length; i++) {\n\t\t\tif (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];\n\t\t}\n\t\treturn null;\n\t}\n\n\t_isNativeFunction(functionName) {\n\t\treturn Boolean(this._getNativeFunction(functionName));\n\t}\n\n\t_lookupNativeFunctionReturnType(functionName) {\n\t\tlet nativeFunction = this._getNativeFunction(functionName);\n\t\tif (nativeFunction) {\n\t\t\treturn nativeFunction.returnType;\n\t\t}\n\t\tthrow new Error(`Native function ${ functionName } not found`);\n\t}\n\n\tlookupFunctionArgumentTypes(functionName) {\n\t\tif (this._isNativeFunction(functionName)) {\n\t\t\treturn this._getNativeFunction(functionName).argumentTypes;\n\t\t} else if (this._isFunction(functionName)) {\n\t\t\treturn this._getFunction(functionName).argumentTypes;\n\t\t}\n\t\treturn null;\n\t}\n\n\tlookupFunctionArgumentName(functionName, argumentIndex) {\n\t\treturn this._getFunction(functionName).argumentNames[argumentIndex];\n\t}\n\n\tlookupFunctionArgumentBitRatio(functionName, argumentName) {\n\t\tif (!this._isFunction(functionName)) {\n\t\t\tthrow new Error('function not found');\n\t\t}\n\t\tif (this.rootNode.name === functionName) {\n\t\t\tconst i = this.rootNode.argumentNames.indexOf(argumentName);\n\t\t\tif (i !== -1) {\n\t\t\t\treturn this.rootNode.argumentBitRatios[i];\n\t\t\t} else {\n\t\t\t\tthrow new Error('argument bit ratio not found');\n\t\t\t}\n\t\t} else {\n\t\t\tconst node = this._getFunction(functionName);\n\t\t\tconst argumentSynonym = node.argumentSynonym[node.synonymIndex];\n\t\t\tif (!argumentSynonym) {\n\t\t\t\tthrow new Error('argument synonym not found');\n\t\t\t}\n\t\t\treturn this.lookupFunctionArgumentBitRatio(argumentSynonym.functionName, argumentSynonym.argumentName);\n\t\t}\n\t}\n\n\tassignArgumentType(functionName, i, argumentType, requestingNode) {\n\t\tif (!this._isFunction(functionName)) return;\n\t\tthis._getFunction(functionName).argumentTypes[i] = argumentType;\n\t}\n\n\ttrackArgumentSynonym(functionName, argumentName, calleeFunctionName, argumentIndex) {\n\t\tif (!this._isFunction(calleeFunctionName)) return;\n\t\tconst node = this._getFunction(calleeFunctionName);\n\t\tif (!node.argumentSynonym) {\n\t\t\tnode.argumentSynonym = {};\n\t\t}\n\t\tconst calleeArgumentName = node.argumentNames[argumentIndex];\n\t\tif (!node.argumentSynonym[calleeArgumentName]) {\n\t\t\tnode.argumentSynonym[calleeArgumentName] = {};\n\t\t}\n\t\tnode.synonymIndex++;\n\t\tnode.argumentSynonym[node.synonymIndex] = {\n\t\t\tfunctionName,\n\t\t\targumentName,\n\t\t\tcalleeArgumentName,\n\t\t\tcalleeFunctionName,\n\t\t};\n\t}\n\n\tlookupArgumentSynonym(originFunctionName, functionName, argumentName) {\n\t\tif (originFunctionName === functionName) return argumentName;\n\t\tif (!this._isFunction(functionName)) return null;\n\t\tconst node = this._getFunction(functionName);\n\t\tconst argumentSynonym = node.argumentSynonym[node.synonymUseIndex];\n\t\tif (!argumentSynonym) return null;\n\t\tif (argumentSynonym.calleeArgumentName !== argumentName) return null;\n\t\tnode.synonymUseIndex++;\n\t\tif (originFunctionName !== functionName) {\n\t\t\treturn this.lookupArgumentSynonym(originFunctionName, argumentSynonym.functionName, argumentSynonym.argumentName);\n\t\t}\n\t\treturn argumentSynonym.argumentName;\n\t}\n\n\ttrackFunctionCall(functionName, calleeFunctionName) {\n\t\tif (!this.functionNodeDependencies[functionName]) {\n\t\t\tthis.functionNodeDependencies[functionName] = new Set();\n\t\t}\n\t\tthis.functionNodeDependencies[functionName].add(calleeFunctionName);\n\t}\n\n\tgetKernelResultType() {\n\t\treturn this.rootNode.getType(this.rootNode.ast);\n\t}\n\n\tgetReturnTypes() {\n\t\tconst result = {\n\t\t\t[this.rootNode.name]: this.rootNode.getType(this.rootNode.ast),\n\t\t};\n\t\tconst list = this.traceFunctionCalls(this.rootNode.name);\n\t\tfor (let i = 0; i < list.length; i++) {\n\t\t\tconst functionName = list[i];\n\t\t\tconst functionNode = this.functionMap[functionName];\n\t\t\tresult[functionName] = functionNode.getType(functionNode.ast);\n\t\t}\n\t\treturn result;\n\t}\n}\n\nmodule.exports = {\n\tFunctionBuilder\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/function-builder.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/function-node.js":
/*!**********************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/function-node.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tutils\n} = __webpack_require__(/*! ../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst acorn = __webpack_require__(/*! acorn */ \"./node_modules/acorn/dist/acorn.es.js\");\n\n/**\n *\n * @desc Represents a single function, inside JS, webGL, or openGL.\n * <p>This handles all the raw state, converted state, etc. Of a single function.</p>\n */\nclass FunctionNode {\n\t/**\n\t *\n\t * @param {string|object} source\n\t * @param {IFunctionSettings} [settings]\n\t */\n\tconstructor(source, settings) {\n\t\tif (!source) {\n\t\t\tthrow new Error('source parameter is missing');\n\t\t}\n\t\tsettings = settings || {};\n\n\t\tthis.source = source;\n\t\tthis.name = typeof source === 'string' ? settings.isRootKernel ?\n\t\t\t'kernel' :\n\t\t\t(settings.name || utils.getFunctionNameFromString(source)) : null;\n\t\tthis.calledFunctions = [];\n\t\tthis.calledFunctionsArguments = {};\n\t\tthis.constants = {};\n\t\tthis.constantTypes = {};\n\t\tthis.constantBitRatios = {};\n\t\tthis.isRootKernel = false;\n\t\tthis.isSubKernel = false;\n\t\tthis.debug = null;\n\t\tthis.declarations = {};\n\t\tthis.states = [];\n\t\tthis.lookupReturnType = null;\n\t\tthis.lookupArgumentType = null;\n\t\tthis.lookupFunctionArgumentTypes = null;\n\t\tthis.lookupFunctionArgumentBitRatio = null;\n\t\tthis.triggerImplyArgumentType = null;\n\t\tthis.triggerTrackArgumentSynonym = null;\n\t\tthis.lookupArgumentSynonym = null;\n\t\tthis.onNestedFunction = null;\n\t\tthis.onFunctionCall = null;\n\t\tthis.optimizeFloatMemory = null;\n\t\tthis.precision = null;\n\t\tthis.loopMaxIterations = null;\n\t\tthis.argumentNames = (typeof this.source === 'string' ? utils.getArgumentNamesFromString(this.source) : null);\n\t\tthis.argumentTypes = [];\n\t\tthis.argumentSizes = [];\n\t\tthis.argumentBitRatios = null;\n\t\tthis.returnType = null;\n\t\tthis.output = [];\n\t\tthis.plugins = null;\n\t\tthis.leadingReturnStatement = null;\n\t\tthis.followingReturnStatement = null;\n\n\t\tif (settings) {\n\t\t\tfor (const p in settings) {\n\t\t\t\tif (!settings.hasOwnProperty(p)) continue;\n\t\t\t\tif (!this.hasOwnProperty(p)) continue;\n\t\t\t\tthis[p] = settings[p];\n\t\t\t}\n\t\t}\n\n\t\tthis.synonymIndex = -1;\n\t\tthis.synonymUseIndex = 0;\n\t\tthis.argumentSynonym = {};\n\t\tthis.literalTypes = {};\n\n\t\tif (this.isRootKernel && !this.returnType) {\n\t\t\tthis.returnType = 'Number';\n\t\t}\n\n\t\tthis.validate();\n\t\tthis._string = null;\n\t\tthis._internalVariableNames = {};\n\t}\n\n\tvalidate() {\n\t\tif (typeof this.source !== 'string') {\n\t\t\tthrow new Error('this.source not a string');\n\t\t}\n\n\t\tif (!utils.isFunctionString(this.source)) {\n\t\t\tthrow new Error('this.source not a function string');\n\t\t}\n\n\t\tif (!this.name) {\n\t\t\tthrow new Error('this.name could not be set');\n\t\t}\n\n\t\tif (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {\n\t\t\tthrow new Error(`argumentTypes count of ${ this.argumentTypes.length } exceeds ${ this.argumentNames.length }`);\n\t\t}\n\n\t\tif (this.output.length < 1) {\n\t\t\tthrow new Error('this.output is not big enough');\n\t\t}\n\t}\n\n\t/**\n\t * @param {String} name\n\t * @returns {boolean}\n\t */\n\tisIdentifierConstant(name) {\n\t\tif (!this.constants) return false;\n\t\treturn this.constants.hasOwnProperty(name);\n\t}\n\n\tisInput(argumentName) {\n\t\treturn this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';\n\t}\n\n\tpushState(state) {\n\t\tthis.states.push(state);\n\t}\n\n\tpopState(state) {\n\t\tif (this.state !== state) {\n\t\t\tthrow new Error(`Cannot popState ${ state } when in ${ this.state }`);\n\t\t}\n\t\tthis.states.pop();\n\t}\n\n\tisState(state) {\n\t\treturn this.state === state;\n\t}\n\n\tget state() {\n\t\treturn this.states[this.states.length - 1];\n\t}\n\n\t/**\n\t * @function\n\t * @name astMemberExpressionUnroll\n\t * @desc Parses the abstract syntax tree for binary expression.\n\t *\n\t * <p>Utility function for astCallExpression.</p>\n\t *\n\t * @param {Object} ast - the AST object to parse\n\t *\n\t * @returns {String} the function namespace call, unrolled\n\t */\n\tastMemberExpressionUnroll(ast) {\n\t\tif (ast.type === 'Identifier') {\n\t\t\treturn ast.name;\n\t\t} else if (ast.type === 'ThisExpression') {\n\t\t\treturn 'this';\n\t\t}\n\n\t\tif (ast.type === 'MemberExpression') {\n\t\t\tif (ast.object && ast.property) {\n\t\t\t\t//babel sniffing\n\t\t\t\tif (ast.object.hasOwnProperty('name') && ast.object.name[0] === '_') {\n\t\t\t\t\treturn this.astMemberExpressionUnroll(ast.property);\n\t\t\t\t}\n\n\t\t\t\treturn (\n\t\t\t\t\tthis.astMemberExpressionUnroll(ast.object) +\n\t\t\t\t\t'.' +\n\t\t\t\t\tthis.astMemberExpressionUnroll(ast.property)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t//babel sniffing\n\t\tif (ast.hasOwnProperty('expressions')) {\n\t\t\tconst firstExpression = ast.expressions[0];\n\t\t\tif (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {\n\t\t\t\treturn this.astMemberExpressionUnroll(ast.expressions[1]);\n\t\t\t}\n\t\t}\n\n\t\t// Failure, unknown expression\n\t\tthrow this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);\n\t}\n\n\t/**\n\t * @desc Parses the class function JS, and returns its Abstract Syntax Tree object.\n\t * This is used internally to convert to shader code\n\t *\n\t * @param {Object} [inParser] - Parser to use, assumes in scope 'parser' if null or undefined\n\t *\n\t * @returns {Object} The function AST Object, note that result is cached under this.ast;\n\t */\n\tgetJsAST(inParser) {\n\t\tif (typeof this.source === 'object') {\n\t\t\treturn this.ast = this.source;\n\t\t}\n\t\tif (this.ast) {\n\t\t\treturn this.ast;\n\t\t}\n\n\t\tinParser = inParser || acorn;\n\t\tif (inParser === null) {\n\t\t\tthrow 'Missing JS to AST parser';\n\t\t}\n\n\t\tconst ast = Object.freeze(inParser.parse(`const parser_${ this.name } = ${ this.source };`, {\n\t\t\tlocations: true\n\t\t}));\n\t\t// take out the function object, outside the var declarations\n\t\tconst functionAST = ast.body[0].declarations[0].init;\n\t\tif (!ast) {\n\t\t\tthrow new Error('Failed to parse JS code');\n\t\t}\n\n\t\treturn this.ast = functionAST;\n\t}\n\n\t/**\n\t * @desc Return the type of parameter sent to subKernel/Kernel.\n\t * @param {String} name - Name of the parameter\n\t * @returns {String} Type of the parameter\n\t */\n\tgetVariableType(name) {\n\t\tlet type = null;\n\t\tconst argumentIndex = this.argumentNames.indexOf(name);\n\t\tif (argumentIndex === -1) {\n\t\t\tif (this.declarations[name]) {\n\t\t\t\treturn this.declarations[name].type;\n\t\t\t}\n\t\t} else {\n\t\t\tconst argumentType = this.argumentTypes[argumentIndex];\n\t\t\tif (argumentType) {\n\t\t\t\ttype = argumentType;\n\t\t\t} else if (this.lookupArgumentType) {\n\t\t\t\ttype = this.argumentTypes[argumentIndex] = this.lookupArgumentType(name, this);\n\t\t\t}\n\t\t}\n\t\tif (!type) {\n\t\t\t// TODO: strict type detection mode?\n\t\t\t// throw new Error(`Declaration of ${name} not found`);\n\t\t}\n\t\treturn type;\n\t}\n\n\tgetConstantType(constantName) {\n\t\tif (this.constantTypes[constantName]) {\n\t\t\tconst type = this.constantTypes[constantName];\n\t\t\tif (type === 'Float') {\n\t\t\t\treturn 'Number';\n\t\t\t} else {\n\t\t\t\treturn type;\n\t\t\t}\n\t\t}\n\t\tthrow new Error(`Type for constant \"${ constantName }\" not declared`);\n\t}\n\n\t/**\n\t * @desc Return the name of the *user argument*(subKernel argument) corresponding\n\t * to the argument supplied to the kernel\n\t *\n\t * @param {String} name - Name of the argument\n\t * @returns {String} Name of the parameter\n\t */\n\tgetKernelArgumentName(name) {\n\t\tif (!this.lookupArgumentSynonym) return null;\n\t\tconst argumentIndex = this.argumentNames.indexOf(name);\n\t\tif (argumentIndex === -1) return null;\n\t\treturn this.lookupArgumentSynonym('kernel', this.name, name);\n\t}\n\n\ttoString() {\n\t\tif (this._string) return this._string;\n\t\treturn this._string = this.astGeneric(this.getJsAST(), []).join('').trim();\n\t}\n\n\ttoJSON() {\n\t\tconst settings = {\n\t\t\tsource: this.source,\n\t\t\tname: this.name,\n\t\t\tconstants: this.constants,\n\t\t\tconstantTypes: this.constantTypes,\n\t\t\tisRootKernel: this.isRootKernel,\n\t\t\tisSubKernel: this.isSubKernel,\n\t\t\tdebug: this.debug,\n\t\t\toutput: this.output,\n\t\t\tloopMaxIterations: this.loopMaxIterations,\n\t\t\targumentNames: this.argumentNames,\n\t\t\targumentTypes: this.argumentTypes,\n\t\t\targumentSizes: this.argumentSizes,\n\t\t\treturnType: this.returnType,\n\t\t\tleadingReturnStatement: this.leadingReturnStatement,\n\t\t\tfollowingReturnStatement: this.followingReturnStatement,\n\t\t};\n\n\t\treturn {\n\t\t\tast: this.ast,\n\t\t\tsettings\n\t\t};\n\t}\n\n\t/**\n\t * Recursively looks up type for ast expression until it's found\n\t * @param ast\n\t * @returns {String|null}\n\t */\n\tgetType(ast) {\n\t\tif (Array.isArray(ast)) {\n\t\t\treturn this.getType(ast[ast.length - 1]);\n\t\t}\n\t\tswitch (ast.type) {\n\t\t\tcase 'BlockStatement':\n\t\t\t\treturn this.getType(ast.body);\n\t\t\tcase 'ArrayExpression':\n\t\t\t\treturn `Array(${ ast.elements.length })`;\n\t\t\tcase 'Literal':\n\t\t\t\tconst literalKey = `${ast.start},${ast.end}`;\n\t\t\t\tif (this.literalTypes[literalKey]) {\n\t\t\t\t\treturn this.literalTypes[literalKey];\n\t\t\t\t}\n\t\t\t\tif (Number.isInteger(ast.value)) {\n\t\t\t\t\treturn 'LiteralInteger';\n\t\t\t\t} else if (ast.value === true || ast.value === false) {\n\t\t\t\t\treturn 'Boolean';\n\t\t\t\t} else {\n\t\t\t\t\treturn 'Number';\n\t\t\t\t}\n\t\t\tcase 'CallExpression':\n\t\t\t\tif (this.isAstMathFunction(ast)) {\n\t\t\t\t\treturn 'Number';\n\t\t\t\t}\n\t\t\t\tif (!ast.callee || !ast.callee.name) {\n\t\t\t\t\tif (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {\n\t\t\t\t\t\treturn this.lookupReturnType(ast.callee.expressions[ast.callee.expressions.length - 1].property.name, ast, this);\n\t\t\t\t\t}\n\t\t\t\t\tthrow this.astErrorOutput('Unknown call expression', ast);\n\t\t\t\t}\n\t\t\t\tif (ast.callee && ast.callee.name) {\n\t\t\t\t\treturn this.lookupReturnType(ast.callee.name, ast, this);\n\t\t\t\t}\n\t\t\t\tthrow this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\n\t\t\tcase 'BinaryExpression':\n\t\t\t\t// modulos is Number\n\t\t\t\tswitch (ast.operator) {\n\t\t\t\t\tcase '%':\n\t\t\t\t\t\treturn 'Number';\n\t\t\t\t\tcase '>':\n\t\t\t\t\tcase '<':\n\t\t\t\t\t\treturn 'Boolean';\n\t\t\t\t}\n\t\t\t\tconst type = this.getType(ast.left);\n\t\t\t\treturn typeLookupMap[type] || type;\n\t\t\tcase 'UpdateExpression':\n\t\t\t\treturn this.getType(ast.argument);\n\t\t\tcase 'UnaryExpression':\n\t\t\t\treturn this.getType(ast.argument);\n\t\t\tcase 'VariableDeclaration':\n\t\t\t\treturn this.getType(ast.declarations[0]);\n\t\t\tcase 'VariableDeclarator':\n\t\t\t\treturn this.getType(ast.id);\n\t\t\tcase 'Identifier':\n\t\t\t\tif (this.isAstVariable(ast)) {\n\t\t\t\t\tconst signature = this.getVariableSignature(ast);\n\t\t\t\t\tif (signature === 'value') {\n\t\t\t\t\t\tif (this.argumentNames.indexOf(ast.name) > -1) {\n\t\t\t\t\t\t\treturn this.getVariableType(ast.name);\n\t\t\t\t\t\t} else if (this.declarations[ast.name]) {\n\t\t\t\t\t\t\treturn this.declarations[ast.name].type;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (ast.name === 'Infinity') {\n\t\t\t\t\treturn 'Number';\n\t\t\t\t}\n\t\t\t\tconst origin = this.findIdentifierOrigin(ast);\n\t\t\t\tif (origin && origin.init) {\n\t\t\t\t\treturn this.getType(origin.init);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\tcase 'ReturnStatement':\n\t\t\t\treturn this.getType(ast.argument);\n\t\t\tcase 'MemberExpression':\n\t\t\t\tif (this.isAstMathFunction(ast)) {\n\t\t\t\t\tswitch (ast.property.name) {\n\t\t\t\t\t\tcase 'ceil':\n\t\t\t\t\t\t\treturn 'Integer';\n\t\t\t\t\t\tcase 'floor':\n\t\t\t\t\t\t\treturn 'Integer';\n\t\t\t\t\t\tcase 'round':\n\t\t\t\t\t\t\treturn 'Integer';\n\t\t\t\t\t}\n\t\t\t\t\treturn 'Number';\n\t\t\t\t}\n\t\t\t\tif (this.isAstVariable(ast)) {\n\t\t\t\t\tconst variableSignature = this.getVariableSignature(ast);\n\t\t\t\t\tswitch (variableSignature) {\n\t\t\t\t\t\tcase 'value[]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.name)];\n\t\t\t\t\t\tcase 'value[][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.object.name)];\n\t\t\t\t\t\tcase 'value[][][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.object.object.name)];\n\t\t\t\t\t\tcase 'value[][][][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.object.object.object.name)];\n\t\t\t\t\t\tcase 'this.thread.value':\n\t\t\t\t\t\t\treturn 'Integer';\n\t\t\t\t\t\tcase 'this.output.value':\n\t\t\t\t\t\t\treturn 'LiteralInteger';\n\t\t\t\t\t\tcase 'this.constants.value':\n\t\t\t\t\t\t\treturn this.getConstantType(ast.property.name);\n\t\t\t\t\t\tcase 'this.constants.value[]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getConstantType(ast.object.property.name)];\n\t\t\t\t\t\tcase 'this.constants.value[][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getConstantType(ast.object.object.property.name)];\n\t\t\t\t\t\tcase 'this.constants.value[][][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getConstantType(ast.object.object.object.property.name)];\n\t\t\t\t\t\tcase 'this.constants.value[][][][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getConstantType(ast.object.object.object.object.property.name)];\n\t\t\t\t\t\tcase 'fn()[]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getType(ast.object)];\n\t\t\t\t\t\tcase 'fn()[][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getType(ast.object)];\n\t\t\t\t\t\tcase 'fn()[][][]':\n\t\t\t\t\t\t\treturn typeLookupMap[this.getType(ast.object)];\n\t\t\t\t\t\tcase 'value.value':\n\t\t\t\t\t\t\tif (this.isAstMathVariable(ast)) {\n\t\t\t\t\t\t\t\treturn 'Number';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tswitch (ast.property.name) {\n\t\t\t\t\t\t\t\tcase 'r':\n\t\t\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.name)];\n\t\t\t\t\t\t\t\tcase 'g':\n\t\t\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.name)];\n\t\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.name)];\n\t\t\t\t\t\t\t\tcase 'a':\n\t\t\t\t\t\t\t\t\treturn typeLookupMap[this.getVariableType(ast.object.name)];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tcase '[][]':\n\t\t\t\t\t\t\treturn 'Number';\n\t\t\t\t\t}\n\t\t\t\t\tthrow this.astErrorOutput('Unhandled getType MemberExpression', ast);\n\t\t\t\t}\n\t\t\t\tthrow this.astErrorOutput('Unhandled getType MemberExpression', ast);\n\t\t\tcase 'ConditionalExpression':\n\t\t\t\treturn this.getType(ast.consequent);\n\t\t\tcase 'FunctionDeclaration':\n\t\t\tcase 'FunctionExpression':\n\t\t\t\tconst lastReturn = this.findLastReturn(ast.body);\n\t\t\t\tif (lastReturn) {\n\t\t\t\t\treturn this.getType(lastReturn);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\tcase 'IfStatement':\n\t\t\t\treturn this.getType(ast.consequent);\n\t\t\tdefault:\n\t\t\t\tthrow this.astErrorOutput(`Unhandled getType Type \"${ ast.type }\"`, ast);\n\t\t}\n\t}\n\n\tisAstMathVariable(ast) {\n\t\tconst mathProperties = [\n\t\t\t'E',\n\t\t\t'PI',\n\t\t\t'SQRT2',\n\t\t\t'SQRT1_2',\n\t\t\t'LN2',\n\t\t\t'LN10',\n\t\t\t'LOG2E',\n\t\t\t'LOG10E',\n\t\t];\n\t\treturn ast.type === 'MemberExpression' &&\n\t\t\tast.object && ast.object.type === 'Identifier' &&\n\t\t\tast.object.name === 'Math' &&\n\t\t\tast.property &&\n\t\t\tast.property.type === 'Identifier' &&\n\t\t\tmathProperties.indexOf(ast.property.name) > -1;\n\t}\n\n\tisAstMathFunction(ast) {\n\t\tconst mathFunctions = [\n\t\t\t'abs',\n\t\t\t'acos',\n\t\t\t'asin',\n\t\t\t'atan',\n\t\t\t'atan2',\n\t\t\t'ceil',\n\t\t\t'cos',\n\t\t\t'exp',\n\t\t\t'floor',\n\t\t\t'log',\n\t\t\t'log2',\n\t\t\t'max',\n\t\t\t'min',\n\t\t\t'pow',\n\t\t\t'random',\n\t\t\t'round',\n\t\t\t'sign',\n\t\t\t'sin',\n\t\t\t'sqrt',\n\t\t\t'tan',\n\t\t];\n\t\treturn ast.type === 'CallExpression' &&\n\t\t\tast.callee &&\n\t\t\tast.callee.type === 'MemberExpression' &&\n\t\t\tast.callee.object &&\n\t\t\tast.callee.object.type === 'Identifier' &&\n\t\t\tast.callee.object.name === 'Math' &&\n\t\t\tast.callee.property &&\n\t\t\tast.callee.property.type === 'Identifier' &&\n\t\t\tmathFunctions.indexOf(ast.callee.property.name) > -1;\n\t}\n\n\tisAstVariable(ast) {\n\t\treturn ast.type === 'Identifier' || ast.type === 'MemberExpression';\n\t}\n\n\tisSafe(ast) {\n\t\treturn this.isSafeDependencies(this.getDependencies(ast));\n\t}\n\n\tisSafeDependencies(dependencies) {\n\t\treturn dependencies && dependencies.every ? dependencies.every(dependency => dependency.isSafe) : true;\n\t}\n\n\tgetDependencies(ast, dependencies, isNotSafe) {\n\t\tif (!dependencies) {\n\t\t\tdependencies = [];\n\t\t}\n\t\tif (!ast) return null;\n\t\tif (Array.isArray(ast)) {\n\t\t\tfor (let i = 0; i < ast.length; i++) {\n\t\t\t\tthis.getDependencies(ast[i], dependencies, isNotSafe);\n\t\t\t}\n\t\t\treturn dependencies;\n\t\t}\n\t\tswitch (ast.type) {\n\t\t\tcase 'Literal':\n\t\t\t\tdependencies.push({\n\t\t\t\t\torigin: 'literal',\n\t\t\t\t\tvalue: ast.value,\n\t\t\t\t\tisSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase 'VariableDeclarator':\n\t\t\t\treturn this.getDependencies(ast.init, dependencies, isNotSafe);\n\t\t\tcase 'Identifier':\n\t\t\t\tif (this.declarations[ast.name]) {\n\t\t\t\t\tdependencies.push({\n\t\t\t\t\t\tname: ast.name,\n\t\t\t\t\t\torigin: 'declaration',\n\t\t\t\t\t\tisSafe: isNotSafe ? false : this.isSafeDependencies(this.declarations[ast.name].dependencies),\n\t\t\t\t\t});\n\t\t\t\t} else if (this.argumentNames.indexOf(ast.name) > -1) {\n\t\t\t\t\tdependencies.push({\n\t\t\t\t\t\tname: ast.name,\n\t\t\t\t\t\torigin: 'argument',\n\t\t\t\t\t\tisSafe: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'FunctionDeclaration':\n\t\t\t\treturn this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);\n\t\t\tcase 'ReturnStatement':\n\t\t\t\treturn this.getDependencies(ast.argument, dependencies);\n\t\t\tcase 'BinaryExpression':\n\t\t\t\tisNotSafe = (ast.operator === '/' || ast.operator === '*');\n\t\t\t\tthis.getDependencies(ast.left, dependencies, isNotSafe);\n\t\t\t\tthis.getDependencies(ast.right, dependencies, isNotSafe);\n\t\t\t\treturn dependencies;\n\t\t\tcase 'UnaryExpression':\n\t\t\tcase 'UpdateExpression':\n\t\t\t\treturn this.getDependencies(ast.argument, dependencies, isNotSafe);\n\t\t\tcase 'VariableDeclaration':\n\t\t\t\treturn this.getDependencies(ast.declarations, dependencies, isNotSafe);\n\t\t\tcase 'ArrayExpression':\n\t\t\t\tdependencies.push({\n\t\t\t\t\torigin: 'declaration',\n\t\t\t\t\tisSafe: true,\n\t\t\t\t});\n\t\t\t\treturn dependencies;\n\t\t\tcase 'CallExpression':\n\t\t\t\tdependencies.push({\n\t\t\t\t\torigin: 'function',\n\t\t\t\t\tisSafe: true,\n\t\t\t\t});\n\t\t\t\treturn dependencies;\n\t\t\tcase 'MemberExpression':\n\t\t\t\tconst details = this.getMemberExpressionDetails(ast);\n\t\t\t\tif (details) {\n\t\t\t\t\treturn details.type;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow this.astErrorOutput(`Unhandled type ${ ast.type } in getAllVariables`, ast);\n\t\t}\n\t\treturn dependencies;\n\t}\n\n\tgetVariableSignature(ast) {\n\t\tif (!this.isAstVariable(ast)) {\n\t\t\tthrow new Error(`ast of type \"${ ast.type }\" is not a variable signature`);\n\t\t}\n\t\tif (ast.type === 'Identifier') {\n\t\t\treturn 'value';\n\t\t}\n\t\tconst signature = [];\n\t\twhile (true) {\n\t\t\tif (!ast) break;\n\t\t\tif (ast.computed) {\n\t\t\t\tsignature.push('[]');\n\t\t\t} else if (ast.type === 'ThisExpression') {\n\t\t\t\tsignature.unshift('this');\n\t\t\t} else if (ast.property && ast.property.name) {\n\t\t\t\tif (\n\t\t\t\t\tast.property.name === 'x' ||\n\t\t\t\t\tast.property.name === 'y' ||\n\t\t\t\t\tast.property.name === 'z'\n\t\t\t\t) {\n\t\t\t\t\tsignature.unshift('.value');\n\t\t\t\t} else if (\n\t\t\t\t\tast.property.name === 'constants' ||\n\t\t\t\t\tast.property.name === 'thread' ||\n\t\t\t\t\tast.property.name === 'output'\n\t\t\t\t) {\n\t\t\t\t\tsignature.unshift('.' + ast.property.name);\n\t\t\t\t} else {\n\t\t\t\t\tsignature.unshift('.value');\n\t\t\t\t}\n\t\t\t} else if (ast.name) {\n\t\t\t\tsignature.unshift('value');\n\t\t\t} else if (ast.callee && ast.callee.name) {\n\t\t\t\tsignature.unshift('fn()');\n\t\t\t} else if (ast.elements) {\n\t\t\t\tsignature.unshift('[]');\n\t\t\t} else {\n\t\t\t\tsignature.unshift('unknown');\n\t\t\t}\n\t\t\tast = ast.object;\n\t\t}\n\n\t\tconst signatureString = signature.join('');\n\t\tconst allowedExpressions = [\n\t\t\t'value',\n\t\t\t'value[]',\n\t\t\t'value[][]',\n\t\t\t'value[][][]',\n\t\t\t'value[][][][]',\n\t\t\t'value.value',\n\t\t\t'this.thread.value',\n\t\t\t'this.output.value',\n\t\t\t'this.constants.value',\n\t\t\t'this.constants.value[]',\n\t\t\t'this.constants.value[][]',\n\t\t\t'this.constants.value[][][]',\n\t\t\t'this.constants.value[][][][]',\n\t\t\t'fn()[]',\n\t\t\t'fn()[][]',\n\t\t\t'fn()[][][]',\n\t\t\t'[][]',\n\t\t];\n\t\tif (allowedExpressions.indexOf(signatureString) > -1) {\n\t\t\treturn signatureString;\n\t\t}\n\t\treturn null;\n\t}\n\n\tbuild() {\n\t\treturn this.toString().length > 0;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for generically to its respective function\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed string array\n\t */\n\tastGeneric(ast, retArr) {\n\t\tif (ast === null) {\n\t\t\tthrow this.astErrorOutput('NULL ast', ast);\n\t\t} else {\n\t\t\tif (Array.isArray(ast)) {\n\t\t\t\tfor (let i = 0; i < ast.length; i++) {\n\t\t\t\t\tthis.astGeneric(ast[i], retArr);\n\t\t\t\t}\n\t\t\t\treturn retArr;\n\t\t\t}\n\n\t\t\tswitch (ast.type) {\n\t\t\t\tcase 'FunctionDeclaration':\n\t\t\t\t\treturn this.astFunctionDeclaration(ast, retArr);\n\t\t\t\tcase 'FunctionExpression':\n\t\t\t\t\treturn this.astFunctionExpression(ast, retArr);\n\t\t\t\tcase 'ReturnStatement':\n\t\t\t\t\treturn this.astReturnStatement(ast, retArr);\n\t\t\t\tcase 'Literal':\n\t\t\t\t\treturn this.astLiteral(ast, retArr);\n\t\t\t\tcase 'BinaryExpression':\n\t\t\t\t\treturn this.astBinaryExpression(ast, retArr);\n\t\t\t\tcase 'Identifier':\n\t\t\t\t\treturn this.astIdentifierExpression(ast, retArr);\n\t\t\t\tcase 'AssignmentExpression':\n\t\t\t\t\treturn this.astAssignmentExpression(ast, retArr);\n\t\t\t\tcase 'ExpressionStatement':\n\t\t\t\t\treturn this.astExpressionStatement(ast, retArr);\n\t\t\t\tcase 'EmptyStatement':\n\t\t\t\t\treturn this.astEmptyStatement(ast, retArr);\n\t\t\t\tcase 'BlockStatement':\n\t\t\t\t\treturn this.astBlockStatement(ast, retArr);\n\t\t\t\tcase 'IfStatement':\n\t\t\t\t\treturn this.astIfStatement(ast, retArr);\n\t\t\t\tcase 'BreakStatement':\n\t\t\t\t\treturn this.astBreakStatement(ast, retArr);\n\t\t\t\tcase 'ContinueStatement':\n\t\t\t\t\treturn this.astContinueStatement(ast, retArr);\n\t\t\t\tcase 'ForStatement':\n\t\t\t\t\treturn this.astForStatement(ast, retArr);\n\t\t\t\tcase 'WhileStatement':\n\t\t\t\t\treturn this.astWhileStatement(ast, retArr);\n\t\t\t\tcase 'DoWhileStatement':\n\t\t\t\t\treturn this.astDoWhileStatement(ast, retArr);\n\t\t\t\tcase 'VariableDeclaration':\n\t\t\t\t\treturn this.astVariableDeclaration(ast, retArr);\n\t\t\t\tcase 'VariableDeclarator':\n\t\t\t\t\treturn this.astVariableDeclarator(ast, retArr);\n\t\t\t\tcase 'ThisExpression':\n\t\t\t\t\treturn this.astThisExpression(ast, retArr);\n\t\t\t\tcase 'SequenceExpression':\n\t\t\t\t\treturn this.astSequenceExpression(ast, retArr);\n\t\t\t\tcase 'UnaryExpression':\n\t\t\t\t\treturn this.astUnaryExpression(ast, retArr);\n\t\t\t\tcase 'UpdateExpression':\n\t\t\t\t\treturn this.astUpdateExpression(ast, retArr);\n\t\t\t\tcase 'LogicalExpression':\n\t\t\t\t\treturn this.astLogicalExpression(ast, retArr);\n\t\t\t\tcase 'MemberExpression':\n\t\t\t\t\treturn this.astMemberExpression(ast, retArr);\n\t\t\t\tcase 'CallExpression':\n\t\t\t\t\treturn this.astCallExpression(ast, retArr);\n\t\t\t\tcase 'ArrayExpression':\n\t\t\t\t\treturn this.astArrayExpression(ast, retArr);\n\t\t\t\tcase 'DebuggerStatement':\n\t\t\t\t\treturn this.astDebuggerStatement(ast, retArr);\n\t\t\t\tcase 'ConditionalExpression':\n\t\t\t\t\treturn this.astConditionalExpression(ast, retArr);\n\t\t\t}\n\n\t\t\tthrow this.astErrorOutput('Unknown ast type : ' + ast.type, ast);\n\t\t}\n\t}\n\t/**\n\t * @desc To throw the AST error, with its location.\n\t * @param {string} error - the error message output\n\t * @param {Object} ast - the AST object where the error is\n\t */\n\tastErrorOutput(error, ast) {\n\t\tif (typeof this.source !== 'string') {\n\t\t\treturn new Error(error);\n\t\t}\n\n\t\tconst debugString = utils.getAstString(this.source, ast);\n\t\tconst leadingSource = this.source.substr(ast.start);\n\t\tconst splitLines = leadingSource.split(/\\n/);\n\t\tconst lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;\n\t\treturn new Error(`${error} on line ${ splitLines.length }, position ${ lineBefore.length }:\\n ${ debugString }`);\n\t}\n\n\tastDebuggerStatement(arrNode, retArr) {\n\t\treturn retArr;\n\t}\n\n\tastConditionalExpression(ast, retArr) {\n\t\tif (ast.type !== 'ConditionalExpression') {\n\t\t\tthrow this.astErrorOutput('Not a conditional expression', ast);\n\t\t}\n\t\tretArr.push('(');\n\t\tthis.astGeneric(ast.test, retArr);\n\t\tretArr.push('?');\n\t\tthis.astGeneric(ast.consequent, retArr);\n\t\tretArr.push(':');\n\t\tthis.astGeneric(ast.alternate, retArr);\n\t\tretArr.push(')');\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for to its *named function declaration*\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastFunctionDeclaration(ast, retArr) {\n\t\tif (this.onNestedFunction) {\n\t\t\tlet returnType = this.getType(ast);\n\t\t\tif (returnType === 'LiteralInteger') {\n\t\t\t\treturnType = 'Number';\n\t\t\t}\n\t\t\tthis.onNestedFunction(utils.getAstString(this.source, ast), returnType);\n\t\t}\n\t\treturn retArr;\n\t}\n\tastFunctionExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastReturnStatement(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastLiteral(ast, retArr) {\n\t\tthis.literalTypes[`${ast.start},${ast.end}`] = 'Number';\n\t\treturn retArr;\n\t}\n\tastBinaryExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastIdentifierExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastAssignmentExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *generic expression* statement\n\t * @param {Object} esNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastExpressionStatement(esNode, retArr) {\n\t\tthis.astGeneric(esNode.expression, retArr);\n\t\tretArr.push(';');\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for an *Empty* Statement\n\t * @param {Object} eNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastEmptyStatement(eNode, retArr) {\n\t\treturn retArr;\n\t}\n\tastBlockStatement(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastIfStatement(ast, retArr) {\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Break* Statement\n\t * @param {Object} brNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastBreakStatement(brNode, retArr) {\n\t\tretArr.push('break;');\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Continue* Statement\n\t * @param {Object} crNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastContinueStatement(crNode, retArr) {\n\t\tretArr.push('continue;\\n');\n\t\treturn retArr;\n\t}\n\tastForStatement(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastWhileStatement(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastDoWhileStatement(ast, retArr) {\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Variable Declaration*\n\t * @param {Object} varDecNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastVariableDeclaration(varDecNode, retArr) {\n\t\tconst declarations = varDecNode.declarations;\n\t\tif (!declarations || !declarations[0] || !declarations[0].init) {\n\t\t\tthrow this.astErrorOutput('Unexpected expression', varDecNode);\n\t\t}\n\t\tconst result = [];\n\t\tconst firstDeclaration = declarations[0];\n\t\tconst init = firstDeclaration.init;\n\t\tlet type = this.isState('in-for-loop-init') ? 'Integer' : this.getType(init);\n\t\tif (type === 'LiteralInteger') {\n\t\t\t// We had the choice to go either float or int, choosing float\n\t\t\ttype = 'Number';\n\t\t}\n\t\tconst markupType = typeMap[type];\n\t\tif (!markupType) {\n\t\t\tthrow this.astErrorOutput(`Markup type ${ markupType } not handled`, varDecNode);\n\t\t}\n\t\tlet dependencies = this.getDependencies(firstDeclaration.init);\n\t\tthis.declarations[firstDeclaration.id.name] = Object.freeze({\n\t\t\ttype,\n\t\t\tdependencies,\n\t\t\tisSafe: dependencies.every(dependency => dependency.isSafe)\n\t\t});\n\t\tconst initResult = [`${type} user_${firstDeclaration.id.name}=`];\n\t\tthis.astGeneric(init, initResult);\n\t\tresult.push(initResult.join(''));\n\n\t\t// first declaration is done, now any added ones setup\n\t\tfor (let i = 1; i < declarations.length; i++) {\n\t\t\tconst declaration = declarations[i];\n\t\t\tdependencies = this.getDependencies(declaration);\n\t\t\tthis.declarations[declaration.id.name] = Object.freeze({\n\t\t\t\ttype,\n\t\t\t\tdependencies,\n\t\t\t\tisSafe: false\n\t\t\t});\n\t\t\tthis.astGeneric(declaration, result);\n\t\t}\n\n\t\tretArr.push(retArr, result.join(','));\n\t\tretArr.push(';');\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Variable Declarator*\n\t * @param {Object} iVarDecNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastVariableDeclarator(iVarDecNode, retArr) {\n\t\tthis.astGeneric(iVarDecNode.id, retArr);\n\t\tif (iVarDecNode.init !== null) {\n\t\t\tretArr.push('=');\n\t\t\tthis.astGeneric(iVarDecNode.init, retArr);\n\t\t}\n\t\treturn retArr;\n\t}\n\tastThisExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastSequenceExpression(sNode, retArr) {\n\t\tfor (let i = 0; i < sNode.expressions.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tretArr.push(',');\n\t\t\t}\n\t\t\tthis.astGeneric(sNode.expressions, retArr);\n\t\t}\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Unary* Expression\n\t * @param {Object} uNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastUnaryExpression(uNode, retArr) {\n\t\tif (uNode.prefix) {\n\t\t\tretArr.push(uNode.operator);\n\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t} else {\n\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\tretArr.push(uNode.operator);\n\t\t}\n\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Update* Expression\n\t * @param {Object} uNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastUpdateExpression(uNode, retArr) {\n\t\tif (uNode.prefix) {\n\t\t\tretArr.push(uNode.operator);\n\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t} else {\n\t\t\tthis.astGeneric(uNode.argument, retArr);\n\t\t\tretArr.push(uNode.operator);\n\t\t}\n\n\t\treturn retArr;\n\t}\n\t/**\n\t * @desc Parses the abstract syntax tree for *Logical* Expression\n\t * @param {Object} logNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastLogicalExpression(logNode, retArr) {\n\t\tretArr.push('(');\n\t\tthis.astGeneric(logNode.left, retArr);\n\t\tretArr.push(logNode.operator);\n\t\tthis.astGeneric(logNode.right, retArr);\n\t\tretArr.push(')');\n\t\treturn retArr;\n\t}\n\tastMemberExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastCallExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\tastArrayExpression(ast, retArr) {\n\t\treturn retArr;\n\t}\n\n\tgetMemberExpressionDetails(ast) {\n\t\tif (ast.type !== 'MemberExpression') {\n\t\t\tthrow this.astErrorOutput(`Expression ${ ast.type } not a MemberExpression`, ast);\n\t\t}\n\t\tlet name = null;\n\t\tlet type = null;\n\t\tconst variableSignature = this.getVariableSignature(ast);\n\t\tswitch (variableSignature) {\n\t\t\tcase 'value':\n\t\t\t\treturn null;\n\t\t\tcase 'this.thread.value':\n\t\t\tcase 'this.output.value':\n\t\t\t\treturn {\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\ttype: 'Integer',\n\t\t\t\t\tname: ast.property.name\n\t\t\t\t};\n\t\t\tcase 'value[]':\n\t\t\t\tif (typeof ast.object.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tname = ast.object.name;\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\torigin: 'user',\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\ttype: this.getVariableType(name),\n\t\t\t\t\txProperty: ast.property\n\t\t\t\t};\n\t\t\tcase 'value[][]':\n\t\t\t\tif (typeof ast.object.object.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tname = ast.object.object.name;\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\torigin: 'user',\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\ttype: this.getVariableType(name),\n\t\t\t\t\tyProperty: ast.object.property,\n\t\t\t\t\txProperty: ast.property,\n\t\t\t\t};\n\t\t\tcase 'value[][][]':\n\t\t\t\tif (typeof ast.object.object.object.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tname = ast.object.object.object.name;\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\torigin: 'user',\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\ttype: this.getVariableType(name),\n\t\t\t\t\tzProperty: ast.object.object.property,\n\t\t\t\t\tyProperty: ast.object.property,\n\t\t\t\t\txProperty: ast.property,\n\t\t\t\t};\n\t\t\tcase 'value[][][][]':\n\t\t\t\tif (typeof ast.object.object.object.object.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tname = ast.object.object.object.object.name;\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\torigin: 'user',\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\ttype: this.getVariableType(name),\n\t\t\t\t\tzProperty: ast.object.object.property,\n\t\t\t\t\tyProperty: ast.object.property,\n\t\t\t\t\txProperty: ast.property,\n\t\t\t\t};\n\t\t\tcase 'value.value':\n\t\t\t\tif (typeof ast.property.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tif (this.isAstMathVariable(ast)) {\n\t\t\t\t\tname = ast.property.name;\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\torigin: 'Math',\n\t\t\t\t\t\ttype: 'Number',\n\t\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tswitch (ast.property.name) {\n\t\t\t\t\tcase 'r':\n\t\t\t\t\tcase 'g':\n\t\t\t\t\tcase 'b':\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tname = ast.object.name;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\tproperty: ast.property.name,\n\t\t\t\t\t\t\torigin: 'user',\n\t\t\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\t\t\ttype: 'Number'\n\t\t\t\t\t\t};\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\tcase 'this.constants.value':\n\t\t\t\tif (typeof ast.property.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tname = ast.property.name;\n\t\t\t\ttype = this.getConstantType(name);\n\t\t\t\tif (!type) {\n\t\t\t\t\tthrow this.astErrorOutput('Constant has no type', ast);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\torigin: 'constants',\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t};\n\t\t\tcase 'this.constants.value[]':\n\t\t\t\tif (typeof ast.object.property.name !== 'string') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tname = ast.object.property.name;\n\t\t\t\ttype = this.getConstantType(name);\n\t\t\t\tif (!type) {\n\t\t\t\t\tthrow this.astErrorOutput('Constant has no type', ast);\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tname,\n\t\t\t\t\ttype,\n\t\t\t\t\torigin: 'constants',\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\txProperty: ast.property,\n\t\t\t\t};\n\t\t\tcase 'this.constants.value[][]':\n\t\t\t\t{\n\t\t\t\t\tif (typeof ast.object.object.property.name !== 'string') {\n\t\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t\t}\n\t\t\t\t\tname = ast.object.object.property.name;\n\t\t\t\t\ttype = this.getConstantType(name);\n\t\t\t\t\tif (!type) {\n\t\t\t\t\t\tthrow this.astErrorOutput('Constant has no type', ast);\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\torigin: 'constants',\n\t\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\t\tyProperty: ast.object.property,\n\t\t\t\t\t\txProperty: ast.property,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\tcase 'this.constants.value[][][]':\n\t\t\t\t{\n\t\t\t\t\tif (typeof ast.object.object.object.property.name !== 'string') {\n\t\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t\t}\n\t\t\t\t\tname = ast.object.object.object.property.name;\n\t\t\t\t\ttype = this.getConstantType(name);\n\t\t\t\t\tif (!type) {\n\t\t\t\t\t\tthrow this.astErrorOutput('Constant has no type', ast);\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\torigin: 'constants',\n\t\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\t\tzProperty: ast.object.object.property,\n\t\t\t\t\t\tyProperty: ast.object.property,\n\t\t\t\t\t\txProperty: ast.property,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\tcase 'fn()[]':\n\t\t\tcase '[][]':\n\t\t\t\treturn {\n\t\t\t\t\tsignature: variableSignature,\n\t\t\t\t\tproperty: ast.property,\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t}\n\t}\n\n\tfindIdentifierOrigin(astToFind) {\n\t\tconst stack = [this.ast];\n\n\t\twhile (stack.length > 0) {\n\t\t\tconst atNode = stack[0];\n\t\t\tif (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {\n\t\t\t\treturn atNode;\n\t\t\t}\n\t\t\tstack.shift();\n\t\t\tif (atNode.argument) {\n\t\t\t\tstack.push(atNode.argument);\n\t\t\t} else if (atNode.body) {\n\t\t\t\tstack.push(atNode.body);\n\t\t\t} else if (atNode.declarations) {\n\t\t\t\tstack.push(atNode.declarations);\n\t\t\t} else if (Array.isArray(atNode)) {\n\t\t\t\tfor (let i = 0; i < atNode.length; i++) {\n\t\t\t\t\tstack.push(atNode[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tfindLastReturn(ast) {\n\t\tconst stack = [ast || this.ast];\n\n\t\twhile (stack.length > 0) {\n\t\t\tconst atNode = stack.pop();\n\t\t\tif (atNode.type === 'ReturnStatement') {\n\t\t\t\treturn atNode;\n\t\t\t}\n\t\t\tif (atNode.argument) {\n\t\t\t\tstack.push(atNode.argument);\n\t\t\t} else if (atNode.body) {\n\t\t\t\tstack.push(atNode.body);\n\t\t\t} else if (atNode.declarations) {\n\t\t\t\tstack.push(atNode.declarations);\n\t\t\t} else if (Array.isArray(atNode)) {\n\t\t\t\tfor (let i = 0; i < atNode.length; i++) {\n\t\t\t\t\tstack.push(atNode[i]);\n\t\t\t\t}\n\t\t\t} else if (atNode.consequent) {\n\t\t\t\tstack.push(atNode.consequent);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetInternalVariableName(name) {\n\t\tif (!this._internalVariableNames.hasOwnProperty(name)) {\n\t\t\tthis._internalVariableNames[name] = 0;\n\t\t}\n\t\tthis._internalVariableNames[name]++;\n\t\tif (this._internalVariableNames[name] === 1) {\n\t\t\treturn name;\n\t\t}\n\t\treturn name + this._internalVariableNames[name];\n\t}\n\n\tvarWarn() {\n\t\tconsole.warn('var declarations are deprecated, weird things happen when falling back to CPU because var scope differs in javascript than in most languages.  Use const or let');\n\t}\n}\n\nconst typeLookupMap = {\n\t'Array': 'Number',\n\t'Array(2)': 'Number',\n\t'Array(3)': 'Number',\n\t'Array(4)': 'Number',\n\t'Array2D': 'Number',\n\t'Array3D': 'Number',\n\t'Input': 'Number',\n\t'HTMLImage': 'Array(4)',\n\t'HTMLImageArray': 'Array(4)',\n\t'NumberTexture': 'Number',\n\t'MemoryOptimizedNumberTexture': 'Number',\n\t'ArrayTexture(1)': 'Number',\n\t'ArrayTexture(2)': 'Array(2)',\n\t'ArrayTexture(3)': 'Array(3)',\n\t'ArrayTexture(4)': 'Array(4)',\n};\n\nmodule.exports = {\n\tFunctionNode\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/gl-kernel.js":
/*!******************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/gl-kernel.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tKernel\n} = __webpack_require__(/*! ./kernel */ \"./node_modules/gpu.js/src/backend/kernel.js\");\n\nconst {\n\tTexture\n} = __webpack_require__(/*! ../texture */ \"./node_modules/gpu.js/src/texture.js\");\n\nconst {\n\tutils\n} = __webpack_require__(/*! ../utils */ \"./node_modules/gpu.js/src/utils.js\");\n\n/**\n * @abstract\n */\nclass GLKernel extends Kernel {\n\tstatic get mode() {\n\t\treturn 'gpu';\n\t}\n\n\tstatic getIsFloatRead() {\n\t\tconst kernelString = `function kernelFunction() {\n\t\t\treturn 1;\n\t\t}`;\n\t\tconst kernel = new this(kernelString, {\n\t\t\tcontext: this.testContext,\n\t\t\tcanvas: this.testCanvas,\n\t\t\tvalidate: false,\n\t\t\toutput: [1],\n\t\t\tprecision: 'single',\n\t\t\t//TODO: not sure how to handle?\n\t\t\tfloatOutputForce: true,\n\t\t\treturnType: 'Number'\n\t\t});\n\t\tconst result = kernel.run();\n\t\tkernel.destroy(true);\n\t\treturn result[0] === 1;\n\t}\n\n\tstatic getIsIntegerDivisionAccurate() {\n\t\tfunction kernelFunction(v1, v2) {\n\t\t\treturn v1[this.thread.x] / v2[this.thread.x];\n\t\t}\n\t\tconst kernel = new this(kernelFunction.toString(), {\n\t\t\tcontext: this.testContext,\n\t\t\tcanvas: this.testCanvas,\n\t\t\tvalidate: false,\n\t\t\toutput: [2],\n\t\t\treturnType: 'Number',\n\t\t\tprecision: 'unsigned',\n\t\t});\n\t\tconst result = kernel.run([6, 6030401], [3, 3991]);\n\t\tkernel.destroy(true);\n\t\t// have we not got whole numbers for 6/3 or 6030401/3991\n\t\t// add more here if others see this problem\n\t\treturn result[0] === 2 && result[1] === 1511;\n\t}\n\n\t/**\n\t * @abstract\n\t */\n\tstatic get testCanvas() {\n\t\tthrow new Error(`\"testCanvas\" not defined on ${ this.name }`);\n\t}\n\n\t/**\n\t * @abstract\n\t */\n\tstatic get testContext() {\n\t\tthrow new Error(`\"testContext\" not defined on ${ this.name }`);\n\t}\n\n\t/**\n\t * @abstract\n\t */\n\tstatic get features() {\n\t\tthrow new Error(`\"features\" not defined on ${ this.name }`);\n\t}\n\n\t/**\n\t * @abstract\n\t */\n\tstatic setupFeatureChecks() {\n\t\tthrow new Error(`\"setupFeatureChecks\" not defined on ${ this.name }`);\n\t}\n\n\t/**\n\t * @desc Fix division by factor of 3 FP accuracy bug\n\t * @param {Boolean} fix - should fix\n\t */\n\tsetFixIntegerDivisionAccuracy(fix) {\n\t\tthis.fixIntegerDivisionAccuracy = fix;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Toggle output mode\n\t * @param {String} flag - 'single' or 'unsigned'\n\t */\n\tsetPrecision(flag) {\n\t\tthis.precision = flag;\n\t\treturn this;\n\t}\n\n\t// TODO: not sure how to handle\n\tsetFloatOutputForce(flag) {\n\t\tthis.floatOutputForce = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Toggle texture output mode\n\t * @param {Boolean} flag - true to enable floatTextures\n\t */\n\tsetFloatTextures(flag) {\n\t\tutils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');\n\t\tthis.floatTextures = flag;\n\t\treturn this;\n\t}\n\n\tsetOptimizeFloatMemory(flag) {\n\t\tthis.optimizeFloatMemory = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * A highly readable very forgiving micro-parser for a glsl function that gets argument types\n\t * @param {String} source\n\t * @returns {{argumentTypes: String[], argumentNames: String[]}}\n\t */\n\tstatic nativeFunctionArguments(source) {\n\t\tconst argumentTypes = [];\n\t\tconst argumentNames = [];\n\t\tconst states = [];\n\t\tconst isStartingVariableName = /^[a-zA-Z_]/;\n\t\tconst isVariableChar = /[a-zA-Z_0-9]/;\n\t\tlet i = 0;\n\t\tlet argumentName = null;\n\t\tlet argumentType = null;\n\t\twhile (i < source.length) {\n\t\t\tconst char = source[i];\n\t\t\tconst nextChar = source[i + 1];\n\t\t\tconst state = states.length > 0 ? states[states.length - 1] : null;\n\n\t\t\t// begin MULTI_LINE_COMMENT handling\n\t\t\tif (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {\n\t\t\t\tstates.push('MULTI_LINE_COMMENT');\n\t\t\t\ti += 2;\n\t\t\t\tcontinue;\n\t\t\t} else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {\n\t\t\t\tstates.pop();\n\t\t\t\ti += 2;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// end MULTI_LINE_COMMENT handling\n\n\t\t\t// begin COMMENT handling\n\t\t\telse if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {\n\t\t\t\tstates.push('COMMENT');\n\t\t\t\ti += 2;\n\t\t\t\tcontinue;\n\t\t\t} else if (state === 'COMMENT' && char === '\\n') {\n\t\t\t\tstates.pop();\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// end COMMENT handling\n\n\t\t\t// being FUNCTION_ARGUMENTS handling\n\t\t\telse if (state === null && char === '(') {\n\t\t\t\tstates.push('FUNCTION_ARGUMENTS');\n\t\t\t\ti++;\n\t\t\t\tcontinue;\n\t\t\t} else if (state === 'FUNCTION_ARGUMENTS') {\n\t\t\t\tif (char === ')') {\n\t\t\t\t\tstates.pop();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {\n\t\t\t\t\tstates.push('DECLARE_VARIABLE');\n\t\t\t\t\targumentType = 'float';\n\t\t\t\t\targumentName = '';\n\t\t\t\t\ti += 6;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {\n\t\t\t\t\tstates.push('DECLARE_VARIABLE');\n\t\t\t\t\targumentType = 'int';\n\t\t\t\t\targumentName = '';\n\t\t\t\t\ti += 4;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {\n\t\t\t\t\tstates.push('DECLARE_VARIABLE');\n\t\t\t\t\targumentType = 'vec2';\n\t\t\t\t\targumentName = '';\n\t\t\t\t\ti += 5;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {\n\t\t\t\t\tstates.push('DECLARE_VARIABLE');\n\t\t\t\t\targumentType = 'vec3';\n\t\t\t\t\targumentName = '';\n\t\t\t\t\ti += 5;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {\n\t\t\t\t\tstates.push('DECLARE_VARIABLE');\n\t\t\t\t\targumentType = 'vec4';\n\t\t\t\t\targumentName = '';\n\t\t\t\t\ti += 5;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// end FUNCTION_ARGUMENTS handling\n\n\t\t\t// begin DECLARE_VARIABLE handling\n\t\t\telse if (state === 'DECLARE_VARIABLE') {\n\t\t\t\tif (argumentName === '') {\n\t\t\t\t\tif (char === ' ') {\n\t\t\t\t\t\ti++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!isStartingVariableName.test(char)) {\n\t\t\t\t\t\tthrow new Error('variable name is not expected string');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\targumentName += char;\n\t\t\t\tif (!isVariableChar.test(nextChar)) {\n\t\t\t\t\tstates.pop();\n\t\t\t\t\targumentNames.push(argumentName);\n\t\t\t\t\targumentTypes.push(typeMap[argumentType]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// end DECLARE_VARIABLE handling\n\n\t\t\t// Progress to next character\n\t\t\ti++;\n\t\t}\n\t\tif (states.length > 0) {\n\t\t\tthrow new Error('GLSL function was not parsable');\n\t\t}\n\t\treturn {\n\t\t\targumentNames,\n\t\t\targumentTypes,\n\t\t};\n\t}\n\n\tstatic nativeFunctionReturnType(source) {\n\t\treturn typeMap[source.match(/int|float|vec[2-4]/)[0]];\n\t}\n\n\tstatic combineKernels(combinedKernel, lastKernel) {\n\t\tcombinedKernel.apply(null, arguments);\n\t\tconst {\n\t\t\ttexSize,\n\t\t\tcontext,\n\t\t\tthreadDim\n\t\t} = lastKernel.texSize;\n\t\tlet result;\n\t\tif (lastKernel.precision === 'single') {\n\t\t\tconst w = texSize[0];\n\t\t\tconst h = Math.ceil(texSize[1] / 4);\n\t\t\tresult = new Float32Array(w * h * 4 * 4);\n\t\t\tcontext.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);\n\t\t} else {\n\t\t\tconst bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n\t\t\tcontext.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);\n\t\t\tresult = new Float32Array(bytes.buffer);\n\t\t}\n\n\t\tresult = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n\n\t\tif (lastKernel.output.length === 1) {\n\t\t\treturn result;\n\t\t} else if (lastKernel.output.length === 2) {\n\t\t\treturn utils.splitArray(result, lastKernel.output[0]);\n\t\t} else if (lastKernel.output.length === 3) {\n\t\t\tconst cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);\n\t\t\treturn cube.map(function(x) {\n\t\t\t\treturn utils.splitArray(x, lastKernel.output[0]);\n\t\t\t});\n\t\t}\n\t}\n\n\tconstructor(source, settings) {\n\t\tsuper(source, settings);\n\t\tthis.texSize = null;\n\t\t// TODO: not sure how to handle\n\t\tthis.floatOutputForce = null;\n\t\tthis.fixIntegerDivisionAccuracy = null;\n\t\tthis.translatedSource = null;\n\t\tthis.renderStrategy = null;\n\t\tthis.compiledFragmentShader = null;\n\t\tthis.compiledVertexShader = null;\n\n\t\tthis.optimizeFloatMemory = null;\n\t}\n\n\ttranslateSource() {\n\t\tthrow new Error(`\"translateSource\" not defined on ${this.constructor.name}`);\n\t}\n\n\tpickRenderStrategy(args) {\n\t\t// TODO: replace boolean returns with setting a state that belongs on this that represents the need for fallback\n\t\tif (this.graphical) return;\n\t\tif (this.precision === 'unsigned') {\n\t\t\tswitch (this.returnType) {\n\t\t\t\tcase 'LiteralInteger':\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'Integer':\n\t\t\t\t\tif (this.pipeline) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.PackedTexture;\n\t\t\t\t\t\tthis.renderOutput = this.renderTexture;\n\t\t\t\t\t} else if (this.output[2] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.PackedPixelTo3DFloat;\n\t\t\t\t\t\tthis.renderOutput = this.render3DPackedFloat;\n\t\t\t\t\t} else if (this.output[1] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.PackedPixelTo2DFloat;\n\t\t\t\t\t\tthis.renderOutput = this.render2DPackedFloat;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.PackedPixelToFloat;\n\t\t\t\t\t\tthis.renderOutput = this.renderPackedFloat;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'Array(2)':\n\t\t\t\tcase 'Array(3)':\n\t\t\t\tcase 'Array(4)':\n\t\t\t\t\tthis.onRequestFallback(args);\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (this.precision === 'single') {\n\t\t\tif (this.pipeline) {\n\t\t\t\tthis.renderStrategy = renderStrategy.FloatTexture;\n\t\t\t\tthis.renderOutput = this.renderTexture;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tswitch (this.returnType) {\n\t\t\t\tcase 'LiteralInteger':\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'Integer':\n\t\t\t\t\tif (this.output[2] > 0) {\n\t\t\t\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\t\t\t\tthis.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimized3DFloat;\n\t\t\t\t\t\t\tthis.renderOutput = this.renderMemoryOptimized3DFloat;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo3DFloat;\n\t\t\t\t\t\t\tthis.renderOutput = this.render3DFloat;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this.output[1] > 0) {\n\t\t\t\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\t\t\t\tthis.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimized2DFloat;\n\t\t\t\t\t\t\tthis.renderOutput = this.renderMemoryOptimized2DFloat;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo2DFloat;\n\t\t\t\t\t\t\tthis.renderOutput = this.render2DFloat;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\t\t\t\tthis.renderStrategy = renderStrategy.MemoryOptimizedFloatPixelToMemoryOptimizedFloat;\n\t\t\t\t\t\t\tthis.renderOutput = this.renderMemoryOptimizedFloat;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelToFloat;\n\t\t\t\t\t\t\tthis.renderOutput = this.renderFloat;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'Array(2)':\n\t\t\t\t\tif (this.output[2] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo3DArray2;\n\t\t\t\t\t\tthis.renderOutput = this.render3DArray2;\n\t\t\t\t\t} else if (this.output[1] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo2DArray2;\n\t\t\t\t\t\tthis.renderOutput = this.render2DArray2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelToArray2;\n\t\t\t\t\t\tthis.renderOutput = this.renderArray2;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'Array(3)':\n\t\t\t\t\tif (this.output[2] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo3DArray3;\n\t\t\t\t\t\tthis.renderOutput = this.render3DArray3;\n\t\t\t\t\t} else if (this.output[1] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo2DArray3;\n\t\t\t\t\t\tthis.renderOutput = this.render2DArray3;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelToArray3;\n\t\t\t\t\t\tthis.renderOutput = this.renderArray3;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\tcase 'Array(4)':\n\t\t\t\t\tif (this.output[2] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo3DArray4;\n\t\t\t\t\t\tthis.renderOutput = this.render3DArray4;\n\t\t\t\t\t} else if (this.output[1] > 0) {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelTo2DArray4;\n\t\t\t\t\t\tthis.renderOutput = this.render2DArray4;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.renderStrategy = renderStrategy.FloatPixelToArray4;\n\t\t\t\t\t\tthis.renderOutput = this.renderArray4;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new Error(`unhandled precision of \"${this.precision}\"`);\n\t\t}\n\n\t\tthrow new Error(`unhandled return type \"${this.returnType}\"`);\n\t}\n\n\t/**\n\t * @abstract\n\t * @returns String\n\t */\n\tgetKernelString() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\n\tgetMainResultTexture() {\n\t\tswitch (this.returnType) {\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Float':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Number':\n\t\t\t\treturn this.getMainResultNumberTexture();\n\t\t\tcase 'Array(2)':\n\t\t\t\treturn this.getMainResultArray2Texture();\n\t\t\tcase 'Array(3)':\n\t\t\t\treturn this.getMainResultArray3Texture();\n\t\t\tcase 'Array(4)':\n\t\t\t\treturn this.getMainResultArray4Texture();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unhandled returnType type ${ this.returnType }`);\n\t\t}\n\t}\n\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultKernelNumberTexture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultSubKernelNumberTexture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultKernelArray2Texture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultSubKernelArray2Texture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultKernelArray3Texture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultSubKernelArray3Texture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultKernelArray4Texture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultSubKernelArray4Texture() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultGraphical() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultMemoryOptimizedFloats() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\t/**\n\t * @abstract\n\t * @returns String[]\n\t */\n\tgetMainResultPackedPixels() {\n\t\tthrow new Error(`abstract method call`);\n\t}\n\n\tgetMainResultString() {\n\t\tif (this.graphical) {\n\t\t\treturn this.getMainResultGraphical();\n\t\t} else if (this.precision === 'single') {\n\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\treturn this.getMainResultMemoryOptimizedFloats();\n\t\t\t}\n\t\t\treturn this.getMainResultTexture();\n\t\t} else {\n\t\t\treturn this.getMainResultPackedPixels();\n\t\t}\n\t}\n\n\tgetMainResultNumberTexture() {\n\t\treturn utils.linesToString(this.getMainResultKernelNumberTexture()) +\n\t\t\tutils.linesToString(this.getMainResultSubKernelNumberTexture());\n\t}\n\n\tgetMainResultArray2Texture() {\n\t\treturn utils.linesToString(this.getMainResultKernelArray2Texture()) +\n\t\t\tutils.linesToString(this.getMainResultSubKernelArray2Texture());\n\t}\n\n\tgetMainResultArray3Texture() {\n\t\treturn utils.linesToString(this.getMainResultKernelArray3Texture()) +\n\t\t\tutils.linesToString(this.getMainResultSubKernelArray3Texture());\n\t}\n\n\tgetMainResultArray4Texture() {\n\t\treturn utils.linesToString(this.getMainResultKernelArray4Texture()) +\n\t\t\tutils.linesToString(this.getMainResultSubKernelArray4Texture());\n\t}\n\n\tgetReturnTextureType() {\n\t\tif (this.graphical) {\n\t\t\treturn 'ArrayTexture(4)';\n\t\t}\n\t\tif (this.precision === 'single') {\n\t\t\tswitch (this.returnType) {\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'Integer':\n\t\t\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\t\t\treturn 'MemoryOptimizedNumberTexture';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'ArrayTexture(1)';\n\t\t\t\t\t}\n\t\t\t\tcase 'Array(2)':\n\t\t\t\t\treturn 'ArrayTexture(2)';\n\t\t\t\tcase 'Array(3)':\n\t\t\t\t\treturn 'ArrayTexture(3)';\n\t\t\t\tcase 'Array(4)':\n\t\t\t\t\treturn 'ArrayTexture(4)';\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`unsupported returnType ${this.returnType}`);\n\t\t\t}\n\t\t} else {\n\t\t\tswitch (this.returnType) {\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'Integer':\n\t\t\t\t\treturn 'NumberTexture';\n\t\t\t\tcase 'Array(2)':\n\t\t\t\tcase 'Array(3)':\n\t\t\t\tcase 'Array(4)':\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`unsupported returnType ${ this.returnType }`);\n\t\t\t}\n\t\t}\n\t}\n\n\trenderTexture() {\n\t\treturn new Texture({\n\t\t\ttexture: this.outputTexture,\n\t\t\tsize: this.texSize,\n\t\t\tdimensions: this.threadDim,\n\t\t\toutput: this.output,\n\t\t\tcontext: this.context,\n\t\t\tgpu: this.gpu,\n\t\t\ttype: this.getReturnTextureType(),\n\t\t});\n\t}\n\treadPackedPixelsToUint8Array() {\n\t\tif (this.precision !== 'unsigned') throw new Error('Requires this.precision to be \"unsigned\"');\n\t\tconst {\n\t\t\ttexSize,\n\t\t\tcontext: gl\n\t\t} = this;\n\t\tconst result = new Uint8Array(texSize[0] * texSize[1] * 4);\n\t\tgl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);\n\t\treturn result;\n\t}\n\treadPackedPixelsToFloat32Array() {\n\t\treturn new Float32Array(this.readPackedPixelsToUint8Array().buffer);\n\t}\n\treadFloatPixelsToFloat32Array() {\n\t\tif (this.precision !== 'single') throw new Error('Requires this.precision to be \"single\"');\n\t\tconst {\n\t\t\ttexSize,\n\t\t\tcontext: gl\n\t\t} = this;\n\t\tconst w = texSize[0];\n\t\tconst h = texSize[1];\n\t\tconst result = new Float32Array(w * h * 4);\n\t\tgl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n\t\treturn result;\n\t}\n\treadMemoryOptimizedFloatPixelsToFloat32Array() {\n\t\tif (this.precision !== 'single') throw new Error('Requires this.precision to be \"single\"');\n\t\tconst {\n\t\t\ttexSize,\n\t\t\tcontext: gl\n\t\t} = this;\n\t\tconst w = texSize[0];\n\t\tconst h = texSize[1];\n\t\tconst result = new Float32Array(w * h * 4);\n\t\tgl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n\t\treturn result;\n\t}\n\trenderPackedFloat() {\n\t\tconst [xMax] = this.output;\n\t\treturn this.readPackedPixelsToFloat32Array().subarray(0, xMax);\n\t}\n\trender2DPackedFloat() {\n\t\tconst pixels = this.readPackedPixelsToFloat32Array();\n\t\tconst [xMax, yMax] = this.output;\n\t\tconst yResults = new Array(yMax);\n\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\tconst xStart = y * xMax;\n\t\t\tconst xEnd = xStart + xMax;\n\t\t\tyResults[y] = pixels.subarray(xStart, xEnd);\n\t\t}\n\t\treturn yResults;\n\t}\n\trender3DPackedFloat() {\n\t\tconst pixels = this.readPackedPixelsToFloat32Array();\n\t\tconst [xMax, yMax, zMax] = this.output;\n\t\tconst zResults = new Array(zMax);\n\t\tfor (let z = 0; z < zMax; z++) {\n\t\t\tconst yResults = new Array(yMax);\n\t\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\t\tconst xStart = (z * yMax * xMax) + y * xMax;\n\t\t\t\tconst xEnd = xStart + xMax;\n\t\t\t\tyResults[y] = pixels.subarray(xStart, xEnd);\n\t\t\t}\n\t\t\tzResults[z] = yResults;\n\t\t}\n\t\treturn zResults;\n\t}\n\trenderFloat() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax] = this.output;\n\t\tconst xResults = new Float32Array(xMax);\n\t\tlet i = 0;\n\t\tfor (let x = 0; x < xMax; x++) {\n\t\t\txResults[x] = pixels[i];\n\t\t\ti += 4;\n\t\t}\n\t\treturn xResults;\n\t}\n\trenderMemoryOptimizedFloat() {\n\t\tconst pixels = this.readMemoryOptimizedFloatPixelsToFloat32Array();\n\t\tconst [xMax] = this.output;\n\t\treturn pixels.subarray(0, xMax);\n\t}\n\trender2DFloat() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax] = this.output;\n\t\tconst yResults = new Array(yMax);\n\t\tlet i = 0;\n\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\tconst xResults = new Float32Array(xMax);\n\t\t\tfor (let x = 0; x < xMax; x++) {\n\t\t\t\txResults[x] = pixels[i];\n\t\t\t\ti += 4;\n\t\t\t}\n\t\t\tyResults[y] = xResults;\n\t\t}\n\t\treturn yResults;\n\t}\n\trenderMemoryOptimized2DFloat() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax] = this.output;\n\t\tconst yResults = new Array(yMax);\n\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\tconst offset = y * xMax;\n\t\t\tyResults[y] = pixels.subarray(offset, offset + xMax);\n\t\t}\n\t\treturn yResults;\n\t}\n\trender3DFloat() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax, zMax] = this.output;\n\t\tconst zResults = new Array(zMax);\n\t\tlet i = 0;\n\t\tfor (let z = 0; z < zMax; z++) {\n\t\t\tconst yResults = new Array(yMax);\n\t\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\t\tconst xResults = new Float32Array(xMax);\n\t\t\t\tfor (let x = 0; x < xMax; x++) {\n\t\t\t\t\txResults[x] = pixels[i];\n\t\t\t\t\ti += 4;\n\t\t\t\t}\n\t\t\t\tyResults[y] = xResults;\n\t\t\t}\n\t\t\tzResults[z] = yResults;\n\t\t}\n\t\treturn zResults;\n\t}\n\trenderMemoryOptimized3DFloat() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax, zMax] = this.output;\n\t\tconst zResults = new Array(zMax);\n\t\tfor (let z = 0; z < zMax; z++) {\n\t\t\tconst yResults = new Array(yMax);\n\t\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\t\tconst offset = (z * yMax * xMax) + (y * xMax);\n\t\t\t\tyResults[y] = pixels.subarray(offset, offset + xMax);\n\t\t\t}\n\t\t\tzResults[z] = yResults;\n\t\t}\n\t\treturn zResults;\n\t}\n\trenderArray2() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax] = this.output;\n\t\tconst xResults = new Array(xMax);\n\t\tconst xResultsMax = xMax * 4;\n\t\tlet i = 0;\n\t\tfor (let x = 0; x < xResultsMax; x += 4) {\n\t\t\txResults[i++] = pixels.subarray(x, x + 2);\n\t\t}\n\t\treturn xResults;\n\t}\n\trender2DArray2() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax] = this.output;\n\t\tconst yResults = new Array(yMax);\n\t\tconst XResultsMax = xMax * 4;\n\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\tconst xResults = new Array(xMax);\n\t\t\tlet i = 0;\n\t\t\tfor (let x = 0; x < XResultsMax; x += 4) {\n\t\t\t\txResults[i++] = pixels.subarray(x, x + 2);\n\t\t\t}\n\t\t\tyResults[y] = xResults;\n\t\t}\n\t\treturn yResults;\n\t}\n\trender3DArray2() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax, zMax] = this.output;\n\t\tconst xResultsMax = xMax * 4;\n\t\tconst zResults = new Array(zMax);\n\t\tfor (let z = 0; z < zMax; z++) {\n\t\t\tconst yResults = new Array(yMax);\n\t\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\t\tconst xResults = new Array(xMax);\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (let x = 0; x < xResultsMax; x += 4) {\n\t\t\t\t\txResults[i++] = pixels.subarray(x, x + 2);\n\t\t\t\t}\n\t\t\t\tyResults[y] = xResults;\n\t\t\t}\n\t\t\tzResults[z] = yResults;\n\t\t}\n\t\treturn zResults;\n\t}\n\trenderArray3() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax] = this.output;\n\t\tconst xResults = new Array(xMax);\n\t\tconst xResultsMax = xMax * 4;\n\t\tlet i = 0;\n\t\tfor (let x = 0; x < xResultsMax; x += 4) {\n\t\t\txResults[i++] = pixels.subarray(x, x + 3);\n\t\t}\n\t\treturn xResults;\n\t}\n\trender2DArray3() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax] = this.output;\n\t\tconst xMaxResults = xMax * 4;\n\t\tconst yResults = new Array(yMax);\n\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\tconst xResults = new Array(xMax);\n\t\t\tlet i = 0;\n\t\t\tfor (let x = 0; x < xMaxResults; x += 4) {\n\t\t\t\txResults[i++] = pixels.subarray(x, x + 3);\n\t\t\t}\n\t\t\tyResults[y] = xResults;\n\t\t}\n\t\treturn yResults;\n\t}\n\trender3DArray3() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax, zMax] = this.output;\n\t\tconst xMaxResults = xMax * 4;\n\t\tconst zResults = new Array(zMax);\n\t\tfor (let z = 0; z < zMax; z++) {\n\t\t\tconst yResults = new Array(yMax);\n\t\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\t\tconst xResults = new Array(xMax);\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (let x = 0; x < xMaxResults; x += 4) {\n\t\t\t\t\txResults[i++] = pixels.subarray(x, x + 3);\n\t\t\t\t}\n\t\t\t\tyResults[y] = xResults;\n\t\t\t}\n\t\t\tzResults[z] = yResults;\n\t\t}\n\t\treturn zResults;\n\t}\n\trenderArray4() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax] = this.output;\n\t\tconst xResults = new Array(xMax);\n\t\tconst xResultsMax = xMax * 4;\n\t\tlet i = 0;\n\t\tfor (let x = 0; x < xResultsMax; x += 4) {\n\t\t\txResults[i++] = pixels.subarray(x, x + 4);\n\t\t}\n\t\treturn xResults;\n\t}\n\trender2DArray4() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax] = this.output;\n\t\tconst xMaxResult = xMax * 4;\n\t\tconst yResults = new Array(yMax);\n\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\tconst xResults = new Array(xMax);\n\t\t\tlet i = 0;\n\t\t\tfor (let x = 0; x < xMaxResult; x += 4) {\n\t\t\t\txResults[i++] = pixels.subarray(x, x + 4);\n\t\t\t}\n\t\t\tyResults[y] = xResults;\n\t\t}\n\t\treturn yResults;\n\t}\n\trender3DArray4() {\n\t\tconst pixels = this.readFloatPixelsToFloat32Array();\n\t\tconst [xMax, yMax, zMax] = this.output;\n\t\tconst xResultsMap = xMax * 4;\n\t\tconst zResults = new Array(zMax);\n\t\tfor (let z = 0; z < zMax; z++) {\n\t\t\tconst yResults = new Array(yMax);\n\t\t\tfor (let y = 0; y < yMax; y++) {\n\t\t\t\tconst xResults = new Array(xMax);\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (let x = 0; x < xResultsMap; x += 4) {\n\t\t\t\t\txResults[i++] = pixels.subarray(x, x + 4);\n\t\t\t\t}\n\t\t\t\tyResults[y] = xResults;\n\t\t\t}\n\t\t\tzResults[z] = yResults;\n\t\t}\n\t\treturn zResults;\n\t}\n\tgetPixels() {\n\t\tconst {\n\t\t\tcontext: gl,\n\t\t\toutput\n\t\t} = this;\n\t\tconst [width, height] = output;\n\t\tconst pixels = new Uint8Array(width * height * 4);\n\t\tgl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\t\treturn pixels;\n\t}\n}\n\nconst renderStrategy = Object.freeze({\n\tPackedPixelToUint8Array: Symbol('PackedPixelToUint8Array'),\n\tPackedPixelToFloat: Symbol('PackedPixelToFloat'),\n\tPackedPixelTo2DFloat: Symbol('PackedPixelTo2DFloat'),\n\tPackedPixelTo3DFloat: Symbol('PackedPixelTo3DFloat'),\n\tPackedTexture: Symbol('PackedTexture'),\n\tFloatPixelToFloat32Array: Symbol('FloatPixelToFloat32Array'),\n\tFloatPixelToFloat: Symbol('FloatPixelToFloat'),\n\tFloatPixelTo2DFloat: Symbol('FloatPixelTo2DFloat'),\n\tFloatPixelTo3DFloat: Symbol('FloatPixelTo3DFloat'),\n\tFloatPixelToArray2: Symbol('FloatPixelToArray2'),\n\tFloatPixelTo2DArray2: Symbol('FloatPixelTo2DArray2'),\n\tFloatPixelTo3DArray2: Symbol('FloatPixelTo3DArray2'),\n\tFloatPixelToArray3: Symbol('FloatPixelToArray3'),\n\tFloatPixelTo2DArray3: Symbol('FloatPixelTo2DArray3'),\n\tFloatPixelTo3DArray3: Symbol('FloatPixelTo3DArray3'),\n\tFloatPixelToArray4: Symbol('FloatPixelToArray4'),\n\tFloatPixelTo2DArray4: Symbol('FloatPixelTo2DArray4'),\n\tFloatPixelTo3DArray4: Symbol('FloatPixelTo3DArray4'),\n\tFloatTexture: Symbol('FloatTexture'),\n\tMemoryOptimizedFloatPixelToMemoryOptimizedFloat: Symbol('MemoryOptimizedFloatPixelToFloat'),\n\tMemoryOptimizedFloatPixelToMemoryOptimized2DFloat: Symbol('MemoryOptimizedFloatPixelTo2DFloat'),\n\tMemoryOptimizedFloatPixelToMemoryOptimized3DFloat: Symbol('MemoryOptimizedFloatPixelTo3DFloat'),\n});\n\nconst typeMap = {\n\tint: 'Integer',\n\tfloat: 'Number',\n\tvec2: 'Array(2)',\n\tvec3: 'Array(3)',\n\tvec4: 'Array(4)',\n};\n\nmodule.exports = {\n\tGLKernel,\n\trenderStrategy\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/gl-kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/headless-gl/kernel.js":
/*!***************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/headless-gl/kernel.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const getContext = __webpack_require__(/*! gl */ \"./node_modules/gl/browser_index.js\");\nconst {\n\tWebGLKernel\n} = __webpack_require__(/*! ../web-gl/kernel */ \"./node_modules/gpu.js/src/backend/web-gl/kernel.js\");\n\nlet isSupported = null;\nlet testCanvas = null;\nlet testContext = null;\nlet testExtensions = null;\nlet features = null;\n\nclass HeadlessGLKernel extends WebGLKernel {\n\tstatic get isSupported() {\n\t\tif (isSupported !== null) return isSupported;\n\t\tthis.setupFeatureChecks();\n\t\tisSupported = testContext !== null;\n\t\treturn isSupported;\n\t}\n\n\tstatic setupFeatureChecks() {\n\t\ttestCanvas = null;\n\t\ttestExtensions = null;\n\t\tif (typeof getContext !== 'function') return;\n\t\ttry { // just in case, edge cases\n\t\t\ttestContext = getContext(2, 2, {\n\t\t\t\tpreserveDrawingBuffer: true\n\t\t\t});\n\t\t\tif (!testContext || !testContext.getExtension) return;\n\t\t\ttestExtensions = {\n\t\t\t\tSTACKGL_resize_drawingbuffer: testContext.getExtension('STACKGL_resize_drawingbuffer'),\n\t\t\t\tSTACKGL_destroy_context: testContext.getExtension('STACKGL_destroy_context'),\n\t\t\t\tOES_texture_float: testContext.getExtension('OES_texture_float'),\n\t\t\t\tOES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n\t\t\t\tOES_element_index_uint: testContext.getExtension('OES_element_index_uint'),\n\t\t\t\tWEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),\n\t\t\t};\n\t\t\tfeatures = this.getFeatures();\n\t\t} catch (e) {}\n\t}\n\n\tstatic isContextMatch(context) {\n\t\ttry {\n\t\t\treturn context.getParameter(context.RENDERER) === 'ANGLE';\n\t\t} catch (e) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tstatic getFeatures() {\n\t\tconst isDrawBuffers = this.getIsDrawBuffers();\n\t\treturn Object.freeze({\n\t\t\tisFloatRead: this.getIsFloatRead(),\n\t\t\tisIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n\t\t\tisTextureFloat: this.getIsTextureFloat(),\n\t\t\tisDrawBuffers,\n\t\t\tkernelMap: isDrawBuffers\n\t\t});\n\t}\n\n\tstatic getIsTextureFloat() {\n\t\treturn Boolean(testExtensions.OES_texture_float);\n\t}\n\n\tstatic getIsDrawBuffers() {\n\t\treturn Boolean(testExtensions.WEBGL_draw_buffers);\n\t}\n\n\tstatic get testCanvas() {\n\t\treturn testCanvas;\n\t}\n\n\tstatic get testContext() {\n\t\treturn testContext;\n\t}\n\n\tstatic get features() {\n\t\treturn features;\n\t}\n\n\tinitCanvas() {\n\t\treturn {};\n\t}\n\n\tinitContext() {\n\t\tconst context = getContext(2, 2, {\n\t\t\tpreserveDrawingBuffer: true\n\t\t});\n\t\treturn context;\n\t}\n\n\tinitExtensions() {\n\t\tthis.extensions = {\n\t\t\tSTACKGL_resize_drawingbuffer: this.context.getExtension('STACKGL_resize_drawingbuffer'),\n\t\t\tSTACKGL_destroy_context: this.context.getExtension('STACKGL_destroy_context'),\n\t\t\tOES_texture_float: this.context.getExtension('OES_texture_float'),\n\t\t\tOES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n\t\t\tOES_element_index_uint: this.context.getExtension('OES_element_index_uint'),\n\t\t\tWEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),\n\t\t};\n\t}\n\n\tdestroyExtensions() {\n\t\tthis.extensions.STACKGL_resize_drawingbuffer = null;\n\t\tthis.extensions.STACKGL_destroy_context = null;\n\t\tthis.extensions.OES_texture_float = null;\n\t\tthis.extensions.OES_texture_float_linear = null;\n\t\tthis.extensions.OES_element_index_uint = null;\n\t\tthis.extensions.WEBGL_draw_buffers = null;\n\t}\n\n\tstatic destroyContext(context) {\n\t\tconst extension = context.getExtension('STACKGL_destroy_context');\n\t\tif (extension && extension.destroy) {\n\t\t\textension.destroy();\n\t\t}\n\t}\n}\n\nmodule.exports = {\n\tHeadlessGLKernel\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/headless-gl/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/kernel.js":
/*!***************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/kernel.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tutils\n} = __webpack_require__(/*! ../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tInput\n} = __webpack_require__(/*! ../input */ \"./node_modules/gpu.js/src/input.js\");\n\nclass Kernel {\n\t/**\n\t * @type {Boolean}\n\t */\n\tstatic get isSupported() {\n\t\tthrow new Error(`\"isSupported\" not implemented on ${ this.name }`);\n\t}\n\n\t/**\n\t * @type {Boolean}\n\t */\n\tstatic isContextMatch(context) {\n\t\tthrow new Error(`\"isContextMatch\" not implemented on ${ this.name }`);\n\t}\n\n\tstatic getFeatures() {\n\t\tthrow new Error(`\"getFeatures\" not implemented on ${ this.name }`);\n\t}\n\n\tstatic destroyContext(context) {\n\t\tthrow new Error(`\"destroyContext\" called on ${ this.name }`);\n\t}\n\n\tstatic nativeFunctionArguments() {\n\t\tthrow new Error(`\"nativeFunctionArguments\" called on ${ this.name }`);\n\t}\n\n\tstatic nativeFunctionReturnType() {\n\t\tthrow new Error(`\"nativeFunctionReturnType\" called on ${ this.name }`);\n\t}\n\n\tstatic combineKernels() {\n\t\tthrow new Error(`\"combineKernels\" called on ${ this.name }`);\n\t}\n\n\t/**\n\t *\n\t * @param {string|object} source\n\t * @param [settings]\n\t */\n\tconstructor(source, settings) {\n\t\tif (typeof source !== 'object') {\n\t\t\tif (typeof source !== 'string') {\n\t\t\t\tthrow new Error('source not a string');\n\t\t\t}\n\t\t\tif (!utils.isFunctionString(source)) {\n\t\t\t\tthrow new Error('source not a function string');\n\t\t\t}\n\t\t}\n\n\t\tthis.onRequestFallback = null;\n\n\t\t/**\n\t\t * Name of the arguments found from parsing source argument\n\t\t * @type {String[]}\n\t\t */\n\t\tthis.argumentNames = typeof source === 'string' ? utils.getArgumentNamesFromString(source) : null;\n\t\tthis.argumentTypes = null;\n\t\tthis.argumentSizes = null;\n\t\tthis.argumentBitRatios = null;\n\t\tthis.argumentsLength = 0;\n\t\tthis.constantsLength = 0;\n\n\n\t\t/**\n\t\t * The function source\n\t\t * @type {String}\n\t\t */\n\t\tthis.source = source;\n\n\t\t/**\n\t\t * The size of the kernel's output\n\t\t * @type {Number[]}\n\t\t */\n\t\tthis.output = null;\n\n\t\t/**\n\t\t * Debug mode\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.debug = false;\n\n\t\t/**\n\t\t * Graphical mode\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.graphical = false;\n\n\t\t/**\n\t\t * Maximum loops when using argument values to prevent infinity\n\t\t * @type {Number}\n\t\t */\n\t\tthis.loopMaxIterations = 0;\n\n\t\t/**\n\t\t * Constants used in kernel via `this.constants`\n\t\t * @type {Object}\n\t\t */\n\t\tthis.constants = null;\n\t\tthis.constantTypes = null;\n\t\tthis.constantBitRatios = null;\n\t\tthis.hardcodeConstants = false;\n\n\t\t/**\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.canvas = null;\n\n\t\t/**\n\t\t *\n\t\t * @type {Object}\n\t\t */\n\t\tthis.context = null;\n\n\t\t/**\n\t\t *\n\t\t * @type {GPU}\n\t\t */\n\t\tthis.gpu = null;\n\n\t\t/**\n\t\t *\n\t\t * @type {IGPUFunction[]}\n\t\t */\n\t\tthis.functions = null;\n\n\t\t/**\n\t\t *\n\t\t * @type {IGPUNativeFunction[]}\n\t\t */\n\t\tthis.nativeFunctions = null;\n\n\t\t/**\n\t\t *\n\t\t * @type {ISubKernel[]}\n\t\t */\n\t\tthis.subKernels = null;\n\n\t\t/**\n\t\t *\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.validate = true;\n\n\t\t/**\n\t\t * Enforces kernel to write to a new array or texture on run\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.immutable = false;\n\n\t\t/**\n\t\t * Enforces kernel to write to a texture on run\n\t\t * @type {Boolean}\n\t\t */\n\t\tthis.pipeline = false;\n\t\tthis.precision = null;\n\n\t\tthis.plugins = null;\n\n\t\tthis.returnType = null;\n\t\tthis.leadingReturnStatement = null;\n\t\tthis.followingReturnStatement = null;\n\t}\n\n\tmergeSettings(settings) {\n\t\tfor (let p in settings) {\n\t\t\tif (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;\n\t\t\tif (p === 'output') {\n\t\t\t\tif (!Array.isArray(settings.output)) {\n\t\t\t\t\tthis.setOutput(settings.output); // Flatten output object\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (p === 'functions' && typeof settings.functions[0] === 'function') {\n\t\t\t\tthis.functions = settings.functions.map(source => utils.functionToIFunction(source));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis[p] = settings[p];\n\t\t}\n\n\t\tif (!this.canvas) this.canvas = this.initCanvas();\n\t\tif (!this.context) this.context = this.initContext();\n\t\tif (!this.plugins) this.plugins = this.initPlugins(settings);\n\t}\n\t/**\n\t * @desc Builds the Kernel, by compiling Fragment and Vertical Shaders,\n\t * and instantiates the program.\n\t * @abstract\n\t */\n\tbuild() {\n\t\tthrow new Error(`\"build\" not defined on ${ this.constructor.name }`);\n\t}\n\n\t/**\n\t * @desc Run the kernel program, and send the output to renderOutput\n\t * <p> This method calls a helper method *renderOutput* to return the result. </p>\n\t * @returns {Float32Array|Float32Array[]|Float32Array[][]|void} Result The final output of the program, as float, and as Textures for reuse.\n\t * @abstract\n\t */\n\trun() {\n\t\tthrow new Error(`\"run\" not defined on ${ this.constructor.name }`)\n\t}\n\n\t/**\n\t * @abstract\n\t * @return {Object}\n\t */\n\tinitCanvas() {\n\t\tthrow new Error(`\"initCanvas\" not defined on ${ this.constructor.name }`);\n\t}\n\n\t/**\n\t * @abstract\n\t * @return {Object}\n\t */\n\tinitContext() {\n\t\tthrow new Error(`\"initContext\" not defined on ${ this.constructor.name }`);\n\t}\n\n\t/**\n\t * @param {IFunctionSettings} settings\n\t * @return {Object};\n\t * @abstract\n\t */\n\tinitPlugins(settings) {\n\t\tthrow new Error(`\"initPlugins\" not defined on ${ this.constructor.name }`);\n\t}\n\n\t/**\n\t * @desc Setup the parameter types for the parameters\n\t * supplied to the Kernel function\n\t *\n\t * @param {IArguments} args - The actual parameters sent to the Kernel\n\t */\n\tsetupArguments(args) {\n\t\tif (!this.argumentTypes) {\n\t\t\tthis.argumentTypes = [];\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\tconst argType = utils.getVariableType(args[i]);\n\t\t\t\tthis.argumentTypes.push(argType === 'Integer' ? 'Number' : argType);\n\t\t\t}\n\t\t}\n\n\t\t// setup sizes\n\t\tthis.argumentSizes = new Array(args.length);\n\t\tthis.argumentBitRatios = new Int32Array(args.length);\n\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tconst arg = args[i];\n\t\t\tthis.argumentSizes[i] = arg.constructor === Input ? arg.size : null;\n\t\t\tthis.argumentBitRatios[i] = this.getBitRatio(arg);\n\t\t}\n\n\t\tif (this.argumentNames.length !== args.length) {\n\t\t\tthrow new Error(`arguments are miss-aligned`);\n\t\t}\n\t}\n\n\t/**\n\t * Setup constants\n\t */\n\tsetupConstants() {\n\t\tthis.constantTypes = {};\n\t\tthis.constantBitRatios = {};\n\t\tif (this.constants) {\n\t\t\tfor (let p in this.constants) {\n\t\t\t\tthis.constantTypes[p] = utils.getVariableType(this.constants[p]);\n\t\t\t\tthis.constantBitRatios[p] = this.getBitRatio(this.constants[p]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @param flag\n\t * @returns {Kernel}\n\t */\n\tsetOptimizeFloatMemory(flag) {\n\t\tthis.optimizeFloatMemory = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Set output dimensions of the kernel function\n\t * @param {Array|Object} output - The output array to set the kernel output size to\n\t */\n\tsetOutput(output) {\n\t\tif (output.hasOwnProperty('x')) {\n\t\t\tif (output.hasOwnProperty('y')) {\n\t\t\t\tif (output.hasOwnProperty('z')) {\n\t\t\t\t\tthis.output = [output.x, output.y, output.z];\n\t\t\t\t} else {\n\t\t\t\t\tthis.output = [output.x, output.y];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.output = [output.x];\n\t\t\t}\n\t\t} else {\n\t\t\tthis.output = output;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Toggle debug mode\n\t * @param {Boolean} flag - true to enable debug\n\t */\n\tsetDebug(flag) {\n\t\tthis.debug = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Toggle graphical output mode\n\t * @param {Boolean} flag - true to enable graphical output\n\t */\n\tsetGraphical(flag) {\n\t\tthis.graphical = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Set the maximum number of loop iterations\n\t * @param {number} max - iterations count\n\t */\n\tsetLoopMaxIterations(max) {\n\t\tthis.loopMaxIterations = max;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Set Constants\n\t */\n\tsetConstants(constants) {\n\t\tthis.constants = constants;\n\t\treturn this;\n\t}\n\n\t/**\n\t *\n\t * @param {IFunction[]|KernelFunction[]} functions\n\t * @returns {Kernel}\n\t */\n\tsetFunctions(functions) {\n\t\tif (typeof functions[0] === 'function') {\n\t\t\tthis.functions = functions.map(source => utils.functionToIFunction(source));\n\t\t} else {\n\t\t\tthis.functions = functions;\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set writing to texture on/off\n\t * @param flag\n\t * @returns {Kernel}\n\t */\n\tsetPipeline(flag) {\n\t\tthis.pipeline = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set precision to 'unsigned' or 'single'\n\t * @param {String} flag 'unsigned' or 'single'\n\t * @returns {Kernel}\n\t */\n\tsetPrecision(flag) {\n\t\tthis.precision = flag;\n\t\treturn this;\n\t}\n\n\tsetOutputToTexture(flag) {\n\t\tutils.warnDeprecated('method', 'setOutputToTexture', 'setPipeline');\n\t\tthis.pipeline = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set to immutable\n\t * @param flag\n\t * @returns {Kernel}\n\t */\n\tsetImmutable(flag) {\n\t\tthis.immutable = flag;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Bind the canvas to kernel\n\t * @param {Object} canvas\n\t */\n\tsetCanvas(canvas) {\n\t\tthis.canvas = canvas;\n\t\treturn this;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @returns {Object}\n\t */\n\tgetCanvas() {\n\t\tutils.warnDeprecated('method', 'getCanvas');\n\t\treturn this.canvas;\n\t}\n\n\t/**\n\t * @deprecated\n\t * @returns {Object}\n\t */\n\tgetWebGl() {\n\t\tutils.warnDeprecated('method', 'getWebGl');\n\t\treturn this.context;\n\t}\n\n\t/**\n\t * @desc Bind the webGL instance to kernel\n\t * @param {WebGLRenderingContext} context - webGl instance to bind\n\t */\n\tsetContext(context) {\n\t\tthis.context = context;\n\t\treturn this;\n\t}\n\n\tsetArgumentTypes(argumentTypes) {\n\t\tthis.argumentTypes = argumentTypes;\n\t\treturn this;\n\t}\n\n\trequestFallback(args) {\n\t\tif (!this.onRequestFallback) {\n\t\t\tthrow new Error(`\"onRequestFallback\" not defined on ${ this.constructor.name }`);\n\t\t}\n\t\treturn this.onRequestFallback(args);\n\t}\n\n\t/**\n\t * @desc Validate settings\n\t * @abstract\n\t */\n\tvalidateSettings() {\n\t\tthrow new Error(`\"validateSettings\" not defined on ${ this.constructor.name }`);\n\t}\n\n\t/**\n\t * Run kernel in async mode\n\t * @returns {Promise<KernelOutput>}\n\t */\n\texec() {\n\t\tconst args = (arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments));\n\t\treturn new Promise((accept, reject) => {\n\t\t\ttry {\n\t\t\t\taccept(this.run.apply(this, args));\n\t\t\t} catch (e) {\n\t\t\t\treject(e);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @desc Add a sub kernel to the root kernel instance.\n\t * This is what `createKernelMap` uses.\n\t *\n\t * @param {ISubKernel} subKernel - function (as a String) of the subKernel to add\n\t */\n\taddSubKernel(subKernel) {\n\t\tif (this.subKernels === null) {\n\t\t\tthis.subKernels = [];\n\t\t}\n\t\tif (!subKernel.source) throw new Error('subKernel missing \"source\" property');\n\t\tif (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing \"property\" property');\n\t\tif (!subKernel.name) throw new Error('subKernel missing \"name\" property');\n\t\tthis.subKernels.push(subKernel);\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Destroys all memory associated with this kernel\n\t * @param {Boolean} removeCanvasReferences remove any associated canvas references?\n\t */\n\tdestroy(removeCanvasReferences) {\n\t\tthrow new Error(`\"destroy\" called on ${ this.constructor.name }`);\n\t}\n\n\t/**\n\t * bit storage ratio of source to target 'buffer', i.e. if 8bit array -> 32bit tex = 4\n\t * @param value\n\t * @returns {number}\n\t */\n\tgetBitRatio(value) {\n\t\tif (this.precision === 'single') {\n\t\t\t// 8 and 16 are upconverted to float32\n\t\t\treturn 4;\n\t\t} else if (Array.isArray(value[0])) {\n\t\t\treturn this.getBitRatio(value[0]);\n\t\t} else if (value.constructor === Input) {\n\t\t\treturn this.getBitRatio(value.value);\n\t\t}\n\t\tswitch (value.constructor) {\n\t\t\tcase Uint8Array:\n\t\t\tcase Int8Array:\n\t\t\t\treturn 1;\n\t\t\tcase Uint16Array:\n\t\t\tcase Int16Array:\n\t\t\t\treturn 2;\n\t\t\tcase Float32Array:\n\t\t\tcase Int32Array:\n\t\t\tdefault:\n\t\t\t\treturn 4;\n\t\t}\n\t}\n\n\t/**\n\t * @returns {number[]}\n\t */\n\tgetPixels() {\n\t\tthrow new Error(`\"getPixels\" called on ${ this.constructor.name }`);\n\t}\n\n\tcheckOutput() {\n\t\tif (!this.output || !Array.isArray(this.output)) throw new Error('kernel.output not an array');\n\t\tif (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');\n\t\tfor (let i = 0; i < this.output.length; i++) {\n\t\t\tif (isNaN(this.output[i]) || this.output[i] < 1) {\n\t\t\t\tthrow new Error(`${ this.constructor.name }.output[${ i }] incorrectly defined as \\`${ this.output[i] }\\`, needs to be numeric, and greater than 0`);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoJSON() {\n\t\tconst settings = {\n\t\t\toutput: this.output,\n\t\t\tthreadDim: this.threadDim,\n\t\t\tpipeline: this.pipeline,\n\t\t\targumentNames: this.argumentNames,\n\t\t\targumentsTypes: this.argumentTypes,\n\t\t\targumentsLength: this.argumentsLength,\n\t\t\tconstants: this.constants,\n\t\t\tconstantsLength: this.constantsLength,\n\t\t\tpluginNames: this.plugins ? this.plugins.map(plugin => plugin.name) : null,\n\t\t\treturnType: this.returnType,\n\t\t};\n\t\treturn {\n\t\t\tsettings\n\t\t};\n\t}\n}\n\nmodule.exports = {\n\tKernel\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl/fragment-shader.js":
/*!*******************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl/fragment-shader.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const fragmentShader = `__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n\tint channel = integerMod(index, 2);\n\tif (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n\tif (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n\treturn 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 encode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n\nmodule.exports = {\n\tfragmentShader\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl/fragment-shader.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl/function-node.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl/function-node.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tFunctionNode\n} = __webpack_require__(/*! ../function-node */ \"./node_modules/gpu.js/src/backend/function-node.js\");\n// Closure capture for the ast function, prevent collision with existing AST functions\n// The prefixes to use\nconst jsMathPrefix = 'Math.';\nconst localPrefix = 'this.';\n\n/**\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to toString its respective WebGL code\n * @extends FunctionNode\n * @returns the converted WebGL function string\n */\nclass WebGLFunctionNode extends FunctionNode {\n\tconstructor(source, settings) {\n\t\tsuper(source, settings);\n\t\tthis.fixIntegerDivisionAccuracy = null;\n\t\tif (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {\n\t\t\tthis.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;\n\t\t}\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for to its *named function*\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastFunctionExpression(ast, retArr) {\n\t\t// Setup function return type and name\n\t\tif (this.isRootKernel) {\n\t\t\tretArr.push('void');\n\t\t} else {\n\t\t\t// looking up return type, this is a little expensive, and can be avoided if returnType is set\n\t\t\tif (!this.returnType) {\n\t\t\t\tconst lastReturn = this.findLastReturn();\n\t\t\t\tif (lastReturn) {\n\t\t\t\t\tthis.returnType = this.getType(ast.body);\n\t\t\t\t\tif (this.returnType === 'LiteralInteger') {\n\t\t\t\t\t\tthis.returnType = 'Number';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst {\n\t\t\t\treturnType\n\t\t\t} = this;\n\t\t\tif (!returnType) {\n\t\t\t\tretArr.push('void');\n\t\t\t} else {\n\t\t\t\tconst type = typeMap[returnType];\n\t\t\t\tif (!type) {\n\t\t\t\t\tthrow new Error(`unknown type ${returnType}`);\n\t\t\t\t}\n\t\t\t\tretArr.push(type);\n\t\t\t}\n\t\t}\n\t\tretArr.push(' ');\n\t\tretArr.push(this.name);\n\t\tretArr.push('(');\n\n\t\tif (!this.isRootKernel) {\n\t\t\t// Arguments handling\n\t\t\tfor (let i = 0; i < this.argumentNames.length; ++i) {\n\t\t\t\tconst argumentName = this.argumentNames[i];\n\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tlet argumentType = this.getVariableType(argumentName);\n\t\t\t\tif (!argumentType || argumentType === 'LiteralInteger') {\n\t\t\t\t\targumentType = 'Number';\n\t\t\t\t}\n\t\t\t\tconst type = typeMap[argumentType];\n\t\t\t\tif (!type) {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', ast);\n\t\t\t\t}\n\t\t\t\tretArr.push(type);\n\t\t\t\tretArr.push(' ');\n\t\t\t\tretArr.push('user_');\n\t\t\t\tretArr.push(argumentName);\n\t\t\t}\n\t\t}\n\n\t\t// Function opening\n\t\tretArr.push(') {\\n');\n\n\t\t// Body statement iteration\n\t\tfor (let i = 0; i < ast.body.body.length; ++i) {\n\t\t\tthis.astGeneric(ast.body.body[i], retArr);\n\t\t\tretArr.push('\\n');\n\t\t}\n\n\t\t// Function closing\n\t\tretArr.push('}\\n');\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for to *return* statement\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastReturnStatement(ast, retArr) {\n\t\tif (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);\n\t\tconst type = this.getType(ast.argument);\n\n\t\tconst result = [];\n\n\t\tif (!this.returnType) {\n\t\t\tif (this.isRootKernel) {\n\t\t\t\tthis.returnType = 'Number';\n\t\t\t} else {\n\t\t\t\tthis.returnType = type;\n\t\t\t}\n\t\t}\n\n\t\tswitch (this.returnType) {\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Number':\n\t\t\tcase 'Float':\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tresult.push('float(');\n\t\t\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\t\t\tresult.push(')');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LiteralInteger':\n\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\t\t\tthis.popState('casting-to-float');\n\n\t\t\t\t\t\t// Running astGeneric forces the LiteralInteger to pick a type, and here, if we are returning a float, yet\n\t\t\t\t\t\t// the LiteralInteger has picked to be an integer because of constraints on it we cast it to float.\n\t\t\t\t\t\tif (this.getType(ast) === 'Integer') {\n\t\t\t\t\t\t\tresult.unshift('float(');\n\t\t\t\t\t\t\tresult.push(')');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Integer':\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\t\tresult.push('int(');\n\t\t\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\t\t\tresult.push(')');\n\t\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LiteralInteger':\n\t\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Array(4)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Input':\n\t\t\t\tthis.astGeneric(ast.argument, result);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow this.astErrorOutput(`unhandled return type ${this.returnType}`, ast);\n\t\t}\n\n\t\tif (this.isRootKernel) {\n\t\t\tretArr.push(`kernelResult = ${ result.join('') };`);\n\t\t\tretArr.push('return;');\n\t\t} else if (this.isSubKernel) {\n\t\t\tretArr.push(`subKernelResult_${ this.name } = ${ result.join('') };`);\n\t\t\tretArr.push(`return subKernelResult_${ this.name };`);\n\t\t} else {\n\t\t\tretArr.push(`return ${ result.join('') };`);\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *literal value*\n\t *\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t *\n\t * @returns {Array} the append retArr\n\t */\n\tastLiteral(ast, retArr) {\n\t\t// Reject non numeric literals\n\t\tif (isNaN(ast.value)) {\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'Non-numeric literal not supported : ' + ast.value,\n\t\t\t\tast\n\t\t\t);\n\t\t}\n\n\t\tif (Number.isInteger(ast.value)) {\n\t\t\tif (this.isState('in-for-loop-init') || this.isState('casting-to-integer')) {\n\t\t\t\tthis.literalTypes[`${ast.start},${ast.end}`] = 'Integer';\n\t\t\t\tretArr.push(`${ast.value}`);\n\t\t\t} else if (this.isState('casting-to-float')) {\n\t\t\t\tthis.literalTypes[`${ast.start},${ast.end}`] = 'Number';\n\t\t\t\tretArr.push(`${ast.value}.0`);\n\t\t\t} else {\n\t\t\t\tthis.literalTypes[`${ast.start},${ast.end}`] = 'Number';\n\t\t\t\tretArr.push(`${ast.value}.0`);\n\t\t\t}\n\t\t} else if (this.isState('casting-to-integer')) {\n\t\t\tthis.literalTypes[`${ast.start},${ast.end}`] = 'Integer';\n\t\t\tretArr.push(parseInt(ast.raw));\n\t\t} else {\n\t\t\tthis.literalTypes[`${ast.start},${ast.end}`] = 'Number';\n\t\t\tretArr.push(`${ast.value}`);\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *binary* expression\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastBinaryExpression(ast, retArr) {\n\t\tif (ast.operator === '%') {\n\t\t\tretArr.push('mod(');\n\n\t\t\tconst leftType = this.getType(ast.left);\n\t\t\tif (leftType === 'Integer') {\n\t\t\t\tretArr.push('float(');\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t} else if (leftType === 'LiteralInteger') {\n\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\tthis.popState('casting-to-float');\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t}\n\n\t\t\tretArr.push(',');\n\t\t\tconst rightType = this.getType(ast.right);\n\n\t\t\tif (rightType === 'Integer') {\n\t\t\t\tretArr.push('float(');\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t} else if (rightType === 'LiteralInteger') {\n\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\tthis.popState('casting-to-float');\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t}\n\t\t\tretArr.push(')');\n\t\t\treturn retArr;\n\t\t}\n\n\t\tretArr.push('(');\n\t\tif (this.fixIntegerDivisionAccuracy && ast.operator === '/') {\n\t\t\tretArr.push('div_with_int_check(');\n\n\t\t\tswitch (this.getType(ast.left)) {\n\t\t\t\tcase 'Integer':\n\t\t\t\t\tretArr.push('float(');\n\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LiteralInteger':\n\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t}\n\n\t\t\tretArr.push(', ');\n\n\t\t\tswitch (this.getType(ast.right)) {\n\t\t\t\tcase 'Integer':\n\t\t\t\t\tretArr.push('float(');\n\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LiteralInteger':\n\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t}\n\n\t\t\tretArr.push(')');\n\t\t} else {\n\t\t\tconst leftType = this.getType(ast.left) || 'Number';\n\t\t\tconst rightType = this.getType(ast.right) || 'Number';\n\t\t\tif (!leftType || !rightType) {\n\t\t\t\tthrow this.astErrorOutput(`Unhandled binary expression`, ast);\n\t\t\t}\n\t\t\tconst key = leftType + ' & ' + rightType;\n\t\t\tswitch (key) {\n\t\t\t\tcase 'Integer & Integer':\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Number & Float':\n\t\t\t\tcase 'Float & Number':\n\t\t\t\tcase 'Float & Float':\n\t\t\t\tcase 'Number & Number':\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LiteralInteger & LiteralInteger':\n\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Integer & Float':\n\t\t\t\tcase 'Integer & Number':\n\t\t\t\t\tif (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {\n\t\t\t\t\t\t// if right value is actually a float, don't loose that information, cast left to right rather than the usual right to left\n\t\t\t\t\t\tif (!Number.isInteger(ast.right.value)) {\n\t\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\t\tretArr.push('float(');\n\t\t\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\tif (ast.right.type === 'Literal') {\n\t\t\t\t\t\tconst literalResult = [];\n\t\t\t\t\t\tthis.astGeneric(ast.right, literalResult);\n\t\t\t\t\t\tconst literalType = this.getType(ast.right);\n\t\t\t\t\t\tif (literalType === 'Integer') {\n\t\t\t\t\t\t\tretArr.push(literalResult.join(''));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow this.astErrorOutput(`Unhandled binary expression with literal`, ast);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tretArr.push('int(');\n\t\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t}\n\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Integer & LiteralInteger':\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Number & Integer':\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\tretArr.push('float(');\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Float & LiteralInteger':\n\t\t\t\tcase 'Number & LiteralInteger':\n\t\t\t\t\tif (this.isState('in-for-loop-test')) {\n\t\t\t\t\t\tretArr.push('int(');\n\t\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LiteralInteger & Float':\n\t\t\t\tcase 'LiteralInteger & Number':\n\t\t\t\t\tif (this.isState('in-for-loop-test') || this.isState('in-for-loop-init') || this.isState('casting-to-integer')) {\n\t\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\t\tretArr.push('int(');\n\t\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'LiteralInteger & Integer':\n\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Boolean & Boolean':\n\t\t\t\t\tthis.astGeneric(ast.left, retArr);\n\t\t\t\t\tretArr.push(operatorMap[ast.operator] || ast.operator);\n\t\t\t\t\tthis.astGeneric(ast.right, retArr);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow this.astErrorOutput(`Unhandled binary expression between ${key}`, ast);\n\t\t\t}\n\t\t}\n\n\t\tretArr.push(')');\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *identifier* expression\n\t * @param {Object} idtNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastIdentifierExpression(idtNode, retArr) {\n\t\tif (idtNode.type !== 'Identifier') {\n\t\t\tthrow this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);\n\t\t}\n\n\t\tconst type = this.getType(idtNode);\n\n\t\tif (idtNode.name === 'Infinity') {\n\t\t\t// https://stackoverflow.com/a/47543127/1324039\n\t\t\tretArr.push('3.402823466e+38');\n\t\t} else if (type === 'Boolean') {\n\t\t\tif (this.argumentNames.indexOf(idtNode.name) > -1) {\n\t\t\t\tretArr.push(`bool(user_${idtNode.name})`);\n\t\t\t} else {\n\t\t\t\tretArr.push(`user_${idtNode.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconst userArgumentName = this.getKernelArgumentName(idtNode.name);\n\t\t\tif (userArgumentName) {\n\t\t\t\tretArr.push(`user_${userArgumentName}`);\n\t\t\t} else {\n\t\t\t\tretArr.push(`user_${idtNode.name}`);\n\t\t\t}\n\t\t}\n\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *for-loop* expression\n\t * @param {Object} forNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed webgl string\n\t */\n\tastForStatement(forNode, retArr) {\n\t\tif (forNode.type !== 'ForStatement') {\n\t\t\tthrow this.astErrorOutput('Invalid for statement', forNode);\n\t\t}\n\n\t\tconst initArr = [];\n\t\tconst testArr = [];\n\t\tconst updateArr = [];\n\t\tconst bodyArr = [];\n\t\tlet isSafe = null;\n\n\t\tif (forNode.init) {\n\t\t\tthis.pushState('in-for-loop-init');\n\t\t\tthis.astGeneric(forNode.init, initArr);\n\t\t\tfor (let i = 0; i < initArr.length; i++) {\n\t\t\t\tif (initArr[i].includes && initArr[i].includes(',')) {\n\t\t\t\t\tisSafe = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.popState('in-for-loop-init');\n\t\t} else {\n\t\t\tisSafe = false;\n\t\t}\n\n\t\tif (forNode.test) {\n\t\t\tthis.pushState('in-for-loop-test');\n\t\t\tthis.astGeneric(forNode.test, testArr);\n\t\t\tthis.popState('in-for-loop-test');\n\t\t} else {\n\t\t\tisSafe = false;\n\t\t}\n\n\t\tif (forNode.update) {\n\t\t\tthis.astGeneric(forNode.update, updateArr);\n\t\t} else {\n\t\t\tisSafe = false;\n\t\t}\n\n\t\tif (forNode.body) {\n\t\t\tthis.pushState('loop-body');\n\t\t\tthis.astGeneric(forNode.body, bodyArr);\n\t\t\tthis.popState('loop-body');\n\t\t}\n\n\t\t// have all parts, now make them safe\n\t\tif (isSafe === null) {\n\t\t\tisSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);\n\t\t}\n\n\t\tif (isSafe) {\n\t\t\tretArr.push(`for (${initArr.join('')};${testArr.join('')};${updateArr.join('')}){\\n`);\n\t\t\tretArr.push(bodyArr.join(''));\n\t\t\tretArr.push('}\\n');\n\t\t} else {\n\t\t\tconst iVariableName = this.getInternalVariableName('safeI');\n\t\t\tif (initArr.length > 0) {\n\t\t\t\tretArr.push(initArr.join(''), ';\\n');\n\t\t\t}\n\t\t\tretArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n\t\t\tif (testArr.length > 0) {\n\t\t\t\tretArr.push(`if (!${testArr.join('')}) break;\\n`);\n\t\t\t}\n\t\t\tretArr.push(bodyArr.join(''));\n\t\t\tretArr.push(`\\n${updateArr.join('')};`);\n\t\t\tretArr.push('}\\n');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *while* loop\n\t * @param {Object} whileNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed webgl string\n\t */\n\tastWhileStatement(whileNode, retArr) {\n\t\tif (whileNode.type !== 'WhileStatement') {\n\t\t\tthrow this.astErrorOutput('Invalid while statement', whileNode);\n\t\t}\n\n\t\tconst iVariableName = this.getInternalVariableName('safeI');\n\t\tretArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n\t\tretArr.push('if (!');\n\t\tthis.astGeneric(whileNode.test, retArr);\n\t\tretArr.push(') break;\\n');\n\t\tthis.astGeneric(whileNode.body, retArr);\n\t\tretArr.push('}\\n');\n\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *do while* loop\n\t * @param {Object} doWhileNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the parsed webgl string\n\t */\n\tastDoWhileStatement(doWhileNode, retArr) {\n\t\tif (doWhileNode.type !== 'DoWhileStatement') {\n\t\t\tthrow this.astErrorOutput('Invalid while statement', doWhileNode);\n\t\t}\n\n\t\tconst iVariableName = this.getInternalVariableName('safeI');\n\t\tretArr.push(`for (int ${iVariableName}=0;${iVariableName}<LOOP_MAX;${iVariableName}++){\\n`);\n\t\tthis.astGeneric(doWhileNode.body, retArr);\n\t\tretArr.push('if (!');\n\t\tthis.astGeneric(doWhileNode.test, retArr);\n\t\tretArr.push(') break;\\n');\n\t\tretArr.push('}\\n');\n\n\t\treturn retArr;\n\t}\n\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Assignment* Expression\n\t * @param {Object} assNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastAssignmentExpression(assNode, retArr) {\n\t\tif (assNode.operator === '%=') {\n\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\tretArr.push('=');\n\t\t\tretArr.push('mod(');\n\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\tretArr.push(',');\n\t\t\tthis.astGeneric(assNode.right, retArr);\n\t\t\tretArr.push(')');\n\t\t} else {\n\t\t\tconst leftType = this.getType(assNode.left);\n\t\t\tconst rightType = this.getType(assNode.right);\n\t\t\tthis.astGeneric(assNode.left, retArr);\n\t\t\tretArr.push(assNode.operator);\n\t\t\tif (leftType !== 'Integer' && rightType === 'Integer') {\n\t\t\t\tretArr.push('float(');\n\t\t\t\tthis.astGeneric(assNode.right, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(assNode.right, retArr);\n\t\t\t}\n\t\t\treturn retArr;\n\t\t}\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Block* statement\n\t * @param {Object} bNode - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastBlockStatement(bNode, retArr) {\n\t\tif (this.isState('loop-body')) {\n\t\t\tthis.pushState('block-body'); // this prevents recursive removal of braces\n\t\t\tfor (let i = 0; i < bNode.body.length; i++) {\n\t\t\t\tthis.astGeneric(bNode.body[i], retArr);\n\t\t\t}\n\t\t\tthis.popState('block-body');\n\t\t} else {\n\t\t\tretArr.push('{\\n');\n\t\t\tfor (let i = 0; i < bNode.body.length; i++) {\n\t\t\t\tthis.astGeneric(bNode.body[i], retArr);\n\t\t\t}\n\t\t\tretArr.push('}\\n');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Variable Declaration*\n\t * @param {Object} varDecNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastVariableDeclaration(varDecNode, retArr) {\n\t\tif (varDecNode.kind === 'var') {\n\t\t\tthis.varWarn();\n\t\t}\n\t\tconst declarations = varDecNode.declarations;\n\t\tif (!declarations || !declarations[0] || !declarations[0].init) {\n\t\t\tthrow this.astErrorOutput('Unexpected expression', varDecNode);\n\t\t}\n\t\tconst result = [];\n\t\tconst firstDeclaration = declarations[0];\n\t\tconst init = firstDeclaration.init;\n\t\tconst actualType = this.getType(init);\n\t\tconst inForLoopInit = this.isState('in-for-loop-init');\n\t\tlet type = inForLoopInit ? 'Integer' : actualType;\n\t\tif (type === 'LiteralInteger') {\n\t\t\t// We had the choice to go either float or int, choosing float\n\t\t\ttype = 'Number';\n\t\t}\n\t\tconst markupType = typeMap[type];\n\t\tif (!markupType) {\n\t\t\tthrow this.astErrorOutput(`Markup type ${ markupType } not handled`, varDecNode);\n\t\t}\n\t\tlet dependencies = this.getDependencies(firstDeclaration.init);\n\t\tconst initResult = [];\n\t\tif (actualType === 'Integer' && type === 'Integer' && !inForLoopInit) {\n\t\t\tthis.declarations[firstDeclaration.id.name] = Object.freeze({\n\t\t\t\ttype: 'Number',\n\t\t\t\tdependencies,\n\t\t\t\tisSafe: this.isSafeDependencies(dependencies),\n\t\t\t});\n\t\t\tinitResult.push('float ');\n\t\t\tinitResult.push(`user_${firstDeclaration.id.name}=`);\n\t\t\tinitResult.push('float(');\n\t\t\tthis.astGeneric(init, initResult);\n\t\t\tinitResult.push(')');\n\t\t} else {\n\t\t\tthis.declarations[firstDeclaration.id.name] = Object.freeze({\n\t\t\t\ttype,\n\t\t\t\tdependencies,\n\t\t\t\tisSafe: this.isSafeDependencies(dependencies),\n\t\t\t});\n\t\t\tinitResult.push(`${markupType} `);\n\t\t\tinitResult.push(`user_${firstDeclaration.id.name}=`);\n\t\t\tif (actualType === 'Number' && type === 'Integer') {\n\t\t\t\tinitResult.push('int(');\n\t\t\t\tthis.astGeneric(init, initResult);\n\t\t\t\tinitResult.push(')');\n\t\t\t} else {\n\t\t\t\tthis.astGeneric(init, initResult);\n\t\t\t}\n\t\t}\n\t\tresult.push(initResult.join(''));\n\n\t\t// first declaration is done, now add multiple statements\n\t\tlet lastType = type;\n\t\tfor (let i = 1; i < declarations.length; i++) {\n\t\t\tconst declaration = declarations[i];\n\t\t\tconst nextResult = [];\n\t\t\tif (!inForLoopInit) {\n\t\t\t\tlet possibleNewType = this.getType(declaration.init);\n\t\t\t\tif (possibleNewType === 'LiteralInteger') {\n\t\t\t\t\tpossibleNewType = 'Number';\n\t\t\t\t}\n\t\t\t\tif (possibleNewType !== lastType) {\n\t\t\t\t\tnextResult.push(';');\n\t\t\t\t\tnextResult.push(typeMap[possibleNewType], ' ');\n\t\t\t\t\tlastType = possibleNewType;\n\t\t\t\t} else {\n\t\t\t\t\tnextResult.push(',');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnextResult.push(',');\n\t\t\t}\n\t\t\tdependencies = this.getDependencies(declaration);\n\t\t\tthis.declarations[declaration.id.name] = Object.freeze({\n\t\t\t\ttype: lastType,\n\t\t\t\tdependencies: dependencies,\n\t\t\t\tisSafe: this.isSafeDependencies(dependencies),\n\t\t\t});\n\t\t\tthis.astGeneric(declaration, nextResult);\n\t\t\tresult.push(nextResult.join(''));\n\t\t}\n\n\t\tretArr.push(result.join(''));\n\t\tif (!inForLoopInit) {\n\t\t\tretArr.push(';');\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *If* Statement\n\t * @param {Object} ifNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastIfStatement(ifNode, retArr) {\n\t\tretArr.push('if (');\n\t\tthis.astGeneric(ifNode.test, retArr);\n\t\tretArr.push(')');\n\t\tif (ifNode.consequent.type === 'BlockStatement') {\n\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t} else {\n\t\t\tretArr.push(' {\\n');\n\t\t\tthis.astGeneric(ifNode.consequent, retArr);\n\t\t\tretArr.push('\\n}\\n');\n\t\t}\n\n\t\tif (ifNode.alternate) {\n\t\t\tretArr.push('else ');\n\t\t\tif (ifNode.alternate.type === 'BlockStatement') {\n\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t} else {\n\t\t\t\tretArr.push(' {\\n');\n\t\t\t\tthis.astGeneric(ifNode.alternate, retArr);\n\t\t\t\tretArr.push('\\n}\\n');\n\t\t\t}\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *This* expression\n\t * @param {Object} tNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastThisExpression(tNode, retArr) {\n\t\tretArr.push('this');\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Member* Expression\n\t * @param {Object} mNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastMemberExpression(mNode, retArr) {\n\t\tconst {\n\t\t\tproperty,\n\t\t\tname,\n\t\t\tsignature,\n\t\t\torigin,\n\t\t\ttype,\n\t\t\txProperty,\n\t\t\tyProperty,\n\t\t\tzProperty\n\t\t} = this.getMemberExpressionDetails(mNode);\n\t\tswitch (signature) {\n\t\t\tcase 'this.thread.value':\n\t\t\t\tif (name !== 'x' && name !== 'y' && name !== 'z') {\n\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);\n\t\t\t\t}\n\t\t\t\tretArr.push(`threadId.${name}`);\n\t\t\t\treturn retArr;\n\t\t\tcase 'this.output.value':\n\t\t\t\tswitch (name) {\n\t\t\t\t\tcase 'x':\n\t\t\t\t\t\tif (this.isState('casting-to-integer')) {\n\t\t\t\t\t\t\tretArr.push(this.output[0]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tretArr.push(this.output[0], '.0');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'y':\n\t\t\t\t\t\tif (this.isState('casting-to-integer')) {\n\t\t\t\t\t\t\tretArr.push(this.output[1]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tretArr.push(this.output[1], '.0');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'z':\n\t\t\t\t\t\tif (this.isState('casting-to-integer')) {\n\t\t\t\t\t\t\tretArr.push(this.output[2]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tretArr.push(this.output[2], '.0');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow this.astErrorOutput('Unexpected expression', mNode);\n\t\t\t\t}\n\t\t\t\treturn retArr;\n\t\t\tcase 'value':\n\t\t\t\tthrow this.astErrorOutput('Unexpected expression', mNode);\n\t\t\tcase 'value[]':\n\t\t\tcase 'value[][]':\n\t\t\tcase 'value[][][]':\n\t\t\tcase 'value[][][][]':\n\t\t\tcase 'value.value':\n\t\t\t\tif (origin === 'Math') {\n\t\t\t\t\tretArr.push(Math[name]);\n\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t\tswitch (property) {\n\t\t\t\t\tcase 'r':\n\t\t\t\t\t\tretArr.push(`user_${ name }.r`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t\tcase 'g':\n\t\t\t\t\t\tretArr.push(`user_${ name }.g`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tretArr.push(`user_${ name }.b`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t\tcase 'a':\n\t\t\t\t\t\tretArr.push(`user_${ name }.a`);\n\t\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'this.constants.value':\n\t\t\tcase 'this.constants.value[]':\n\t\t\tcase 'this.constants.value[][]':\n\t\t\tcase 'this.constants.value[][][]':\n\t\t\tcase 'this.constants.value[][][][]':\n\t\t\t\tbreak;\n\t\t\tcase 'fn()[]':\n\t\t\t\tthis.astCallExpression(mNode.object, retArr);\n\t\t\t\tretArr.push('[');\n\t\t\t\tretArr.push(this.memberExpressionPropertyMarkup(property));\n\t\t\t\tretArr.push(']');\n\t\t\t\treturn retArr;\n\t\t\tcase '[][]':\n\t\t\t\tthis.astArrayExpression(mNode.object, retArr);\n\t\t\t\tretArr.push('[');\n\t\t\t\tretArr.push(this.memberExpressionPropertyMarkup(property));\n\t\t\t\tretArr.push(']');\n\t\t\t\treturn retArr;\n\t\t\tdefault:\n\t\t\t\tthrow this.astErrorOutput('Unexpected expression', mNode);\n\t\t}\n\n\t\t// handle simple types\n\t\tswitch (type) {\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\t\tretArr.push(`${ origin }_${ name}`);\n\t\t\t\treturn retArr;\n\t\t\tcase 'Boolean':\n\t\t\t\tretArr.push(`bool(${ origin }_${ name})`);\n\t\t\t\treturn retArr;\n\t\t}\n\n\t\t// handle more complex types\n\t\t// argument may have come from a parent\n\t\tlet synonymName = this.getKernelArgumentName(name);\n\n\t\tconst markupName = `${origin}_${synonymName || name}`;\n\n\t\tswitch (type) {\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\t\t// Get from local vec4\n\t\t\t\tthis.astGeneric(mNode.object, retArr);\n\t\t\t\tretArr.push('[');\n\t\t\t\tretArr.push(this.memberExpressionPropertyMarkup(xProperty));\n\t\t\t\tretArr.push(']');\n\t\t\t\tbreak;\n\t\t\tcase 'HTMLImageArray':\n\t\t\t\tretArr.push(`getImage3D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\tretArr.push(`getFloatFromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\tretArr.push(`getVec2FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\tretArr.push(`getVec3FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t\tbreak;\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\tcase 'HTMLImage':\n\t\t\t\tretArr.push(`getVec4FromSampler2D(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t\tbreak;\n\t\t\tcase 'NumberTexture':\n\t\t\tcase 'Array':\n\t\t\tcase 'Array2D':\n\t\t\tcase 'Array3D':\n\t\t\tcase 'Array4D':\n\t\t\tcase 'Input':\n\n\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t// bitRatio is always 4 here, javascript doesn't yet have 8 or 16 bit support\n\t\t\t\t\t// TODO: make 8 or 16 bit work anyway!\n\t\t\t\t\tretArr.push(`getMemoryOptimized32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n\t\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t} else {\n\t\t\t\t\tconst bitRatio = (origin === 'user' ?\n\t\t\t\t\t\tthis.lookupFunctionArgumentBitRatio(this.name, name) :\n\t\t\t\t\t\tthis.constantBitRatios[name]\n\t\t\t\t\t);\n\t\t\t\t\tswitch (bitRatio) {\n\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\tretArr.push(`get8(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\tretArr.push(`get16(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\tretArr.push(`get32(${markupName}, ${markupName}Size, ${markupName}Dim, `);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error(`unhandled bit ratio of ${ bitRatio}`);\n\t\t\t\t\t}\n\t\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\t\tretArr.push(')');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\t\tretArr.push(`getMemoryOptimized32(${ markupName }, ${ markupName }Size, ${ markupName }Dim, `);\n\t\t\t\tthis.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);\n\t\t\t\tretArr.push(')');\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`unhandled member expression \"${ type }\"`);\n\t\t}\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *call* expression\n\t * @param {Object} ast - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns  {Array} the append retArr\n\t */\n\tastCallExpression(ast, retArr) {\n\t\tif (!ast.callee) {\n\t\t\t// Failure, unknown expression\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'Unknown CallExpression',\n\t\t\t\tast\n\t\t\t);\n\t\t}\n\n\t\t// Get the full function call, unrolled\n\t\tlet functionName = this.astMemberExpressionUnroll(ast.callee);\n\t\tconst isMathFunction = functionName.indexOf(jsMathPrefix) === 0;\n\n\t\t// Its a math operator, remove the prefix\n\t\tif (isMathFunction) {\n\t\t\tfunctionName = functionName.slice(jsMathPrefix.length);\n\t\t}\n\n\t\t// Its a local function, remove this\n\t\tif (functionName.indexOf(localPrefix) === 0) {\n\t\t\tfunctionName = functionName.slice(localPrefix.length);\n\t\t}\n\n\t\t// if this if grows to more than one, lets use a switch\n\t\tif (functionName === 'atan2') {\n\t\t\tfunctionName = 'atan';\n\t\t}\n\n\t\t// Register the function into the called registry\n\t\tif (this.calledFunctions.indexOf(functionName) < 0) {\n\t\t\tthis.calledFunctions.push(functionName);\n\t\t}\n\n\t\tif (functionName === 'random' && this.plugins && this.plugins.length > 0) {\n\t\t\tfor (let i = 0; i < this.plugins.length; i++) {\n\t\t\t\tconst plugin = this.plugins[i];\n\t\t\t\tif (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {\n\t\t\t\t\tretArr.push(plugin.functionReplace);\n\t\t\t\t\treturn retArr;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// track the function was called\n\t\tif (this.onFunctionCall) {\n\t\t\tthis.onFunctionCall(this.name, functionName);\n\t\t}\n\n\t\t// Call the function\n\t\tretArr.push(functionName);\n\n\t\t// Open arguments space\n\t\tretArr.push('(');\n\n\t\t// Add the arguments\n\t\tif (isMathFunction) {\n\t\t\tfor (let i = 0; i < ast.arguments.length; ++i) {\n\t\t\t\tconst argument = ast.arguments[i];\n\t\t\t\tconst argumentType = this.getType(argument);\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\n\t\t\t\tswitch (argumentType) {\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\tretArr.push('float(');\n\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];\n\t\t\tfor (let i = 0; i < ast.arguments.length; ++i) {\n\t\t\t\tconst argument = ast.arguments[i];\n\t\t\t\tlet targetType = targetTypes[i];\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tretArr.push(', ');\n\t\t\t\t}\n\t\t\t\tconst argumentType = this.getType(argument);\n\t\t\t\tif (!targetType) {\n\t\t\t\t\tthis.triggerImplyArgumentType(functionName, i, argumentType, this);\n\t\t\t\t\ttargetType = argumentType;\n\t\t\t\t}\n\t\t\t\tswitch (argumentType) {\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\t\tif (targetType === 'Integer') {\n\t\t\t\t\t\t\tretArr.push('int(');\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targetType === 'Number' || targetType === 'Float') {\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targetType === 'LiteralInteger') {\n\t\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tif (targetType === 'Number' || targetType === 'Float') {\n\t\t\t\t\t\t\tretArr.push('float(');\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tretArr.push(')');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targetType === 'Integer') {\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'LiteralInteger':\n\t\t\t\t\t\tif (targetType === 'Integer') {\n\t\t\t\t\t\t\tthis.pushState('casting-to-integer');\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tthis.popState('casting-to-integer');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targetType === 'Number' || targetType === 'Float') {\n\t\t\t\t\t\t\tthis.pushState('casting-to-float');\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tthis.popState('casting-to-float');\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t} else if (targetType === 'LiteralInteger') {\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(2)':\n\t\t\t\t\tcase 'Array(3)':\n\t\t\t\t\tcase 'Array(4)':\n\t\t\t\t\t\tif (targetType === argumentType) {\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\t\tif (targetType === argumentType) {\n\t\t\t\t\t\t\tthis.triggerTrackArgumentSynonym(this.name, argument.name, functionName, i);\n\t\t\t\t\t\t\tthis.astGeneric(argument, retArr);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthrow new Error(`Unhandled argument combination of ${ argumentType } and ${ targetType }`);\n\t\t\t}\n\t\t}\n\t\t// Close arguments space\n\t\tretArr.push(')');\n\n\t\treturn retArr;\n\t}\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *Array* Expression\n\t * @param {Object} arrNode - the AST object to parse\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastArrayExpression(arrNode, retArr) {\n\t\tconst arrLen = arrNode.elements.length;\n\n\t\tretArr.push('vec' + arrLen + '(');\n\t\tfor (let i = 0; i < arrLen; ++i) {\n\t\t\tif (i > 0) {\n\t\t\t\tretArr.push(', ');\n\t\t\t}\n\t\t\tconst subNode = arrNode.elements[i];\n\t\t\tthis.astGeneric(subNode, retArr)\n\t\t}\n\t\tretArr.push(')');\n\n\t\treturn retArr;\n\t}\n\n\tmemberExpressionXYZ(x, y, z, retArr) {\n\t\tif (z) {\n\t\t\tretArr.push(this.memberExpressionPropertyMarkup(z), ', ');\n\t\t} else {\n\t\t\tretArr.push('0, ');\n\t\t}\n\t\tif (y) {\n\t\t\tretArr.push(this.memberExpressionPropertyMarkup(y), ', ');\n\t\t} else {\n\t\t\tretArr.push('0, ');\n\t\t}\n\t\tretArr.push(this.memberExpressionPropertyMarkup(x));\n\t\treturn retArr;\n\t}\n\n\tmemberExpressionPropertyMarkup(property) {\n\t\tif (!property) {\n\t\t\tthrow new Error('Property not set');\n\t\t}\n\t\tconst type = this.getType(property);\n\t\tconst result = [];\n\t\tif (type === 'Number') {\n\t\t\tthis.pushState('casting-to-integer');\n\t\t\tresult.push('int(');\n\t\t\tthis.astGeneric(property, result);\n\t\t\tresult.push(')');\n\t\t\tthis.popState('casting-to-integer');\n\t\t} else if (type === 'LiteralInteger') {\n\t\t\tthis.pushState('casting-to-integer');\n\t\t\tthis.astGeneric(property, result);\n\t\t\tthis.popState('casting-to-integer');\n\t\t} else {\n\t\t\tthis.astGeneric(property, result);\n\t\t}\n\t\treturn result.join('');\n\t}\n}\n\nconst typeMap = {\n\t'Array': 'sampler2D',\n\t'Array(2)': 'vec2',\n\t'Array(3)': 'vec3',\n\t'Array(4)': 'vec4',\n\t'Array2D': 'sampler2D',\n\t'Array3D': 'sampler2D',\n\t'Boolean': 'bool',\n\t'Float': 'float',\n\t'Input': 'sampler2D',\n\t'Integer': 'int',\n\t'Number': 'float',\n\t'LiteralInteger': 'float',\n\t'NumberTexture': 'sampler2D',\n\t'MemoryOptimizedNumberTexture': 'sampler2D',\n\t'ArrayTexture(1)': 'sampler2D',\n\t'ArrayTexture(2)': 'sampler2D',\n\t'ArrayTexture(3)': 'sampler2D',\n\t'ArrayTexture(4)': 'sampler2D',\n};\n\nconst operatorMap = {\n\t'===': '==',\n\t'!==': '!='\n};\n\nmodule.exports = {\n\tWebGLFunctionNode\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl/kernel-string.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl/kernel-string.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tutils\n} = __webpack_require__(/*! ../../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tkernelRunShortcut\n} = __webpack_require__(/*! ../../kernel-run-shortcut */ \"./node_modules/gpu.js/src/kernel-run-shortcut.js\");\n\nfunction removeFnNoise(fn) {\n\tif (/^function /.test(fn)) {\n\t\tfn = fn.substring(9);\n\t}\n\treturn fn.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction removeNoise(str) {\n\treturn str\n\t\t.replace(/^[A-Za-z23]+/, 'function')\n\t\t.replace(/[_]typeof/g, 'typeof');\n}\n\nfunction boolToString(value) {\n\tif (value) {\n\t\treturn 'true';\n\t} else if (value === false) {\n\t\treturn 'false';\n\t}\n\treturn 'null';\n}\n\nfunction webGLKernelString(gpuKernel, name) {\n\treturn `() => {\n    ${ kernelRunShortcut.toString() };\n    const utils = {\n      allPropertiesOf: ${ removeNoise(utils.allPropertiesOf.toString()) },\n      clone: ${ removeNoise(utils.clone.toString()) },\n      splitArray: ${ removeNoise(utils.splitArray.toString()) },\n      getVariableType: ${ removeNoise(utils.getVariableType.toString()) },\n      getDimensions: ${ removeNoise(utils.getDimensions.toString()) },\n      dimToTexSize: ${ removeNoise(utils.dimToTexSize.toString()) },\n      closestSquareDimensions: ${ removeNoise(utils.closestSquareDimensions.toString()) },\n      getMemoryOptimizedFloatTextureSize: ${ removeNoise(utils.getMemoryOptimizedFloatTextureSize.toString()) },\n      getMemoryOptimizedPackedTextureSize: ${ removeNoise(utils.getMemoryOptimizedPackedTextureSize.toString()) },\n      roundTo: ${ removeNoise(utils.roundTo.toString()) },\n      flattenTo: ${ removeNoise(utils.flattenTo.toString()) },\n      flatten2dArrayTo: ${ removeNoise(utils.flatten2dArrayTo.toString()) },\n      flatten3dArrayTo: ${ removeNoise(utils.flatten3dArrayTo.toString()) },\n      systemEndianness: ${ removeNoise(utils.getSystemEndianness.toString()) },\n      isArray: ${ removeNoise(utils.isArray.toString()) }\n    };\n    const canvases = [];\n    const maxTexSizes = {};\n    let Texture = function() {};\n    let Input = function() {}; \n    class ${ name || 'Kernel' } {\n      constructor() {\n        this.maxTexSize = null;\n        this.argumentsLength = 0;\n        this.constantsLength = 0;\n        this.constantBitRatios = ${ gpuKernel.constantBitRatios ? JSON.stringify(gpuKernel.constantBitRatios) : 'null' };\n        this.canvas = null;\n        this.context = null;\n        this.program = null;\n        this.subKernels = null;\n        this.subKernelNames = null;\n        this.drawBuffersMap = ${ gpuKernel.drawBuffersMap ? JSON.stringify(gpuKernel.drawBuffersMap) : 'null' };\n        this.endianness = '${ gpuKernel.endianness }';\n        this.graphical = ${ boolToString(gpuKernel.graphical) };\n        this.optimizeFloatMemory = ${ boolToString(gpuKernel.optimizeFloatMemory) };\n        this.precision = \"${ gpuKernel.precision }\";\n        // TODO: not sure how to handle\n        this.floatOutputForce = ${ boolToString(gpuKernel.floatOutputForce) };\n        this.hardcodeConstants = ${ boolToString(gpuKernel.hardcodeConstants) };\n        this.pipeline = ${ boolToString(gpuKernel.pipeline) };\n        this.argumentNames = ${ JSON.stringify(gpuKernel.argumentNames) };\n        this.argumentTypes = ${ JSON.stringify(gpuKernel.argumentTypes) };\n        this.argumentBitRatios = ${ JSON.stringify(gpuKernel.argumentBitRatios) };\n       \n        this.texSize = ${ JSON.stringify(Array.from(gpuKernel.texSize)) };\n        this.output = ${ JSON.stringify(gpuKernel.output) };\n        this.compiledFragmentShader = \\`${ gpuKernel.compiledFragmentShader }\\`;\n\t\t    this.compiledVertexShader = \\`${ gpuKernel.compiledVertexShader }\\`;\n\t\t    this.returnType = '${ gpuKernel.returnType }';\n\t\t    this.programUniformLocationCache = {};\n\t\t    this.textureCache = {};\n\t\t    this.subKernelOutputTextures = null;\n\t\t    this.extensions = {};\n\t\t    this.uniform1fCache = {};\n\t\t    this.uniform1iCache = {};\n\t\t    this.uniform2fCache = {};\n\t\t    this.uniform2fvCache = {};\n\t\t    this.uniform2ivCache = {};\n\t\t    this.uniform3fvCache = {};\n\t\t    this.uniform3ivCache = {};\n      }\n      getFragmentShader() { return this.compiledFragmentShader; }\n      getVertexShader() { return this.compiledVertexShader; }\n      validateSettings() {}\n      initExtensions() {}\n      setupArguments() {}\n      setupConstants() {}\n      setCanvas(canvas) { this.canvas = canvas; return this; }\n      setContext(context) { this.context = context; return this; }\n      setTexture(Type) { Texture = Type; }\n      setInput(Type) { Input = Type; }\n      ${ removeFnNoise(gpuKernel.getUniformLocation.toString()) }\n      ${ removeFnNoise(gpuKernel.build.toString()) }\n      translateSource() {}\n      pickRenderStrategy() {}\n\t\t  ${ removeFnNoise(gpuKernel.run.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.addArgument.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.formatArrayTransfer.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.checkOutput.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.getArgumentTexture.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.getTextureCache.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.getOutputTexture.toString()) }\n\t\t  renderOutput() { ${ utils.getFunctionBodyFromString(removeFnNoise(gpuKernel.renderOutput.toString())) } }\n\t\t  ${ removeFnNoise(gpuKernel.readPackedPixelsToFloat32Array.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.readPackedPixelsToUint8Array.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.readFloatPixelsToFloat32Array.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.updateMaxTexSize.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel._setupOutputTexture.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.detachTextureCache.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform1f.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform1i.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform2f.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform2fv.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform2iv.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform3fv.toString()) }\n\t\t  ${ removeFnNoise(gpuKernel.setUniform3iv.toString()) }\n\t\t  getReturnTextureType() { return \"${ gpuKernel.getReturnTextureType() }\"; }\n    };\n    return kernelRunShortcut(new ${ name || 'Kernel' }());\n  };`;\n}\n\nmodule.exports = {\n\twebGLKernelString\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl/kernel-string.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl/kernel.js":
/*!**********************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl/kernel.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tGLKernel\n} = __webpack_require__(/*! ../gl-kernel */ \"./node_modules/gpu.js/src/backend/gl-kernel.js\");\nconst {\n\tFunctionBuilder\n} = __webpack_require__(/*! ../function-builder */ \"./node_modules/gpu.js/src/backend/function-builder.js\");\nconst {\n\tWebGLFunctionNode\n} = __webpack_require__(/*! ./function-node */ \"./node_modules/gpu.js/src/backend/web-gl/function-node.js\");\nconst {\n\tutils\n} = __webpack_require__(/*! ../../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tTexture\n} = __webpack_require__(/*! ../../texture */ \"./node_modules/gpu.js/src/texture.js\");\nconst triangleNoise = __webpack_require__(/*! ../../plugins/triangle-noise */ \"./node_modules/gpu.js/src/plugins/triangle-noise.js\");\nconst {\n\tfragmentShader\n} = __webpack_require__(/*! ./fragment-shader */ \"./node_modules/gpu.js/src/backend/web-gl/fragment-shader.js\");\nconst {\n\tvertexShader\n} = __webpack_require__(/*! ./vertex-shader */ \"./node_modules/gpu.js/src/backend/web-gl/vertex-shader.js\");\nconst {\n\twebGLKernelString\n} = __webpack_require__(/*! ./kernel-string */ \"./node_modules/gpu.js/src/backend/web-gl/kernel-string.js\");\n\nlet isSupported = null;\nlet testCanvas = null;\nlet testContext = null;\nlet testExtensions = null;\nlet features = null;\n\nconst plugins = [triangleNoise];\nconst canvases = [];\nconst maxTexSizes = {};\n\n/**\n * @desc Kernel Implementation for WebGL.\n * <p>This builds the shaders and runs them on the GPU,\n * the outputs the result back as float(enabled by default) and Texture.</p>\n *\n * @prop {Object} textureCache - webGl Texture cache\n * @prop {Object} threadDim - The thread dimensions, x, y and z\n * @prop {Object} programUniformLocationCache - Location of program variables in memory\n * @prop {Object} framebuffer - Webgl frameBuffer\n * @prop {Object} buffer - WebGL buffer\n * @prop {Object} program - The webGl Program\n * @prop {Object} functionBuilder - Function Builder instance bound to this Kernel\n * @prop {Boolean} pipeline - Set output type to FAST mode (GPU to GPU via Textures), instead of float\n * @prop {String} endianness - Endian information like Little-endian, Big-endian.\n * @prop {Array} argumentTypes - Types of parameters sent to the Kernel\n * @prop {number} argumentsLength - Number of parameters sent to the Kernel\n * @prop {String} compiledFragmentShader - Compiled fragment shader string\n * @prop {String} compiledVertexShader - Compiled Vertical shader string\n */\nclass WebGLKernel extends GLKernel {\n\tstatic get isSupported() {\n\t\tif (isSupported !== null) {\n\t\t\treturn isSupported;\n\t\t}\n\t\tthis.setupFeatureChecks();\n\t\tisSupported = this.isContextMatch(testContext);\n\t\treturn isSupported;\n\t}\n\n\tstatic setupFeatureChecks() {\n\t\tif (typeof document !== 'undefined') {\n\t\t\ttestCanvas = document.createElement('canvas');\n\t\t} else if (typeof OffscreenCanvas !== 'undefined') {\n\t\t\ttestCanvas = new OffscreenCanvas(0, 0);\n\t\t}\n\t\tif (!testCanvas) return;\n\t\ttestContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');\n\t\tif (!testContext || !testContext.getExtension) return;\n\t\ttestExtensions = {\n\t\t\tOES_texture_float: testContext.getExtension('OES_texture_float'),\n\t\t\tOES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n\t\t\tOES_element_index_uint: testContext.getExtension('OES_element_index_uint'),\n\t\t\tWEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),\n\t\t};\n\t\tfeatures = this.getFeatures();\n\t}\n\n\tstatic isContextMatch(context) {\n\t\tif (typeof WebGLRenderingContext !== 'undefined') {\n\t\t\treturn context instanceof WebGLRenderingContext;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic getFeatures() {\n\t\tconst isDrawBuffers = this.getIsDrawBuffers();\n\t\treturn Object.freeze({\n\t\t\tisFloatRead: this.getIsFloatRead(),\n\t\t\tisIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n\t\t\tisTextureFloat: this.getIsTextureFloat(),\n\t\t\tisDrawBuffers,\n\t\t\tkernelMap: isDrawBuffers,\n\t\t\tchannelCount: this.getChannelCount(),\n\t\t});\n\t}\n\n\tstatic getIsTextureFloat() {\n\t\treturn Boolean(testExtensions.OES_texture_float);\n\t}\n\n\tstatic getIsDrawBuffers() {\n\t\treturn Boolean(testExtensions.WEBGL_draw_buffers);\n\t}\n\n\tstatic getChannelCount() {\n\t\treturn testExtensions.WEBGL_draw_buffers ? testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL : 1;\n\t}\n\n\tstatic get testCanvas() {\n\t\treturn testCanvas;\n\t}\n\n\tstatic get testContext() {\n\t\treturn testContext;\n\t}\n\n\tstatic get features() {\n\t\treturn features;\n\t}\n\n\tstatic get fragmentShader() {\n\t\treturn fragmentShader;\n\t}\n\n\tstatic get vertexShader() {\n\t\treturn vertexShader;\n\t}\n\n\tconstructor(source, settings) {\n\t\tsuper(source, settings);\n\t\tthis.textureCache = {};\n\t\tthis.threadDim = {};\n\t\tthis.programUniformLocationCache = {};\n\t\tthis.framebuffer = null;\n\n\t\tthis.buffer = null;\n\t\tthis.program = null;\n\t\tthis.pipeline = settings.pipeline;\n\t\tthis.endianness = utils.systemEndianness();\n\t\tthis.extensions = {};\n\t\tthis.subKernelOutputTextures = null;\n\t\tthis.argumentsLength = 0;\n\t\tthis.constantsLength = 0;\n\t\tthis.compiledFragmentShader = null;\n\t\tthis.compiledVertexShader = null;\n\t\tthis.fragShader = null;\n\t\tthis.vertShader = null;\n\t\tthis.drawBuffersMap = null;\n\t\tthis.outputTexture = null;\n\t\tthis.maxTexSize = null;\n\t\tthis.uniform1fCache = {};\n\t\tthis.uniform1iCache = {};\n\t\tthis.uniform2fCache = {};\n\t\tthis.uniform2fvCache = {};\n\t\tthis.uniform2ivCache = {};\n\t\tthis.uniform3fvCache = {};\n\t\tthis.uniform3ivCache = {};\n\n\t\tthis.mergeSettings(source.settings || settings);\n\t}\n\n\tinitCanvas() {\n\t\tif (typeof document !== 'undefined') {\n\t\t\tconst canvas = document.createElement('canvas');\n\t\t\t// Default width and height, to fix webgl issue in safari\n\t\t\tcanvas.width = 2;\n\t\t\tcanvas.height = 2;\n\t\t\treturn canvas;\n\t\t} else if (typeof OffscreenCanvas !== 'undefined') {\n\t\t\treturn new OffscreenCanvas(0, 0);\n\t\t}\n\t}\n\n\tinitContext() {\n\t\tconst settings = {\n\t\t\talpha: false,\n\t\t\tdepth: false,\n\t\t\tantialias: false\n\t\t};\n\t\treturn this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);\n\t}\n\n\tinitPlugins(settings) {\n\t\t// default plugins\n\t\tconst pluginsToUse = [];\n\t\tconst {\n\t\t\tsource\n\t\t} = this;\n\t\tif (typeof source === 'string') {\n\t\t\tfor (let i = 0; i < plugins.length; i++) {\n\t\t\t\tconst plugin = plugins[i];\n\t\t\t\tif (source.match(plugin.functionMatch)) {\n\t\t\t\t\tpluginsToUse.push(plugin);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (typeof source === 'object') {\n\t\t\t// `source` is from object, json\n\t\t\tif (settings.pluginNames) { //TODO: pluginNames, may not exist here\n\t\t\t\tfor (let i = 0; i < plugins.length; i++) {\n\t\t\t\t\tconst plugin = plugins[i];\n\t\t\t\t\tconst usePlugin = settings.pluginNames.some(pluginName => pluginName === plugin.name);\n\t\t\t\t\tif (usePlugin) {\n\t\t\t\t\t\tpluginsToUse.push(plugin);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn pluginsToUse;\n\t}\n\n\tinitExtensions() {\n\t\tthis.extensions = {\n\t\t\tOES_texture_float: this.context.getExtension('OES_texture_float'),\n\t\t\tOES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n\t\t\tOES_element_index_uint: this.context.getExtension('OES_element_index_uint'),\n\t\t\tWEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),\n\t\t\tWEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float'),\n\t\t};\n\t}\n\n\tvalidateSettings() {\n\t\tif (!this.validate) {\n\t\t\tthis.texSize = utils.dimToTexSize({\n\t\t\t\tfloatTextures: this.optimizeFloatMemory,\n\t\t\t\tfloatOutput: this.precision === 'single',\n\t\t\t}, this.output, true);\n\t\t\treturn;\n\t\t}\n\n\t\tconst {\n\t\t\tfeatures\n\t\t} = this.constructor;\n\t\tif (this.optimizeFloatMemory === true && !features.isTextureFloat) {\n\t\t\tthrow new Error('Float textures are not supported');\n\t\t} else if (this.precision === 'single' && this.floatOutputForce !== true && !features.isFloatRead) {\n\t\t\tthrow new Error('Single precision not supported');\n\t\t} else if (!this.graphical && this.precision === null && features.isTextureFloat) {\n\t\t\tthis.precision = features.isFloatRead ? 'single' : 'unsigned';\n\t\t}\n\n\t\tif (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {\n\t\t\tthrow new Error('could not instantiate draw buffers extension');\n\t\t}\n\n\t\tif (this.fixIntegerDivisionAccuracy === null) {\n\t\t\tthis.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n\t\t} else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\n\t\t\tthis.fixIntegerDivisionAccuracy = false;\n\t\t}\n\n\t\tthis.checkOutput();\n\n\t\tif (!this.output || this.output.length === 0) {\n\t\t\tif (arguments.length !== 1) {\n\t\t\t\tthrow new Error('Auto output only supported for kernels with only one input');\n\t\t\t}\n\n\t\t\tconst argType = utils.getVariableType(arguments[0]);\n\t\t\tif (argType === 'Array') {\n\t\t\t\tthis.output = utils.getDimensions(argType);\n\t\t\t} else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {\n\t\t\t\tthis.output = arguments[0].output;\n\t\t\t} else {\n\t\t\t\tthrow new Error('Auto output not supported for input type: ' + argType);\n\t\t\t}\n\t\t}\n\n\t\tif (this.graphical) {\n\t\t\tif (this.output.length !== 2) {\n\t\t\t\tthrow new Error('Output must have 2 dimensions on graphical mode');\n\t\t\t}\n\n\t\t\tif (this.precision === 'precision') {\n\t\t\t\tthis.precision = 'unsigned';\n\t\t\t\tconsole.warn('Cannot use graphical mode and single precision at the same time');\n\t\t\t}\n\n\t\t\tthis.texSize = utils.clone(this.output);\n\t\t\treturn;\n\t\t} else if (this.precision === null && features.isTextureFloat) {\n\t\t\tthis.precision = 'single';\n\t\t}\n\n\t\tthis.texSize = utils.dimToTexSize({\n\t\t\tfloatTextures: this.floatTextures,\n\t\t\tfloatOutput: this.precision === 'single'\n\t\t}, this.output, true);\n\t}\n\n\tupdateMaxTexSize() {\n\t\tconst {\n\t\t\ttexSize,\n\t\t\tcanvas\n\t\t} = this;\n\t\tif (this.maxTexSize === null) {\n\t\t\tlet canvasIndex = canvases.indexOf(canvas);\n\t\t\tif (canvasIndex === -1) {\n\t\t\t\tcanvasIndex = canvases.length;\n\t\t\t\tcanvases.push(canvas);\n\t\t\t\tmaxTexSizes[canvasIndex] = [texSize[0], texSize[1]];\n\t\t\t}\n\t\t\tthis.maxTexSize = maxTexSizes[canvasIndex];\n\t\t}\n\t\tif (this.maxTexSize[0] < texSize[0]) {\n\t\t\tthis.maxTexSize[0] = texSize[0];\n\t\t}\n\t\tif (this.maxTexSize[1] < texSize[1]) {\n\t\t\tthis.maxTexSize[1] = texSize[1];\n\t\t}\n\t}\n\n\t// TODO: move channel checks to new place\n\t_oldtranslateSource() {\n\t\tconst functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\n\t\t\tfixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n\t\t});\n\n\t\t// need this line to automatically get returnType\n\t\tconst translatedSource = functionBuilder.getPrototypeString('kernel');\n\n\t\tif (!this.returnType) {\n\t\t\tthis.returnType = functionBuilder.getKernelResultType();\n\t\t}\n\n\t\tlet requiredChannels = 0;\n\t\tconst returnTypes = functionBuilder.getReturnTypes();\n\t\tfor (let i = 0; i < returnTypes.length; i++) {\n\t\t\tswitch (returnTypes[i]) {\n\t\t\t\tcase 'Float':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'Integer':\n\t\t\t\t\trequiredChannels++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Array(2)':\n\t\t\t\t\trequiredChannels += 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Array(3)':\n\t\t\t\t\trequiredChannels += 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Array(4)':\n\t\t\t\t\trequiredChannels += 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (features && requiredChannels > features.channelCount) {\n\t\t\tthrow new Error('Too many channels!');\n\t\t}\n\n\t\treturn this.translatedSource = translatedSource;\n\t}\n\n\tbuild() {\n\t\tthis.initExtensions();\n\t\tthis.validateSettings();\n\t\tthis.setupConstants();\n\t\tthis.setupArguments(arguments);\n\t\tthis.updateMaxTexSize();\n\t\tthis.translateSource();\n\t\tthis.pickRenderStrategy();\n\t\tconst texSize = this.texSize;\n\t\tconst gl = this.context;\n\t\tconst canvas = this.canvas;\n\t\tgl.enable(gl.SCISSOR_TEST);\n\t\tif (this.pipeline && this.precision === 'single') {\n\t\t\tgl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n\t\t\tcanvas.width = this.maxTexSize[0];\n\t\t\tcanvas.height = this.maxTexSize[1];\n\t\t} else {\n\t\t\tgl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);\n\t\t\tcanvas.width = this.maxTexSize[0];\n\t\t\tcanvas.height = this.maxTexSize[1];\n\t\t}\n\t\tconst threadDim = this.threadDim = Array.from(this.output);\n\t\twhile (threadDim.length < 3) {\n\t\t\tthreadDim.push(1);\n\t\t}\n\n\t\tconst compiledVertexShader = this.getVertexShader(arguments);\n\t\tconst vertShader = gl.createShader(gl.VERTEX_SHADER);\n\t\tgl.shaderSource(vertShader, compiledVertexShader);\n\t\tgl.compileShader(vertShader);\n\t\tthis.vertShader = vertShader;\n\n\t\tconst compiledFragmentShader = this.getFragmentShader(arguments);\n\t\tconst fragShader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\tgl.shaderSource(fragShader, compiledFragmentShader);\n\t\tgl.compileShader(fragShader);\n\t\tthis.fragShader = fragShader;\n\n\t\tif (this.debug) {\n\t\t\tconsole.log('GLSL Shader Output:');\n\t\t\tconsole.log(compiledFragmentShader);\n\t\t}\n\n\t\tif (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));\n\t\t}\n\t\tif (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));\n\t\t}\n\n\t\tconst program = this.program = gl.createProgram();\n\t\tgl.attachShader(program, vertShader);\n\t\tgl.attachShader(program, fragShader);\n\t\tgl.linkProgram(program);\n\t\tthis.framebuffer = gl.createFramebuffer();\n\t\tthis.framebuffer.width = texSize[0];\n\t\tthis.framebuffer.height = texSize[1];\n\n\t\tconst vertices = new Float32Array([-1, -1,\n\t\t\t1, -1, -1, 1,\n\t\t\t1, 1\n\t\t]);\n\t\tconst texCoords = new Float32Array([\n\t\t\t0, 0,\n\t\t\t1, 0,\n\t\t\t0, 1,\n\t\t\t1, 1\n\t\t]);\n\n\t\tconst texCoordOffset = vertices.byteLength;\n\n\t\tlet buffer = this.buffer;\n\t\tif (!buffer) {\n\t\t\tbuffer = this.buffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);\n\t\t} else {\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\t\t}\n\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);\n\n\t\tconst aPosLoc = gl.getAttribLocation(this.program, 'aPos');\n\t\tgl.enableVertexAttribArray(aPosLoc);\n\t\tgl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);\n\t\tconst aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');\n\t\tgl.enableVertexAttribArray(aTexCoordLoc);\n\t\tgl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n\t\tfor (let p in this.constants) {\n\t\t\tconst value = this.constants[p];\n\t\t\tconst type = utils.getVariableType(value);\n\t\t\tif (type === 'Float' || type === 'Integer' || type === 'Boolean') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tgl.useProgram(this.program);\n\t\t\tthis.addConstant(this.constants[p], type, p);\n\t\t}\n\n\t\tif (!this.immutable) {\n\t\t\tthis._setupOutputTexture();\n\t\t\tif (\n\t\t\t\tthis.subKernels !== null &&\n\t\t\t\tthis.subKernels.length > 0\n\t\t\t) {\n\t\t\t\tthis._setupSubOutputTextures(this.subKernels.length);\n\t\t\t}\n\t\t}\n\t}\n\n\ttranslateSource() {\n\t\tconst functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {\n\t\t\tfixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n\t\t});\n\t\tthis.translatedSource = functionBuilder.getPrototypeString('kernel');\n\t\tif (!this.graphical && !this.returnType) {\n\t\t\tthis.returnType = functionBuilder.getKernelResultType();\n\t\t}\n\t}\n\n\trun() {\n\t\tif (this.program === null) {\n\t\t\tthis.build.apply(this, arguments);\n\t\t}\n\t\tconst argumentNames = this.argumentNames;\n\t\tconst argumentTypes = this.argumentTypes;\n\t\tconst texSize = this.texSize;\n\t\tconst gl = this.context;\n\n\t\tgl.useProgram(this.program);\n\t\tgl.scissor(0, 0, texSize[0], texSize[1]);\n\n\t\tif (!this.hardcodeConstants) {\n\t\t\tthis.setUniform3iv('uOutputDim', this.threadDim);\n\t\t\tthis.setUniform2iv('uTexSize', texSize);\n\t\t}\n\n\t\tthis.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n\n\t\tthis.argumentsLength = 0;\n\t\tfor (let texIndex = 0; texIndex < argumentNames.length; texIndex++) {\n\t\t\tthis.addArgument(arguments[texIndex], argumentTypes[texIndex], argumentNames[texIndex]);\n\t\t}\n\n\t\tif (this.plugins) {\n\t\t\tfor (let i = 0; i < this.plugins.length; i++) {\n\t\t\t\tconst plugin = this.plugins[i];\n\t\t\t\tif (plugin.onBeforeRun) {\n\t\t\t\t\tplugin.onBeforeRun(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.graphical) {\n\t\t\tif (this.pipeline) {\n\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\t\t\tif (!this.outputTexture || this.immutable) {\n\t\t\t\t\tthis._setupOutputTexture();\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\t\treturn new Texture({\n\t\t\t\t\ttexture: this.outputTexture,\n\t\t\t\t\tsize: texSize,\n\t\t\t\t\tdimensions: this.threadDim,\n\t\t\t\t\toutput: this.output,\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tgpu: this.gpu,\n\t\t\t\t\ttype: this.getReturnTextureType(),\n\t\t\t\t});\n\t\t\t}\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\treturn;\n\t\t}\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\tif (this.immutable) {\n\t\t\tthis._setupOutputTexture();\n\t\t}\n\n\t\tif (this.subKernels !== null) {\n\t\t\tif (this.immutable) {\n\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\tthis._setupSubOutputTextures(this.subKernels.length);\n\t\t\t}\n\t\t\tthis.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);\n\t\t}\n\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n\t\tif (this.subKernelOutputTextures !== null) {\n\t\t\tif (this.subKernels !== null) {\n\t\t\t\tconst output = {\n\t\t\t\t\tresult: this.renderOutput(),\n\t\t\t\t};\n\t\t\t\tif (this.pipeline) {\n\t\t\t\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\t\toutput[this.subKernels[i].property] = new Texture({\n\t\t\t\t\t\t\ttexture: this.subKernelOutputTextures[i],\n\t\t\t\t\t\t\tsize: texSize,\n\t\t\t\t\t\t\tdimensions: this.threadDim,\n\t\t\t\t\t\t\toutput: this.output,\n\t\t\t\t\t\t\tcontext: this.context,\n\t\t\t\t\t\t\tgpu: this.gpu,\n\t\t\t\t\t\t\ttype: this.getReturnTextureType(),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\t\toutput[this.subKernels[i].property] = new Texture({\n\t\t\t\t\t\t\ttexture: this.subKernelOutputTextures[i],\n\t\t\t\t\t\t\tsize: texSize,\n\t\t\t\t\t\t\tdimensions: this.threadDim,\n\t\t\t\t\t\t\toutput: this.output,\n\t\t\t\t\t\t\tcontext: this.context,\n\t\t\t\t\t\t\tgpu: this.gpu,\n\t\t\t\t\t\t\ttype: this.getReturnTextureType(),\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\n\t\treturn this.renderOutput();\n\t}\n\n\t/**\n\t * @desc Helper function to return webGl function's output.\n\t * Since the program runs on GPU, we need to get the\n\t * output of the program back to CPU and then return them.\n\t * *Note*: This should not be called directly.\n\t *\n\t * @returns {Object|Array} result\n\t */\n\t// renderOutput() {\n\t// \tconst texSize = this.texSize;\n\t// \tconst gl = this.context;\n\t// \tconst threadDim = this.threadDim;\n\t// \tconst output = this.output;\n\t// \tif (this.pipeline) {\n\t// \t\treturn new Texture({\n\t// \t\t\ttexture: this.outputTexture,\n\t// \t\t\tsize: texSize,\n\t// \t\t\tdimensions: this.threadDim,\n\t// \t\t\toutput,\n\t// \t\t\tcontext: this.context,\n\t// \t\t\tgpu: this.gpu,\n\t// \t\t\ttype: this.getReturnTextureType(),\n\t// \t\t});\n\t// \t} else {\n\t// \t\tlet result;\n\t// \t\tif (this.precision === 'single') {\n\t// \t\t\tconst w = texSize[0];\n\t// \t\t\tconst h = Math.ceil(texSize[1] / 4);\n\t// \t\t\tresult = new Float32Array(w * h * 4);\n\t// \t\t\tgl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);\n\t// \t\t} else {\n\t// \t\t\tconst bytes = new Uint8Array(texSize[0] * texSize[1] * 4);\n\t// \t\t\tgl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);\n\t// \t\t\tresult = new Float32Array(bytes.buffer);\n\t// \t\t}\n\t// \t\tresult = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);\n\t//\n\t// \t\tif (output.length === 1) {\n\t// \t\t\treturn result;\n\t// \t\t} else if (output.length === 2) {\n\t// \t\t\treturn utils.splitArray(result, output[0]);\n\t// \t\t} else if (output.length === 3) {\n\t// \t\t\tconst cube = utils.splitArray(result, output[0] * output[1]);\n\t// \t\t\treturn cube.map(function(x) {\n\t// \t\t\t\treturn utils.splitArray(x, output[0]);\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t/**\n\t * @desc This return defined outputTexture, which is setup in .build(), or if immutable, is defined in .run()\n\t * @returns {Object} Output Texture Cache\n\t */\n\tgetOutputTexture() {\n\t\treturn this.outputTexture;\n\t}\n\n\t/**\n\t * @desc Setup and replace output texture\n\t */\n\t_setupOutputTexture() {\n\t\tconst gl = this.context;\n\t\tconst texSize = this.texSize;\n\t\tconst texture = this.outputTexture = this.context.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentNames.length);\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t// if (this.precision === 'single') {\n\t\t// \tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t// } else {\n\t\t// \tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t// }\n\t\tif (this.precision === 'single') {\n\t\t\tif (this.pipeline) {\n\t\t\t\t// TODO: investigate if webgl1 can handle gl.RED usage in gl.texImage2D, otherwise, simplify the below\n\t\t\t\tswitch (this.returnType) {\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(2)':\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(3)':\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(4)':\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (!this.graphical) {\n\t\t\t\t\t\t\tthrow new Error('Unhandled return type');\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t}\n\t\t} else {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t}\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t}\n\n\t/**\n\t * @desc Setup and replace sub-output textures\n\t */\n\t_setupSubOutputTextures(length) {\n\t\tconst gl = this.context;\n\t\tconst texSize = this.texSize;\n\t\tconst drawBuffersMap = this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n\t\tconst textures = this.subKernelOutputTextures = [];\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst texture = this.context.createTexture();\n\t\t\ttextures.push(texture);\n\t\t\tdrawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentNames.length + i);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\tif (this.precision === 'single') {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t\t}\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\t\t}\n\t}\n\n\t/**\n\t * @desc This uses *getTextureCache** to get the Texture Cache of the argument supplied\n\t * @param {String} name - Name of the argument\n\t */\n\tgetArgumentTexture(name) {\n\t\treturn this.getTextureCache(`ARGUMENT_${name}`);\n\t}\n\n\t/**\n\t * @desc Returns the Texture Cache of the supplied parameter (can be kernel, sub-kernel or argument)\n\t * @param {String} name - Name of the subkernel, argument, or kernel.\n\t * @returns {Object} Texture cache\n\t */\n\tgetTextureCache(name) {\n\t\tif (this.textureCache.hasOwnProperty(name)) {\n\t\t\treturn this.textureCache[name];\n\t\t}\n\t\treturn this.textureCache[name] = this.context.createTexture();\n\t}\n\n\t/**\n\t * @desc removes a texture from the kernel's cache\n\t * @param {String} name - Name of texture\n\t */\n\tdetachTextureCache(name) {\n\t\tdelete this.textureCache[name];\n\t}\n\n\tsetUniform1f(name, value) {\n\t\tif (this.uniform1fCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform1fCache[name];\n\t\t\tif (value === cache) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform1fCache[name] = value;\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform1f(loc, value);\n\t}\n\n\tsetUniform1i(name, value) {\n\t\tif (this.uniform1iCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform1iCache[name];\n\t\t\tif (value === cache) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform1iCache[name] = value;\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform1i(loc, value);\n\t}\n\n\tsetUniform2f(name, value1, value2) {\n\t\tif (this.uniform2fCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform2fCache[name];\n\t\t\tif (\n\t\t\t\tvalue1 === cache[0] &&\n\t\t\t\tvalue2 === cache[1]\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform2fCache[name] = [value1, value2];\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform2f(loc, value1, value2);\n\t}\n\n\tsetUniform2fv(name, value) {\n\t\tif (this.uniform2fvCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform2fvCache[name];\n\t\t\tif (\n\t\t\t\tvalue[0] === cache[0] &&\n\t\t\t\tvalue[1] === cache[1]\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform2fvCache[name] = value;\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform2fv(loc, value);\n\t}\n\n\tsetUniform2iv(name, value) {\n\t\tif (this.uniform2ivCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform2ivCache[name];\n\t\t\tif (\n\t\t\t\tvalue[0] === cache[0] &&\n\t\t\t\tvalue[1] === cache[1]\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform2ivCache[name] = value;\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform2iv(loc, value);\n\t}\n\n\tsetUniform3fv(name, value) {\n\t\tif (this.uniform3fvCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform3fvCache[name];\n\t\t\tif (\n\t\t\t\tvalue[0] === cache[0] &&\n\t\t\t\tvalue[1] === cache[1] &&\n\t\t\t\tvalue[2] === cache[2]\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform3fvCache[name] = value;\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform3fv(loc, value);\n\t}\n\n\tsetUniform3iv(name, value) {\n\t\tif (this.uniform3ivCache.hasOwnProperty(name)) {\n\t\t\tconst cache = this.uniform3ivCache[name];\n\t\t\tif (\n\t\t\t\tvalue[0] === cache[0] &&\n\t\t\t\tvalue[1] === cache[1] &&\n\t\t\t\tvalue[2] === cache[2]\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tthis.uniform3ivCache[name] = value;\n\t\tconst loc = this.getUniformLocation(name);\n\t\tthis.context.uniform3iv(loc, value);\n\t}\n\n\t/**\n\t * @desc Return WebGlUniformLocation for various variables\n\t * related to webGl program, such as user-defined variables,\n\t * as well as, dimension sizes, etc.\n\t */\n\tgetUniformLocation(name) {\n\t\tif (this.programUniformLocationCache.hasOwnProperty(name)) {\n\t\t\treturn this.programUniformLocationCache[name];\n\t\t}\n\t\treturn this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);\n\t}\n\n\t/**\n\t * @desc Generate Shader artifacts for the kernel program.\n\t * The final object contains HEADER, KERNEL, MAIN_RESULT, and others.\n\t *\n\t * @param {Array} args - The actual parameters sent to the Kernel\n\t * @returns {Object} An object containing the Shader Artifacts(CONSTANTS, HEADER, KERNEL, etc.)\n\t */\n\t_getFragShaderArtifactMap(args) {\n\t\treturn {\n\t\t\tHEADER: this._getHeaderString(),\n\t\t\tLOOP_MAX: this._getLoopMaxString(),\n\t\t\tPLUGINS: this._getPluginsString(),\n\t\t\tCONSTANTS: this._getConstantsString(),\n\t\t\tDECODE32_ENDIANNESS: this._getDecode32EndiannessString(),\n\t\t\tENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),\n\t\t\tDIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),\n\t\t\tMAIN_CONSTANTS: this._getMainConstantsString(),\n\t\t\tMAIN_ARGUMENTS: this._getMainArgumentsString(args),\n\t\t\tKERNEL: this.getKernelString(),\n\t\t\tMAIN_RESULT: this.getMainResultString()\n\t\t};\n\t}\n\n\t/**\n\t * @desc Adds kernel parameters to the Argument Texture,\n\t * binding it to the webGl instance, etc.\n\t *\n\t * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n\t * @param {String} type - Type of the argument\n\t * @param {String} name - Name of the argument\n\t */\n\taddArgument(value, type, name) {\n\t\tconst gl = this.context;\n\t\tconst argumentTexture = this.getArgumentTexture(name);\n\t\tif (value instanceof Texture) {\n\t\t\ttype = value.type;\n\t\t}\n\n\t\tswitch (type) {\n\t\t\tcase 'Array':\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\tcase 'Array2D':\n\t\t\tcase 'Array3D':\n\t\t\t\t{\n\t\t\t\t\tconst dim = utils.getDimensions(value, true);\n\t\t\t\t\tconst bitRatio = this.argumentBitRatios[this.argumentsLength];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Integer':\n\t\t\t\t{\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Float':\n\t\t\tcase 'Number':\n\t\t\t\t{\n\t\t\t\t\tthis.setUniform1f(`user_${name}`, value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Input':\n\t\t\t\t{\n\t\t\t\t\tconst input = value;\n\t\t\t\t\tconst dim = utils.getDimensions(input, true);\n\t\t\t\t\tconst bitRatio = this.argumentBitRatios[this.argumentsLength];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'HTMLImage':\n\t\t\t\t{\n\t\t\t\t\tconst inputImage = value;\n\t\t\t\t\tconst dim = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\tconst size = [inputImage.width, inputImage.height];\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\tconst mipLevel = 0; // the largest mip\n\t\t\t\t\tconst internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\tconst srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\tconst srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\tinternalFormat,\n\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\tinputImage);\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`argument ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\tcase 'NumberTexture':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`argument ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Boolean':\n\t\t\t\t{\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, value ? 1 : 0);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Argument type not supported: ' + value);\n\t\t}\n\t\tthis.argumentsLength++;\n\t}\n\n\t/**\n\t * @desc Adds kernel parameters to the Argument Texture,\n\t * binding it to the context, etc.\n\t *\n\t * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n\t * @param {String} type - Type of the argument\n\t * @param {String} name - Name of the argument\n\t */\n\taddConstant(value, type, name) {\n\t\tconst gl = this.context;\n\t\tconst constantTexture = this.getArgumentTexture(name);\n\t\tif (value instanceof Texture) {\n\t\t\ttype = value.type;\n\t\t}\n\t\tswitch (type) {\n\t\t\tcase 'Array':\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\tcase 'Array2D':\n\t\t\tcase 'Array3D':\n\t\t\t\t{\n\t\t\t\t\tconst dim = utils.getDimensions(value, true);\n\t\t\t\t\tconst bitRatio = this.constantBitRatios[name];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Input':\n\t\t\t\t{\n\t\t\t\t\tconst input = value;\n\t\t\t\t\tconst dim = utils.getDimensions(input, true);\n\t\t\t\t\tconst bitRatio = this.constantBitRatios[name];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.argumentsLength);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'HTMLImage':\n\t\t\t\t{\n\t\t\t\t\tconst inputImage = value;\n\t\t\t\t\tconst dim = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\tconst size = [inputImage.width, inputImage.height];\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\tconst mipLevel = 0; // the largest mip\n\t\t\t\t\tconst internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\tconst srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\tconst srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\tinternalFormat,\n\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\tinputImage);\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`constant ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\tcase 'NumberTexture':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`constant ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\tcase 'Boolean':\n\t\t\tdefault:\n\t\t\t\tthrow new Error('constant type not supported: ' + value);\n\t\t}\n\t\tthis.constantsLength++;\n\t}\n\n\t/**\n\t * @desc Adds kernel parameters to the Argument Texture,\n\t * binding it to the context, etc.\n\t *\n\t * @param {Array|Float32Array|Uint16Array} value - The actual argument supplied to the kernel\n\t * @param {Number} length - the expected total length of the output array\n\t * @param {Object} [Type]\n\t * @returns {Float32Array|Uint16Array|Uint8Array} flattened array to transfer\n\t */\n\tformatArrayTransfer(value, length, Type) {\n\t\tif (this.floatTextures) {\n\t\t\t// length *= 4;\n\t\t}\n\t\tif (utils.isArray(value[0]) || this.optimizeFloatMemory) {\n\t\t\t// not already flat\n\t\t\tconst valuesFlat = new Float32Array(length);\n\t\t\tutils.flattenTo(value, valuesFlat);\n\t\t\treturn valuesFlat;\n\t\t} else {\n\t\t\tswitch (value.constructor) {\n\t\t\t\tcase Uint8Array:\n\t\t\t\tcase Int8Array:\n\t\t\t\tcase Uint16Array:\n\t\t\t\tcase Int16Array:\n\t\t\t\tcase Float32Array:\n\t\t\t\tcase Int32Array:\n\t\t\t\t\tconst valuesFlat = new(Type || value.constructor)(length);\n\t\t\t\t\tutils.flattenTo(value, valuesFlat);\n\t\t\t\t\treturn valuesFlat;\n\t\t\t\tdefault:\n\t\t\t\t\t{\n\t\t\t\t\t\tconst valuesFlat = new Float32Array(length);\n\t\t\t\t\t\tutils.flattenTo(value, valuesFlat);\n\t\t\t\t\t\treturn valuesFlat;\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @desc Get the header string for the program.\n\t * This returns an empty string if no sub-kernels are defined.\n\t *\n\t * @returns {String} result\n\t */\n\t_getHeaderString() {\n\t\treturn (\n\t\t\tthis.subKernels !== null ?\n\t\t\t'#extension GL_EXT_draw_buffers : require\\n' :\n\t\t\t''\n\t\t);\n\t}\n\n\t/**\n\t * @desc Get the maximum loop size String.\n\t * @returns {String} result\n\t */\n\t_getLoopMaxString() {\n\t\treturn (\n\t\t\tthis.loopMaxIterations ?\n\t\t\t` ${parseInt(this.loopMaxIterations)};\\n` :\n\t\t\t' 1000;\\n'\n\t\t);\n\t}\n\n\t_getPluginsString() {\n\t\tif (!this.plugins) return '\\n';\n\t\treturn this.plugins.map(plugin => plugin.source && this.source.match(plugin.functionMatch) ? plugin.source : '').join('\\n');\n\t}\n\n\t/**\n\t * @desc Generate transpiled glsl Strings for constant parameters sent to a kernel\n\t * They can be defined by *hardcodeConstants*\n\t *\n\t * @returns {String} result\n\t */\n\t_getConstantsString() {\n\t\tconst result = [];\n\t\tconst {\n\t\t\tthreadDim,\n\t\t\ttexSize\n\t\t} = this;\n\t\tif (this.hardcodeConstants) {\n\t\t\tresult.push(\n\t\t\t\t`ivec3 uOutputDim = ivec3(${threadDim[0]}, ${threadDim[1]}, ${threadDim[2]})`,\n\t\t\t\t`ivec2 uTexSize = ivec2(${texSize[0]}, ${texSize[1]})`\n\t\t\t);\n\t\t} else {\n\t\t\tresult.push(\n\t\t\t\t'uniform ivec3 uOutputDim',\n\t\t\t\t'uniform ivec2 uTexSize'\n\t\t\t);\n\t\t}\n\n\t\treturn utils.linesToString(result);\n\t}\n\n\t/**\n\t * @desc Get texture coordinate string for the program\n\t * @returns {String} result\n\t */\n\t_getTextureCoordinate() {\n\t\tconst subKernels = this.subKernels;\n\t\tif (subKernels === null || subKernels.length < 1) {\n\t\t\treturn 'varying vec2 vTexCoord;\\n';\n\t\t} else {\n\t\t\treturn 'out vec2 vTexCoord;\\n';\n\t\t}\n\t}\n\n\t/**\n\t * @desc Get Decode32 endianness string for little-endian and big-endian\n\t * @returns {String} result\n\t */\n\t_getDecode32EndiannessString() {\n\t\treturn (\n\t\t\tthis.endianness === 'LE' ?\n\t\t\t'' :\n\t\t\t'  texel.rgba = texel.abgr;\\n'\n\t\t);\n\t}\n\n\t/**\n\t * @desc Get Encode32 endianness string for little-endian and big-endian\n\t * @returns {String} result\n\t */\n\t_getEncode32EndiannessString() {\n\t\treturn (\n\t\t\tthis.endianness === 'LE' ?\n\t\t\t'' :\n\t\t\t'  texel.rgba = texel.abgr;\\n'\n\t\t);\n\t}\n\n\t/**\n\t * @desc if fixIntegerDivisionAccuracy provide method to replace /\n\t * @returns {String} result\n\t */\n\t_getDivideWithIntegerCheckString() {\n\t\treturn this.fixIntegerDivisionAccuracy ?\n\t\t\t`float div_with_int_check(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x)/int(y));\n  }\n  return x / y;\n}` :\n\t\t\t'';\n\t}\n\n\t/**\n\t * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\n\t * @param {Array} args - The actual parameters sent to the Kernel\n\t * @returns {String} result\n\t */\n\t_getMainArgumentsString(args) {\n\t\tconst result = [];\n\t\tconst {\n\t\t\targumentTypes,\n\t\t\targumentNames,\n\t\t\thardcodeConstants,\n\t\t\toptimizeFloatMemory,\n\t\t\tprecision,\n\t\t} = this;\n\t\tfor (let i = 0; i < argumentNames.length; i++) {\n\t\t\tconst value = args[i];\n\t\t\tconst name = argumentNames[i];\n\t\t\tconst type = argumentTypes[i];\n\t\t\tif (hardcodeConstants) {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tconst dim = utils.getDimensions(value, true);\n\t\t\t\t\t\tconst size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: optimizeFloatMemory,\n\t\t\t\t\t\t\tfloatOutput: precision === 'single',\n\t\t\t\t\t\t}, dim);\n\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform sampler2D user_${name}`,\n\t\t\t\t\t\t\t`ivec2 user_${name}Size = ivec2(${size[0]}, ${size[1]})`,\n\t\t\t\t\t\t\t`ivec3 user_${name}Dim = ivec3(${dim[0]}, ${dim[1]}, ${dim[2]})`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tresult.push(`float user_${name} = ${value}.0`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\t\tresult.push(`float user_${name} = ${ Number.isInteger(value) ? value + '.0' : value }`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Argument type ${type} not supported in WebGL`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform sampler2D user_${name}`,\n\t\t\t\t\t\t\t`uniform ivec2 user_${name}Size`,\n\t\t\t\t\t\t\t`uniform ivec3 user_${name}Dim`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tresult.push(`uniform int user_${name}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\t\tresult.push(`uniform float user_${name}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Boolean':\n\t\t\t\t\t\tresult.push(`uniform int user_${name}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Argument type ${type} not supported in WebGL`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn utils.linesToString(result);\n\t}\n\n\t_getMainConstantsString() {\n\t\tconst result = [];\n\t\tconst {\n\t\t\tconstants\n\t\t} = this;\n\t\tif (constants) {\n\t\t\tfor (let name in constants) {\n\t\t\t\tif (!constants.hasOwnProperty(name)) continue;\n\t\t\t\tlet value = constants[name];\n\t\t\t\tlet type = utils.getVariableType(value);\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tresult.push('const int constants_' + name + ' = ' + parseInt(value));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\t\tresult.push('const float constants_' + name + ' = ' + parseFloat(value));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform sampler2D constants_${name}`,\n\t\t\t\t\t\t\t`uniform ivec2 constants_${name}Size`,\n\t\t\t\t\t\t\t`uniform ivec3 constants_${name}Dim`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Boolean':\n\t\t\t\t\t\tresult.push('const bool constants_' + name + ' = ' + (value ? 'true' : 'false'));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported constant ${name} type ${type}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn utils.linesToString(result);\n\t}\n\n\t/**\n\t * @desc Get Kernel program string (in *glsl*) for a kernel.\n\t * @returns {String} result\n\t */\n\tgetKernelString() {\n\t\tlet kernelResultDeclaration;\n\t\tswitch (this.returnType) {\n\t\t\tcase 'Array(2)':\n\t\t\t\tkernelResultDeclaration = 'vec2 kernelResult';\n\t\t\t\tbreak;\n\t\t\tcase 'Array(3)':\n\t\t\t\tkernelResultDeclaration = 'vec3 kernelResult';\n\t\t\t\tbreak;\n\t\t\tcase 'Array(4)':\n\t\t\t\tkernelResultDeclaration = 'vec4 kernelResult';\n\t\t\t\tbreak;\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Float':\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\t\tkernelResultDeclaration = 'float kernelResult';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.graphical) {\n\t\t\t\t\tkernelResultDeclaration = 'float kernelResult';\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`unrecognized output type \"${ this.returnType }\"`);\n\t\t\t\t}\n\t\t}\n\n\t\tconst result = [];\n\t\tconst subKernels = this.subKernels;\n\t\tif (subKernels !== null) {\n\t\t\tresult.push(\n\t\t\t\tkernelResultDeclaration\n\t\t\t);\n\t\t\tfor (let i = 0; i < subKernels.length; i++) {\n\t\t\t\tresult.push(\n\t\t\t\t\t`float subKernelResult_${ subKernels[i].name } = 0.0`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(\n\t\t\t\tkernelResultDeclaration\n\t\t\t);\n\t\t}\n\n\t\treturn utils.linesToString(result) + this.translatedSource;\n\t}\n\n\tgetMainResultGraphical() {\n\t\treturn utils.linesToString([\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  gl_FragColor = actualColor',\n\t\t]);\n\t}\n\n\tgetMainResultPackedPixels() {\n\t\tswitch (this.returnType) {\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\t\treturn utils.linesToString(this.getMainResultKernelPackedPixels()) +\n\t\t\t\t\tutils.linesToString(this.getMainResultSubKernelPackedPixels());\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n\t\t}\n\t}\n\n\tgetMainResultKernelPackedPixels() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  gl_FragData[0] = encode32(kernelResult)'\n\t\t];\n\t}\n\n\tgetMainResultSubKernelPackedPixels() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\tresult.push(\n\t\t\t\t`  gl_FragData[${i + 1}] = encode32(subKernelResult_${this.subKernels[i].name})`\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultMemoryOptimizedFloats() {\n\t\tconst result = [\n\t\t\t'  index *= 4',\n\t\t];\n\n\t\tswitch (this.returnType) {\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\t\tconst channels = ['r', 'g', 'b', 'a'];\n\t\t\t\tfor (let i = 0; i < channels.length; i++) {\n\t\t\t\t\tconst channel = channels[i];\n\t\t\t\t\tthis.getMainResultKernelMemoryOptimizedFloats(result, channel);\n\t\t\t\t\tthis.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\n\t\t\t\t\tif (i + 1 < channels.length) {\n\t\t\t\t\t\tresult.push('  index += 1');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\n\t\t}\n\n\t\treturn utils.linesToString(result);\n\t}\n\n\tgetMainResultKernelMemoryOptimizedFloats(result, channel) {\n\t\tresult.push(\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t`  gl_FragData[0].${channel} = kernelResult`,\n\t\t);\n\t}\n\n\tgetMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\tresult.push(\n\t\t\t\t`  gl_FragData[${i + 1}].${channel} = subKernelResult_${this.subKernels[i].name}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tgetMainResultKernelNumberTexture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  gl_FragData[0][0] = kernelResult',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelNumberTexture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultKernelArray2Texture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  gl_FragData[0][0] = kernelResult[0]',\n\t\t\t'  gl_FragData[0][1] = kernelResult[1]',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelArray2Texture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n\t\t\t\t`  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultKernelArray3Texture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  gl_FragData[0][0] = kernelResult[0]',\n\t\t\t'  gl_FragData[0][1] = kernelResult[1]',\n\t\t\t'  gl_FragData[0][2] = kernelResult[2]',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelArray3Texture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  gl_FragData[${i + 1}][0] = subKernelResult_${this.subKernels[i].name}[0]`,\n\t\t\t\t`  gl_FragData[${i + 1}][1] = subKernelResult_${this.subKernels[i].name}[1]`,\n\t\t\t\t`  gl_FragData[${i + 1}][2] = subKernelResult_${this.subKernels[i].name}[2]`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultKernelArray4Texture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  gl_FragData[0] = kernelResult',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelArray4Texture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  gl_FragData[${i + 1}] = subKernelResult_${this.subKernels[i].name}`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * @desc Get main result string with checks for precision, graphical, subKernelsResults, etc.\n\t * @returns {String} result\n\t */\n\t_getMainResultString() {\n\t\tconst {\n\t\t\tsubKernels,\n\t\t\tprecision,\n\t\t\tfloatTextures,\n\t\t\tgraphical,\n\t\t\tpipeline\n\t\t} = this;\n\t\tconst result = [];\n\n\t\tif (precision === 'single') {\n\t\t\tresult.push('  index *= 4');\n\t\t}\n\n\t\tif (graphical) {\n\t\t\tresult.push(\n\t\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t\t'  kernel()',\n\t\t\t\t'  gl_FragColor = actualColor',\n\t\t\t);\n\t\t} else if (precision === 'single') {\n\t\t\tconst channels = ['r', 'g', 'b', 'a'];\n\n\t\t\tfor (let i = 0; i < channels.length; ++i) {\n\t\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)');\n\t\t\t\tresult.push('  kernel()');\n\n\t\t\t\tif (subKernels) {\n\t\t\t\t\tresult.push(`  gl_FragData[0].${channels[i]} = kernelResult`);\n\n\t\t\t\t\tfor (let j = 0; j < subKernels.length; ++j) {\n\t\t\t\t\t\tresult.push(`  gl_FragData[${j + 1}].${channels[i]} = subKernelResult_${subKernels[j].name}`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(`  gl_FragColor.${channels[i]} = kernelResult`);\n\t\t\t\t}\n\n\t\t\t\tif (i < channels.length - 1) {\n\t\t\t\t\tresult.push('  index += 1');\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (subKernels !== null) {\n\t\t\tresult.push('  threadId = indexTo3D(index, uOutputDim)');\n\t\t\tresult.push('  kernel()');\n\t\t\tresult.push('  gl_FragData[0] = encode32(kernelResult)');\n\t\t\tfor (let i = 0; i < subKernels.length; i++) {\n\t\t\t\tresult.push(`  gl_FragData[${i + 1}] = encode32(subKernelResult_${subKernels[i].name})`);\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(\n\t\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t\t'  kernel()',\n\t\t\t\t'  gl_FragColor = encode32(kernelResult)',\n\t\t\t);\n\t\t}\n\n\t\treturn utils.linesToString(result);\n\t}\n\n\t/**\n\t * @param {String} src - Shader string\n\t * @param {Object} map - Variables/Constants associated with shader\n\t */\n\treplaceArtifacts(src, map) {\n\t\treturn src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\\n/g, (match, artifact) => {\n\t\t\tif (map.hasOwnProperty(artifact)) {\n\t\t\t\treturn map[artifact];\n\t\t\t}\n\t\t\tthrow `unhandled artifact ${artifact}`;\n\t\t});\n\t}\n\n\t/**\n\t * @desc Get the fragment shader String.\n\t * If the String hasn't been compiled yet,\n\t * then this method compiles it as well\n\t *\n\t * @param {Array} args - The actual parameters sent to the Kernel\n\t * @returns {string} Fragment Shader string\n\t */\n\tgetFragmentShader(args) {\n\t\tif (this.compiledFragmentShader !== null) {\n\t\t\treturn this.compiledFragmentShader;\n\t\t}\n\t\treturn this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));\n\t}\n\n\t/**\n\t * @desc Get the vertical shader String\n\t * @param {Array|IArguments} args - The actual parameters sent to the Kernel\n\t * @returns {string} Vertical Shader string\n\t */\n\tgetVertexShader(args) {\n\t\tif (this.compiledVertexShader !== null) {\n\t\t\treturn this.compiledVertexShader;\n\t\t}\n\t\treturn this.compiledVertexShader = this.constructor.vertexShader;\n\t}\n\n\t/**\n\t * @desc Returns the *pre-compiled* Kernel as a JS Object String, that can be reused.\n\t */\n\ttoString() {\n\t\treturn webGLKernelString(this);\n\t}\n\n\tdestroy(removeCanvasReferences) {\n\t\tif (this.outputTexture) {\n\t\t\tthis.context.deleteTexture(this.outputTexture);\n\t\t}\n\t\tif (this.buffer) {\n\t\t\tthis.context.deleteBuffer(this.buffer);\n\t\t}\n\t\tif (this.framebuffer) {\n\t\t\tthis.context.deleteFramebuffer(this.framebuffer);\n\t\t}\n\t\tif (this.vertShader) {\n\t\t\tthis.context.deleteShader(this.vertShader);\n\t\t}\n\t\tif (this.fragShader) {\n\t\t\tthis.context.deleteShader(this.fragShader);\n\t\t}\n\t\tif (this.program) {\n\t\t\tthis.context.deleteProgram(this.program);\n\t\t}\n\n\t\tconst keys = Object.keys(this.textureCache);\n\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst name = keys[i];\n\t\t\tthis.context.deleteTexture(this.textureCache[name]);\n\t\t}\n\n\t\tif (this.subKernelOutputTextures) {\n\t\t\tfor (let i = 0; i < this.subKernelOutputTextures.length; i++) {\n\t\t\t\tthis.context.deleteTexture(this.subKernelOutputTextures[i]);\n\t\t\t}\n\t\t}\n\t\tif (removeCanvasReferences) {\n\t\t\tconst idx = canvases.indexOf(this.canvas);\n\t\t\tif (idx >= 0) {\n\t\t\t\tcanvases[idx] = null;\n\t\t\t\tmaxTexSizes[idx] = null;\n\t\t\t}\n\t\t}\n\t\tthis.destroyExtensions();\n\t\tdelete this.context;\n\t\tdelete this.canvas;\n\t}\n\n\tdestroyExtensions() {\n\t\tthis.extensions.OES_texture_float = null;\n\t\tthis.extensions.OES_texture_float_linear = null;\n\t\tthis.extensions.OES_element_index_uint = null;\n\t\tthis.extensions.WEBGL_draw_buffers = null;\n\t}\n\n\tstatic destroyContext(context) {\n\t\tconst extension = context.getExtension('WEBGL_lose_context');\n\t\tif (extension) {\n\t\t\textension.loseContext();\n\t\t}\n\t}\n\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\t\tjson.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();\n\t\treturn json;\n\t}\n}\n\nmodule.exports = {\n\tWebGLKernel\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl/vertex-shader.js":
/*!*****************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl/vertex-shader.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const vertexShader = `precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n\nmodule.exports = {\n\tvertexShader\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl/vertex-shader.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl2/fragment-shader.js":
/*!********************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl2/fragment-shader.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const fragmentShader = `#version 300 es\n__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY\\'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n\tint channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 encode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0 - exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent * 0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + (texDim.x * (xyz.y + (texDim.y * xyz.z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + (texDim.x * (xyz.y + (texDim.y * xyz.z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + (texDim.x * (xyz.y + (texDim.y * xyz.z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  ivec3 xyz = ivec3(x, y, z);\n  int index = xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}`;\n\nmodule.exports = {\n\tfragmentShader\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl2/fragment-shader.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl2/function-node.js":
/*!******************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl2/function-node.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tWebGLFunctionNode\n} = __webpack_require__(/*! ../web-gl/function-node */ \"./node_modules/gpu.js/src/backend/web-gl/function-node.js\");\n\n/**\n * @class WebGL2FunctionNode\n * @desc [INTERNAL] Takes in a function node, and does all the AST voodoo required to toString its respective webGL code.\n * @extends WebGLFunctionNode\n * @returns the converted webGL function string\n */\nclass WebGL2FunctionNode extends WebGLFunctionNode {\n\n\t/**\n\t * @desc Parses the abstract syntax tree for *identifier* expression\n\t * @param {Object} idtNode - An ast Node\n\t * @param {Array} retArr - return array string\n\t * @returns {Array} the append retArr\n\t */\n\tastIdentifierExpression(idtNode, retArr) {\n\t\tif (idtNode.type !== 'Identifier') {\n\t\t\tthrow this.astErrorOutput(\n\t\t\t\t'IdentifierExpression - not an Identifier',\n\t\t\t\tidtNode\n\t\t\t);\n\t\t}\n\n\t\tconst type = this.getType(idtNode);\n\n\t\tif (idtNode.name === 'Infinity') {\n\t\t\tretArr.push('intBitsToFloat(2139095039)');\n\t\t} else if (type === 'Boolean') {\n\t\t\tif (this.argumentNames.indexOf(idtNode.name) > -1) {\n\t\t\t\tretArr.push(`bool(user_${idtNode.name})`);\n\t\t\t} else {\n\t\t\t\tretArr.push(`user_${idtNode.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconst userArgumentName = this.getKernelArgumentName(idtNode.name);\n\t\t\tif (userArgumentName) {\n\t\t\t\tretArr.push(`user_${userArgumentName}`);\n\t\t\t} else {\n\t\t\t\tretArr.push(`user_${idtNode.name}`);\n\t\t\t}\n\t\t}\n\n\t\treturn retArr;\n\t}\n}\n\nmodule.exports = {\n\tWebGL2FunctionNode\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl2/function-node.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl2/kernel.js":
/*!***********************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl2/kernel.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tWebGLKernel\n} = __webpack_require__(/*! ../web-gl/kernel */ \"./node_modules/gpu.js/src/backend/web-gl/kernel.js\");\nconst {\n\tWebGL2FunctionNode\n} = __webpack_require__(/*! ./function-node */ \"./node_modules/gpu.js/src/backend/web-gl2/function-node.js\");\nconst {\n\tFunctionBuilder\n} = __webpack_require__(/*! ../function-builder */ \"./node_modules/gpu.js/src/backend/function-builder.js\");\nconst {\n\tutils\n} = __webpack_require__(/*! ../../utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tTexture\n} = __webpack_require__(/*! ../../texture */ \"./node_modules/gpu.js/src/texture.js\");\nconst {\n\tfragmentShader\n} = __webpack_require__(/*! ./fragment-shader */ \"./node_modules/gpu.js/src/backend/web-gl2/fragment-shader.js\");\nconst {\n\tvertexShader\n} = __webpack_require__(/*! ./vertex-shader */ \"./node_modules/gpu.js/src/backend/web-gl2/vertex-shader.js\");\n\nlet isSupported = null;\nlet testCanvas = null;\nlet testContext = null;\nlet testExtensions = null;\nlet features = null;\n\nclass WebGL2Kernel extends WebGLKernel {\n\tstatic get isSupported() {\n\t\tif (isSupported !== null) {\n\t\t\treturn isSupported;\n\t\t}\n\t\tthis.setupFeatureChecks();\n\t\tisSupported = this.isContextMatch(testContext);\n\t\treturn isSupported;\n\t}\n\n\tstatic setupFeatureChecks() {\n\t\tif (typeof document !== 'undefined') {\n\t\t\ttestCanvas = document.createElement('canvas');\n\t\t} else if (typeof OffscreenCanvas !== 'undefined') {\n\t\t\ttestCanvas = new OffscreenCanvas(0, 0);\n\t\t}\n\t\tif (!testCanvas) return;\n\t\ttestContext = testCanvas.getContext('webgl2');\n\t\tif (!testContext || !testContext.getExtension) return;\n\t\ttestExtensions = {\n\t\t\tEXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),\n\t\t\tOES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),\n\t\t};\n\t\tfeatures = this.getFeatures();\n\t}\n\n\tstatic isContextMatch(context) {\n\t\t// from global\n\t\tif (typeof WebGL2RenderingContext !== 'undefined') {\n\t\t\treturn context instanceof WebGL2RenderingContext;\n\t\t}\n\t\treturn false;\n\t}\n\n\tstatic getFeatures() {\n\t\treturn Object.freeze({\n\t\t\tisFloatRead: this.getIsFloatRead(),\n\t\t\tisIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),\n\t\t\tkernelMap: true,\n\t\t\tisTextureFloat: true,\n\t\t});\n\t}\n\n\tstatic getIsTextureFloat() {\n\t\treturn true;\n\t}\n\n\tstatic getIsIntegerDivisionAccurate() {\n\t\treturn super.getIsIntegerDivisionAccurate();\n\t}\n\n\tstatic get testCanvas() {\n\t\treturn testCanvas;\n\t}\n\n\tstatic get testContext() {\n\t\treturn testContext;\n\t}\n\n\tstatic get features() {\n\t\treturn features;\n\t}\n\n\tstatic get fragmentShader() {\n\t\treturn fragmentShader;\n\t}\n\tstatic get vertexShader() {\n\t\treturn vertexShader;\n\t}\n\n\tinitContext() {\n\t\tconst settings = {\n\t\t\talpha: false,\n\t\t\tdepth: false,\n\t\t\tantialias: false\n\t\t};\n\t\tconst context = this.canvas.getContext('webgl2', settings);\n\t\treturn context;\n\t}\n\n\tinitExtensions() {\n\t\tthis.extensions = {\n\t\t\tEXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),\n\t\t\tOES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),\n\t\t};\n\t}\n\n\tvalidateSettings() {\n\t\tif (!this.validate) {\n\t\t\tthis.texSize = utils.dimToTexSize({\n\t\t\t\tfloatTextures: this.optimizeFloatMemory,\n\t\t\t\tfloatOutput: this.precision === 'single',\n\t\t\t}, this.output, true);\n\t\t\treturn;\n\t\t}\n\n\t\tconst features = this.constructor.features;\n\t\tif (this.precision === 'single' && this.floatOutputForce !== true && !features.isFloatRead) {\n\t\t\tthrow new Error('Float texture outputs are not supported');\n\t\t} else if (!this.graphical && this.precision === null) {\n\t\t\tthis.precision = features.isFloatRead ? 'single' : 'unsigned';\n\t\t}\n\n\t\tif (this.fixIntegerDivisionAccuracy === null) {\n\t\t\tthis.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;\n\t\t} else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {\n\t\t\tthis.fixIntegerDivisionAccuracy = false;\n\t\t}\n\n\t\tthis.checkOutput();\n\n\t\tif (!this.output || this.output.length === 0) {\n\t\t\tif (arguments.length !== 1) {\n\t\t\t\tthrow new Error('Auto output only supported for kernels with only one input');\n\t\t\t}\n\n\t\t\tconst argType = utils.getVariableType(arguments[0]);\n\t\t\tswitch (argType) {\n\t\t\t\tcase 'Array':\n\t\t\t\t\tthis.output = utils.getDimensions(argType);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'NumberTexture':\n\t\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tthis.output = arguments[0].output;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Auto output not supported for input type: ' + argType);\n\t\t\t}\n\t\t}\n\n\t\tif (this.graphical) {\n\t\t\tif (this.output.length !== 2) {\n\t\t\t\tthrow new Error('Output must have 2 dimensions on graphical mode');\n\t\t\t}\n\n\t\t\tif (this.precision === 'single') {\n\t\t\t\tconsole.warn('Cannot use graphical mode and single precision at the same time');\n\t\t\t\tthis.precision = 'unsigned';\n\t\t\t}\n\n\t\t\tthis.texSize = utils.clone(this.output);\n\t\t\treturn;\n\t\t} else if (!this.graphical && this.precision === null && features.isTextureFloat) {\n\t\t\tthis.precision = 'single';\n\t\t}\n\n\t\tthis.texSize = utils.dimToTexSize({\n\t\t\tfloatTextures: !this.optimizeFloatMemory,\n\t\t\tfloatOutput: this.precision === 'single',\n\t\t}, this.output, true);\n\n\t\tif (this.precision === 'single' || this.floatOutputForce) {\n\t\t\tthis.context.getExtension('EXT_color_buffer_float');\n\t\t}\n\t}\n\n\ttranslateSource() {\n\t\tconst functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {\n\t\t\tfixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy\n\t\t});\n\t\tthis.translatedSource = functionBuilder.getPrototypeString('kernel');\n\t\tif (!this.graphical && !this.returnType) {\n\t\t\tthis.returnType = functionBuilder.getKernelResultType();\n\t\t}\n\t}\n\n\trun() {\n\t\tif (this.program === null) {\n\t\t\tthis.build.apply(this, arguments);\n\t\t}\n\t\tconst {\n\t\t\targumentNames,\n\t\t\targumentTypes,\n\t\t\ttexSize\n\t\t} = this;\n\t\tconst gl = this.context;\n\n\t\tgl.useProgram(this.program);\n\t\tgl.scissor(0, 0, texSize[0], texSize[1]);\n\n\t\tif (!this.hardcodeConstants) {\n\t\t\tthis.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));\n\t\t\tthis.setUniform2iv('uTexSize', texSize);\n\t\t}\n\n\t\tthis.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);\n\n\t\tthis.argumentsLength = 0;\n\t\tfor (let texIndex = 0; texIndex < argumentNames.length; texIndex++) {\n\t\t\tthis.addArgument(arguments[texIndex], argumentTypes[texIndex], argumentNames[texIndex]);\n\t\t}\n\n\t\tif (this.plugins) {\n\t\t\tfor (let i = 0; i < this.plugins.length; i++) {\n\t\t\t\tconst plugin = this.plugins[i];\n\t\t\t\tif (plugin.onBeforeRun) {\n\t\t\t\t\tplugin.onBeforeRun(this);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.graphical) {\n\t\t\tif (this.pipeline) {\n\t\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\t\t\tif (!this.outputTexture || this.immutable) {\n\t\t\t\t\tthis._setupOutputTexture();\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\t\treturn new Texture({\n\t\t\t\t\ttexture: this.outputTexture,\n\t\t\t\t\tsize: texSize,\n\t\t\t\t\tdimensions: this.threadDim,\n\t\t\t\t\toutput: this.output,\n\t\t\t\t\tcontext: this.context,\n\t\t\t\t\tgpu: this.gpu,\n\t\t\t\t\ttype: this.getReturnTextureType(),\n\t\t\t\t});\n\t\t\t}\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\t\t\treturn;\n\t\t}\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\t\tif (this.immutable) {\n\t\t\tthis._setupOutputTexture();\n\t\t}\n\n\t\tif (this.subKernels !== null) {\n\t\t\tif (this.immutable) {\n\t\t\t\tthis.subKernelOutputTextures = [];\n\t\t\t\tthis._setupSubOutputTextures(this.subKernels.length);\n\t\t\t}\n\t\t\tgl.drawBuffers(this.drawBuffersMap);\n\t\t}\n\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n\t\tif (this.subKernelOutputTextures !== null) {\n\t\t\tif (this.subKernels !== null) {\n\t\t\t\tconst output = {\n\t\t\t\t\tresult: this.renderOutput()\n\t\t\t\t};\n\t\t\t\tif (this.pipeline) {\n\t\t\t\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\t\toutput[this.subKernels[i].property] = new Texture({\n\t\t\t\t\t\t\ttexture: this.subKernelOutputTextures[i],\n\t\t\t\t\t\t\tsize: texSize,\n\t\t\t\t\t\t\tdimensions: this.threadDim,\n\t\t\t\t\t\t\toutput: this.output,\n\t\t\t\t\t\t\tcontext: this.context,\n\t\t\t\t\t\t\tgpu: this.gpu,\n\t\t\t\t\t\t\ttype: this.getReturnTextureType(),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\t\t\t\toutput[this.subKernels[i].property] = new Texture({\n\t\t\t\t\t\t\ttexture: this.subKernelOutputTextures[i],\n\t\t\t\t\t\t\tsize: texSize,\n\t\t\t\t\t\t\tdimensions: this.threadDim,\n\t\t\t\t\t\t\toutput: this.output,\n\t\t\t\t\t\t\tcontext: this.context,\n\t\t\t\t\t\t\tgpu: this.gpu,\n\t\t\t\t\t\t\ttype: this.getReturnTextureType(),\n\t\t\t\t\t\t}).toArray();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\n\t\treturn this.renderOutput();\n\t}\n\n\tdrawBuffers() {\n\t\tthis.context.drawBuffers(this.drawBuffersMap);\n\t}\n\n\tgetOutputTexture() {\n\t\treturn this.outputTexture;\n\t}\n\n\t_setupOutputTexture() {\n\t\tconst {\n\t\t\ttexSize\n\t\t} = this;\n\t\tconst gl = this.context;\n\t\tconst texture = this.outputTexture = gl.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentNames.length);\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\tif (this.precision === 'single') {\n\t\t\tif (this.pipeline) {\n\t\t\t\tswitch (this.returnType) {\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tif (this.optimizeFloatMemory) {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.R32F, texSize[0], texSize[1], 0, gl.RED, gl.FLOAT, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(2)':\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RG32F, texSize[0], texSize[1], 0, gl.RG, gl.FLOAT, null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(3)':\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB32F, texSize[0], texSize[1], 0, gl.RGB, gl.FLOAT, null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array(4)':\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('Unhandled return type');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t}\n\t\t} else {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t}\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\t}\n\n\t_setupSubOutputTextures(length) {\n\t\tconst {\n\t\t\ttexSize\n\t\t} = this;\n\t\tconst gl = this.context;\n\t\tconst drawBuffersMap = this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];\n\t\tconst textures = this.subKernelOutputTextures = [];\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tconst texture = this.context.createTexture();\n\t\t\ttextures.push(texture);\n\t\t\tdrawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);\n\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentNames.length + i);\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t// TODO: upgrade this\n\t\t\tif (this.precision === 'single') {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);\n\t\t\t} else {\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\t\t}\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, texture, 0);\n\t\t}\n\t}\n\n\n\t/**\n\t * @desc Adds kernel parameters to the Argument Texture,\n\t * binding it to the context, etc.\n\t *\n\t * @param {Array|Texture|Number|Input} value - The actual argument supplied to the kernel\n\t * @param {String} type - Type of the argument\n\t * @param {String} name - Name of the argument\n\t */\n\taddArgument(value, type, name) {\n\t\tconst gl = this.context;\n\t\tconst argumentTexture = this.getArgumentTexture(name);\n\t\tif (value instanceof Texture) {\n\t\t\ttype = value.type;\n\t\t}\n\t\tswitch (type) {\n\t\t\tcase 'Array':\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\tcase 'Array2D':\n\t\t\tcase 'Array3D':\n\t\t\t\t{\n\t\t\t\t\tconst dim = utils.getDimensions(value, true);\n\t\t\t\t\tconst bitRatio = this.argumentBitRatios[this.argumentsLength];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\tcase 'Number':\n\t\t\t\t{\n\t\t\t\t\tthis.setUniform1f(`user_${name}`, value);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Input':\n\t\t\t\t{\n\t\t\t\t\tconst input = value;\n\t\t\t\t\tconst dim = utils.getDimensions(input, true);\n\t\t\t\t\tconst bitRatio = this.argumentBitRatios[this.argumentsLength];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'HTMLImage':\n\t\t\t\t{\n\t\t\t\t\tconst inputImage = value;\n\t\t\t\t\tconst dim = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\tconst size = [inputImage.width, inputImage.height];\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, argumentTexture);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\tconst mipLevel = 0; // the largest mip\n\t\t\t\t\tconst internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\tconst srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\tconst srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\tinternalFormat,\n\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\tinputImage);\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'HTMLImageArray':\n\t\t\t\t{\n\t\t\t\t\tconst inputImages = value;\n\t\t\t\t\tconst dim = [inputImages[0].width, inputImages[0].height, inputImages.length];\n\t\t\t\t\tconst size = [inputImages[0].width, inputImages[0].height];\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D_ARRAY, argumentTexture);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t// Upload the images into the texture.\n\t\t\t\t\tconst mipLevel = 0; // the largest mip\n\t\t\t\t\tconst internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\tconst width = inputImages[0].width;\n\t\t\t\t\tconst height = inputImages[0].height;\n\t\t\t\t\tconst textureDepth = inputImages.length;\n\t\t\t\t\tconst border = 0;\n\t\t\t\t\tconst srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\tconst srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\tgl.texImage3D(\n\t\t\t\t\t\tgl.TEXTURE_2D_ARRAY,\n\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\tinternalFormat,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\theight,\n\t\t\t\t\t\ttextureDepth,\n\t\t\t\t\t\tborder,\n\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\tnull\n\t\t\t\t\t);\n\t\t\t\t\tfor (let i = 0; i < inputImages.length; i++) {\n\t\t\t\t\t\tconst xOffset = 0;\n\t\t\t\t\t\tconst yOffset = 0;\n\t\t\t\t\t\tconst imageDepth = 1;\n\t\t\t\t\t\tgl.texSubImage3D(\n\t\t\t\t\t\t\tgl.TEXTURE_2D_ARRAY,\n\t\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\t\txOffset,\n\t\t\t\t\t\t\tyOffset,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tinputImages[i].width,\n\t\t\t\t\t\t\tinputImages[i].height,\n\t\t\t\t\t\t\timageDepth,\n\t\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\t\tinputImages[i]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`argument ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\tcase 'NumberTexture':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`argument ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength + this.argumentsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`user_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`user_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, this.argumentsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Boolean':\n\t\t\t\t{\n\t\t\t\t\tthis.setUniform1i(`user_${name}`, value ? 1 : 0);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Argument type not supported: ' + value);\n\t\t}\n\t\tthis.argumentsLength++;\n\t}\n\n\t_getMainConstantsString() {\n\t\tconst result = [];\n\t\tif (this.constants) {\n\t\t\tfor (let name in this.constants) {\n\t\t\t\tif (!this.constants.hasOwnProperty(name)) continue;\n\t\t\t\tlet value = this.constants[name];\n\t\t\t\tlet type = utils.getVariableType(value);\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tresult.push('const int constants_' + name + ' = ' + parseInt(value));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\t\tresult.push('const float constants_' + name + ' = ' + parseFloat(value));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform highp sampler2D constants_${ name }`,\n\t\t\t\t\t\t\t`uniform highp ivec2 constants_${ name }Size`,\n\t\t\t\t\t\t\t`uniform highp ivec3 constants_${ name }Dim`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform highp sampler2DArray constants_${ name }`,\n\t\t\t\t\t\t\t`uniform highp ivec2 constants_${ name }Size`,\n\t\t\t\t\t\t\t`uniform highp ivec3 constants_${ name }Dim`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Boolean':\n\t\t\t\t\t\tresult.push('const bool constants_' + name + ' = ' + (value ? 'true' : 'false'));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Unsupported constant ${ name } type ${ type }`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn utils.linesToString(result);\n\t}\n\n\t/**\n\t * @desc Adds kernel parameters to the Argument Texture,\n\t * binding it to the context, etc.\n\t *\n\t * @param {Array|Texture|Number} value - The actual argument supplied to the kernel\n\t * @param {String} type - Type of the argument\n\t * @param {String} name - Name of the argument\n\t */\n\taddConstant(value, type, name) {\n\t\tconst gl = this.context;\n\t\tconst constantTexture = this.getArgumentTexture(name);\n\t\tif (value instanceof Texture) {\n\t\t\ttype = value.type;\n\t\t}\n\t\tswitch (type) {\n\t\t\tcase 'Array':\n\t\t\tcase 'Array(2)':\n\t\t\tcase 'Array(3)':\n\t\t\tcase 'Array(4)':\n\t\t\tcase 'Array2D':\n\t\t\tcase 'Array3D':\n\t\t\t\t{\n\t\t\t\t\tconst dim = utils.getDimensions(value, true);\n\t\t\t\t\tconst bitRatio = this.constantBitRatios[name];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Input':\n\t\t\t\t{\n\t\t\t\t\tconst input = value;\n\t\t\t\t\tconst dim = utils.getDimensions(input, true);\n\t\t\t\t\tconst bitRatio = this.constantBitRatios[name];\n\t\t\t\t\tif (this.precision === 'single') {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedFloatTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * bitRatio;\n\t\t\t\t\t\t// TODO: better handle 16 and 8 bit?\n\t\t\t\t\t\t// const ext = gl.getExtension('OES_texture_half_float');\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length, Float32Array);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, textureSize[0], textureSize[1], 0, gl.RGBA, gl.FLOAT, valuesFlat);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst textureSize = utils.getMemoryOptimizedPackedTextureSize(dim, bitRatio);\n\t\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n\t\t\t\t\t\tconst length = textureSize[0] * textureSize[1] * (4 / bitRatio);\n\t\t\t\t\t\tconst valuesFlat = this.formatArrayTransfer(input.value, length);\n\t\t\t\t\t\tconst buffer = new Uint8Array(valuesFlat.buffer);\n\t\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, textureSize[0], textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);\n\n\t\t\t\t\t\tif (!this.hardcodeConstants) {\n\t\t\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, textureSize);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.argumentsLength);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'HTMLImage':\n\t\t\t\t{\n\t\t\t\t\tconst inputImage = value;\n\t\t\t\t\tconst dim = [inputImage.width, inputImage.height, 1];\n\t\t\t\t\tconst size = [inputImage.width, inputImage.height];\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, constantTexture);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t// Upload the image into the texture.\n\t\t\t\t\tconst mipLevel = 0; // the largest mip\n\t\t\t\t\tconst internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\tconst srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\tconst srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\tgl.texImage2D(gl.TEXTURE_2D,\n\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\tinternalFormat,\n\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\tinputImage);\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'HTMLImageArray':\n\t\t\t\t{\n\t\t\t\t\tconst inputImages = value;\n\t\t\t\t\tconst dim = [inputImages[0].width, inputImages[0].height, inputImages.length];\n\t\t\t\t\tconst size = [inputImages[0].width, inputImages[0].height];\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D_ARRAY, constantTexture);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t\t\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\t\t\t\t\t// Upload the images into the texture.\n\t\t\t\t\tconst mipLevel = 0; // the largest mip\n\t\t\t\t\tconst internalFormat = gl.RGBA; // format we want in the texture\n\t\t\t\t\tconst width = inputImages[0].width;\n\t\t\t\t\tconst height = inputImages[0].height;\n\t\t\t\t\tconst textureDepth = inputImages.length;\n\t\t\t\t\tconst border = 0;\n\t\t\t\t\tconst srcFormat = gl.RGBA; // format of data we are supplying\n\t\t\t\t\tconst srcType = gl.UNSIGNED_BYTE; // type of data we are supplying\n\t\t\t\t\tgl.texImage3D(\n\t\t\t\t\t\tgl.TEXTURE_2D_ARRAY,\n\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\tinternalFormat,\n\t\t\t\t\t\twidth,\n\t\t\t\t\t\theight,\n\t\t\t\t\t\ttextureDepth,\n\t\t\t\t\t\tborder,\n\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\tnull\n\t\t\t\t\t);\n\t\t\t\t\tfor (let i = 0; i < inputImages.length; i++) {\n\t\t\t\t\t\tconst xOffset = 0;\n\t\t\t\t\t\tconst yOffset = 0;\n\t\t\t\t\t\tconst imageDepth = 1;\n\t\t\t\t\t\tgl.texSubImage3D(\n\t\t\t\t\t\t\tgl.TEXTURE_2D_ARRAY,\n\t\t\t\t\t\t\tmipLevel,\n\t\t\t\t\t\t\txOffset,\n\t\t\t\t\t\t\tyOffset,\n\t\t\t\t\t\t\ti,\n\t\t\t\t\t\t\tinputImages[i].width,\n\t\t\t\t\t\t\tinputImages[i].height,\n\t\t\t\t\t\t\timageDepth,\n\t\t\t\t\t\t\tsrcFormat,\n\t\t\t\t\t\t\tsrcType,\n\t\t\t\t\t\t\tinputImages[i]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`constant ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\tcase 'NumberTexture':\n\t\t\t\t{\n\t\t\t\t\tconst inputTexture = value;\n\t\t\t\t\tif (inputTexture.context !== this.context) {\n\t\t\t\t\t\tthrow new Error(`constant ${ name} (${ type }) must be from same context`);\n\t\t\t\t\t}\n\t\t\t\t\tconst dim = inputTexture.dimensions;\n\t\t\t\t\tconst size = inputTexture.size;\n\n\t\t\t\t\tgl.activeTexture(gl.TEXTURE0 + this.constantsLength);\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);\n\n\t\t\t\t\tthis.setUniform3iv(`constants_${name}Dim`, dim);\n\t\t\t\t\tthis.setUniform2iv(`constants_${name}Size`, size);\n\t\t\t\t\tthis.setUniform1i(`constants_${name}`, this.constantsLength);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\tdefault:\n\t\t\t\tthrow new Error('constant type not supported: ' + value);\n\t\t}\n\t\tthis.constantsLength++;\n\t}\n\n\t/**\n\t *\n\t * @desc Get the header string for the program.\n\t * This returns an empty string if no sub-kernels are defined.\n\t *\n\t * @returns {String} result\n\t */\n\t_getHeaderString() {\n\t\treturn '';\n\t}\n\n\t/**\n\t * @desc Get texture coordinate string for the program\n\t * @returns {String} result\n\t */\n\t_getTextureCoordinate() {\n\t\tconst subKernels = this.subKernels;\n\t\tif (subKernels === null || subKernels.length < 1) {\n\t\t\treturn 'in highp vec2 vTexCoord;\\n';\n\t\t} else {\n\t\t\treturn 'out highp vec2 vTexCoord;\\n';\n\t\t}\n\t}\n\n\t/**\n\t * @desc Generate transpiled glsl Strings for user-defined parameters sent to a kernel\n\t * @param {Array} args - The actual parameters sent to the Kernel\n\t * @returns {String} result\n\t */\n\t_getMainArgumentsString(args) {\n\t\tconst result = [];\n\t\tconst argumentTypes = this.argumentTypes;\n\t\tconst argumentNames = this.argumentNames;\n\t\tfor (let i = 0; i < argumentNames.length; i++) {\n\t\t\tconst value = args[i];\n\t\t\tconst name = argumentNames[i];\n\t\t\tconst type = argumentTypes[i];\n\t\t\tif (this.hardcodeConstants) {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tconst dim = utils.getDimensions(value, true);\n\t\t\t\t\t\tconst size = utils.dimToTexSize({\n\t\t\t\t\t\t\tfloatTextures: this.optimizeFloatMemory,\n\t\t\t\t\t\t\tfloatOutput: this.precision === 'single'\n\t\t\t\t\t\t}, dim);\n\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform highp sampler2D user_${ name }`,\n\t\t\t\t\t\t\t`highp ivec2 user_${ name }Size = ivec2(${ size[0] }, ${ size[1] })`,\n\t\t\t\t\t\t\t`highp ivec3 user_${ name }Dim = ivec3(${ dim[0] }, ${ dim[1]}, ${ dim[2] })`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\t\tresult.push(`highp float user_${ name } = ${ value }.0`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\t\tresult.push(`highp float user_${ name } = ${ Number.isInteger(value) ? value + '.0' : value }`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Boolean':\n\t\t\t\t\t\tresult.push(`uniform int user_${name}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Argument type ${type} not supported in WebGL2`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\tcase 'NumberTexture':\n\t\t\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\t\t\tcase 'ArrayTexture(1)':\n\t\t\t\t\tcase 'ArrayTexture(2)':\n\t\t\t\t\tcase 'ArrayTexture(3)':\n\t\t\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\t\tcase 'Input':\n\t\t\t\t\tcase 'HTMLImage':\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform highp sampler2D user_${ name }`,\n\t\t\t\t\t\t\t`uniform highp ivec2 user_${ name }Size`,\n\t\t\t\t\t\t\t`uniform highp ivec3 user_${ name }Dim`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'HTMLImageArray':\n\t\t\t\t\t\tresult.push(\n\t\t\t\t\t\t\t`uniform highp sampler2DArray user_${ name }`,\n\t\t\t\t\t\t\t`uniform highp ivec2 user_${ name }Size`,\n\t\t\t\t\t\t\t`uniform highp ivec3 user_${ name }Dim`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Integer':\n\t\t\t\t\tcase 'Float':\n\t\t\t\t\tcase 'Number':\n\t\t\t\t\t\tresult.push(`uniform float user_${ name }`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Boolean':\n\t\t\t\t\t\tresult.push(`uniform int user_${name}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(`Argument type ${type} not supported in WebGL2`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn utils.linesToString(result);\n\t}\n\n\t/**\n\t * @desc Get Kernel program string (in *glsl*) for a kernel.\n\t * @returns {String} result\n\t */\n\tgetKernelString() {\n\t\tlet kernelResultDeclaration;\n\t\tswitch (this.returnType) {\n\t\t\tcase 'Array(2)':\n\t\t\t\tkernelResultDeclaration = 'vec2 kernelResult';\n\t\t\t\tbreak;\n\t\t\tcase 'Array(3)':\n\t\t\t\tkernelResultDeclaration = 'vec3 kernelResult';\n\t\t\t\tbreak;\n\t\t\tcase 'Array(4)':\n\t\t\t\tkernelResultDeclaration = 'vec4 kernelResult';\n\t\t\t\tbreak;\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Float':\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\t\tkernelResultDeclaration = 'float kernelResult';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.graphical) {\n\t\t\t\t\tkernelResultDeclaration = 'float kernelResult';\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`unrecognized output type \"${ this.returnType }\"`);\n\t\t\t\t}\n\t\t}\n\n\t\tconst result = [];\n\t\tconst subKernels = this.subKernels;\n\t\tif (subKernels !== null) {\n\t\t\tresult.push(\n\t\t\t\tkernelResultDeclaration,\n\t\t\t\t'layout(location = 0) out vec4 data0'\n\t\t\t);\n\t\t\tfor (let i = 0; i < subKernels.length; i++) {\n\t\t\t\tresult.push(\n\t\t\t\t\t`float subKernelResult_${ subKernels[i].name } = 0.0`,\n\t\t\t\t\t`layout(location = ${ i + 1 }) out vec4 data${ i + 1 }`\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tresult.push(\n\t\t\t\t'out vec4 data0',\n\t\t\t\tkernelResultDeclaration\n\t\t\t);\n\t\t}\n\n\t\treturn utils.linesToString(result) + this.translatedSource;\n\t}\n\n\tgetMainResultGraphical() {\n\t\treturn utils.linesToString([\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  data0 = actualColor',\n\t\t]);\n\t}\n\n\tgetMainResultPackedPixels() {\n\t\tswitch (this.returnType) {\n\t\t\tcase 'LiteralInteger':\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\t\treturn utils.linesToString(this.getMainResultKernelPackedPixels()) +\n\t\t\t\t\tutils.linesToString(this.getMainResultSubKernelPackedPixels());\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`packed output only usable with Numbers, \"${this.returnType}\" specified`);\n\t\t}\n\t}\n\n\tgetMainResultKernelPackedPixels() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  data0 = encode32(kernelResult)'\n\t\t];\n\t}\n\n\tgetMainResultSubKernelPackedPixels() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\tresult.push(\n\t\t\t\t`  data${i + 1} = encode32(subKernelResult_${this.subKernels[i].name})`\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultMemoryOptimizedFloats() {\n\t\tconst result = [\n\t\t\t'  index *= 4',\n\t\t];\n\n\t\tswitch (this.returnType) {\n\t\t\tcase 'Number':\n\t\t\tcase 'Integer':\n\t\t\tcase 'Float':\n\t\t\t\tconst channels = ['r', 'g', 'b', 'a'];\n\t\t\t\tfor (let i = 0; i < channels.length; i++) {\n\t\t\t\t\tconst channel = channels[i];\n\t\t\t\t\tthis.getMainResultKernelMemoryOptimizedFloats(result, channel);\n\t\t\t\t\tthis.getMainResultSubKernelMemoryOptimizedFloats(result, channel);\n\t\t\t\t\tif (i + 1 < channels.length) {\n\t\t\t\t\t\tresult.push('  index += 1');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`optimized output only usable with Numbers, ${this.returnType} specified`);\n\t\t}\n\n\t\treturn utils.linesToString(result);\n\t}\n\n\tgetMainResultKernelMemoryOptimizedFloats(result, channel) {\n\t\tresult.push(\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t`  data0.${channel} = kernelResult`,\n\t\t);\n\t}\n\n\tgetMainResultSubKernelMemoryOptimizedFloats(result, channel) {\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; i++) {\n\t\t\tresult.push(\n\t\t\t\t`  data${i + 1}.${channel} = subKernelResult_${this.subKernels[i].name}`,\n\t\t\t);\n\t\t}\n\t}\n\n\tgetMainResultKernelNumberTexture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  data0[0] = kernelResult',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelNumberTexture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  data${i + 1}[0] = subKernelResult_${this.subKernels[i].name}`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultKernelArray2Texture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  data0[0] = kernelResult[0]',\n\t\t\t'  data0[1] = kernelResult[1]',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelArray2Texture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  data${i + 1}[0] = subKernelResult_${this.subKernels[i].name}[0]`,\n\t\t\t\t`  data${i + 1}[1] = subKernelResult_${this.subKernels[i].name}[1]`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultKernelArray3Texture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  data0[0] = kernelResult[0]',\n\t\t\t'  data0[1] = kernelResult[1]',\n\t\t\t'  data0[2] = kernelResult[2]',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelArray3Texture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  data${i + 1}[0] = subKernelResult_${this.subKernels[i].name}[0]`,\n\t\t\t\t`  data${i + 1}[1] = subKernelResult_${this.subKernels[i].name}[1]`,\n\t\t\t\t`  data${i + 1}[2] = subKernelResult_${this.subKernels[i].name}[2]`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\tgetMainResultKernelArray4Texture() {\n\t\treturn [\n\t\t\t'  threadId = indexTo3D(index, uOutputDim)',\n\t\t\t'  kernel()',\n\t\t\t'  data0 = kernelResult',\n\t\t];\n\t}\n\n\tgetMainResultSubKernelArray4Texture() {\n\t\tconst result = [];\n\t\tif (!this.subKernels) return result;\n\t\tfor (let i = 0; i < this.subKernels.length; ++i) {\n\t\t\tresult.push(\n\t\t\t\t`  data${i + 1} = subKernelResult_${this.subKernels[i].name}`,\n\t\t\t);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * @desc Get the fragment shader String.\n\t * If the String hasn't been compiled yet,\n\t * then this method compiles it as well\n\t *\n\t * @param {Array} args - The actual parameters sent to the Kernel\n\t * @returns {string} Fragment Shader string\n\t */\n\tgetFragmentShader(args) {\n\t\tif (this.compiledFragmentShader !== null) {\n\t\t\treturn this.compiledFragmentShader;\n\t\t}\n\t\treturn this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));\n\t}\n\n\t/**\n\t * @desc Get the vertical shader String\n\t * @param {Array} args - The actual parameters sent to the Kernel\n\t * @returns {string} Vertical Shader string\n\t *\n\t */\n\tgetVertexShader(args) {\n\t\tif (this.compiledVertexShader !== null) {\n\t\t\treturn this.compiledVertexShader;\n\t\t}\n\t\treturn this.compiledVertexShader = this.constructor.vertexShader;\n\t}\n\n\tdestroyExtensions() {\n\t\tthis.extensions.EXT_color_buffer_float = null;\n\t\tthis.extensions.OES_texture_float_linear = null;\n\t}\n\n\ttoJSON() {\n\t\tconst json = super.toJSON();\n\t\tjson.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();\n\t\treturn json;\n\t}\n}\n\nmodule.exports = {\n\tWebGL2Kernel\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl2/kernel.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/backend/web-gl2/vertex-shader.js":
/*!******************************************************************!*\
  !*** ./node_modules/gpu.js/src/backend/web-gl2/vertex-shader.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const vertexShader = `#version 300 es\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}`;\n\nmodule.exports = {\n\tvertexShader\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/backend/web-gl2/vertex-shader.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/gpu.js":
/*!****************************************!*\
  !*** ./node_modules/gpu.js/src/gpu.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const gpuMock = __webpack_require__(/*! gpu-mock.js */ \"./node_modules/gpu-mock.js/index.js\");\nconst {\n\tutils\n} = __webpack_require__(/*! ./utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tCPUKernel\n} = __webpack_require__(/*! ./backend/cpu/kernel */ \"./node_modules/gpu.js/src/backend/cpu/kernel.js\");\nconst {\n\tHeadlessGLKernel\n} = __webpack_require__(/*! ./backend/headless-gl/kernel */ \"./node_modules/gpu.js/src/backend/headless-gl/kernel.js\");\nconst {\n\tWebGL2Kernel\n} = __webpack_require__(/*! ./backend/web-gl2/kernel */ \"./node_modules/gpu.js/src/backend/web-gl2/kernel.js\");\nconst {\n\tWebGLKernel\n} = __webpack_require__(/*! ./backend/web-gl/kernel */ \"./node_modules/gpu.js/src/backend/web-gl/kernel.js\");\nconst {\n\tkernelRunShortcut\n} = __webpack_require__(/*! ./kernel-run-shortcut */ \"./node_modules/gpu.js/src/kernel-run-shortcut.js\");\n\n\n/**\n *\n * @type {Kernel[]}\n */\nconst kernelOrder = [HeadlessGLKernel, WebGL2Kernel, WebGLKernel];\n\n/**\n *\n * @type {string[]}\n */\nconst kernelTypes = ['gpu', 'cpu'];\n\nconst internalKernels = {\n\t'headlessgl': HeadlessGLKernel,\n\t'webgl2': WebGL2Kernel,\n\t'webgl': WebGLKernel,\n};\n\nlet validate = true;\n\n/**\n * The GPU.js library class which manages the GPU context for the creating kernels\n */\nclass GPU {\n\tstatic disableValidation() {\n\t\tvalidate = false;\n\t}\n\n\tstatic enableValidation() {\n\t\tvalidate = true;\n\t}\n\n\tstatic get isGPUSupported() {\n\t\treturn kernelOrder.some(Kernel => Kernel.isSupported);\n\t}\n\n\t/**\n\t *\n\t * @returns {boolean}\n\t */\n\tstatic get isKernelMapSupported() {\n\t\treturn kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.kernelMap);\n\t}\n\n\t/**\n\t * @desc TRUE is platform supports OffscreenCanvas\n\t */\n\tstatic get isOffscreenCanvasSupported() {\n\t\treturn (typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined') || typeof importScripts !== 'undefined';\n\t}\n\n\t/**\n\t * @desc TRUE if platform supports WebGL\n\t */\n\tstatic get isWebGLSupported() {\n\t\treturn WebGLKernel.isSupported;\n\t}\n\n\t/**\n\t * @desc TRUE if platform supports WebGL2\n\t */\n\tstatic get isWebGL2Supported() {\n\t\treturn WebGL2Kernel.isSupported;\n\t}\n\n\t/**\n\t * @desc TRUE if platform supports HeadlessGL\n\t */\n\tstatic get isHeadlessGLSupported() {\n\t\treturn HeadlessGLKernel.isSupported;\n\t}\n\n\t/**\n\t *\n\t * @desc TRUE if platform supports Canvas\n\t */\n\tstatic get isCanvasSupported() {\n\t\treturn typeof HTMLCanvasElement !== 'undefined';\n\t}\n\n\t/**\n\t * @desc TRUE if platform supports HTMLImageArray}\n\t */\n\tstatic get isGPUHTMLImageArraySupported() {\n\t\treturn WebGL2Kernel.isSupported;\n\t}\n\n\t/**\n\t * @desc TRUE if platform supports single precision}\n\t * @returns {boolean}\n\t */\n\tstatic get isSinglePrecisionSupported() {\n\t\treturn kernelOrder.some(Kernel => Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat);\n\t}\n\n\t/**\n\t * Creates an instance of GPU.\n\t * @param {IGPUSettings} [settings] - Settings to set mode, and other properties\n\t */\n\tconstructor(settings) {\n\t\tsettings = settings || {};\n\t\tthis.canvas = settings.canvas || null;\n\t\tthis.context = settings.context || null;\n\t\tthis.mode = settings.mode;\n\t\tif (this.mode === 'dev') return;\n\t\tthis.Kernel = null;\n\t\tthis.kernels = [];\n\t\tthis.functions = [];\n\t\tthis.nativeFunctions = [];\n\t\tthis.chooseKernel();\n\t\t// add functions from settings\n\t\tif (settings.functions) {\n\t\t\tfor (let i = 0; i < settings.functions.length; i++) {\n\t\t\t\tthis.addFunction(settings.functions[i]);\n\t\t\t}\n\t\t}\n\n\t\t// add native functions from settings\n\t\tif (settings.nativeFunctions) {\n\t\t\tfor (const p in settings.nativeFunctions) {\n\t\t\t\tthis.addNativeFunction(p, settings.nativeFunctions[p]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Choose kernel type and save on .Kernel property of GPU\n\t */\n\tchooseKernel() {\n\t\tif (this.Kernel) return;\n\n\t\tlet Kernel = null;\n\n\t\tif (this.context) {\n\t\t\tfor (let i = 0; i < kernelOrder.length; i++) {\n\t\t\t\tconst ExternalKernel = kernelOrder[i];\n\t\t\t\tif (ExternalKernel.isContextMatch(this.context)) {\n\t\t\t\t\tif (!ExternalKernel.isSupported) {\n\t\t\t\t\t\tthrow new Error(`Kernel type ${ExternalKernel.name} not supported`);\n\t\t\t\t\t}\n\t\t\t\t\tKernel = ExternalKernel;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Kernel === null) {\n\t\t\t\tthrow new Error('unknown Context');\n\t\t\t}\n\t\t} else if (this.mode) {\n\t\t\tif (this.mode in internalKernels) {\n\t\t\t\tif (internalKernels[this.mode].isSupported) {\n\t\t\t\t\tKernel = internalKernels[this.mode];\n\t\t\t\t}\n\t\t\t} else if (this.mode === 'gpu') {\n\t\t\t\tfor (let i = 0; i < kernelOrder.length; i++) {\n\t\t\t\t\tif (kernelOrder[i].isSupported) {\n\t\t\t\t\t\tKernel = kernelOrder[i];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this.mode === 'cpu') {\n\t\t\t\tKernel = CPUKernel;\n\t\t\t}\n\t\t\tif (!Kernel) {\n\t\t\t\tthrow new Error(`A requested mode of \"${this.mode}\" and is not supported`);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < kernelOrder.length; i++) {\n\t\t\t\tif (kernelOrder[i].isSupported) {\n\t\t\t\t\tKernel = kernelOrder[i];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!Kernel) {\n\t\t\t\tKernel = CPUKernel;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.mode) {\n\t\t\tthis.mode = Kernel.mode;\n\t\t}\n\t\tthis.Kernel = Kernel;\n\t}\n\n\t/**\n\t * @desc This creates a callable function object to call the kernel function with the argument parameter set\n\t * @param {Function|String|object} source - The calling to perform the conversion\n\t * @param {Object} [settings] - The parameter configuration object\n\t * @returns {Kernel} callable function to run\n\t */\n\tcreateKernel(source, settings) {\n\t\tif (typeof source === 'undefined') {\n\t\t\tthrow new Error('Missing source parameter');\n\t\t}\n\t\tif (typeof source !== 'object' && !utils.isFunction(source) && typeof source !== 'string') {\n\t\t\tthrow new Error('source parameter not a function');\n\t\t}\n\n\t\tif (this.mode === 'dev') {\n\t\t\treturn gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));\n\t\t}\n\n\t\tsource = typeof source === 'function' ? source.toString() : source;\n\t\tconst mergedSettings = Object.assign({\n\t\t\tcontext: this.context,\n\t\t\tcanvas: this.canvas,\n\t\t\tfunctions: this.functions,\n\t\t\tnativeFunctions: this.nativeFunctions,\n\t\t\tgpu: this,\n\t\t\tvalidate,\n\t\t\tonRequestFallback: (args) => {\n\t\t\t\tconst fallbackKernel = new CPUKernel(source, mergedSettings);\n\t\t\t\treturn fallbackKernel.apply(fallbackKernel, args);\n\t\t\t}\n\t\t}, upgradeDeprecatedCreateKernelSettings(settings) || {});\n\n\t\tconst kernel = kernelRunShortcut(new this.Kernel(source, mergedSettings));\n\n\t\t//if canvas didn't come from this, propagate from kernel\n\t\tif (!this.canvas) {\n\t\t\tthis.canvas = kernel.canvas;\n\t\t}\n\n\t\t//if context didn't come from this, propagate from kernel\n\t\tif (!this.context) {\n\t\t\tthis.context = kernel.context;\n\t\t}\n\n\t\tthis.kernels.push(kernel);\n\n\t\treturn kernel;\n\t}\n\n\t/**\n\t *\n\t * Create a super kernel which executes sub kernels\n\t * and saves their output to be used with the next sub kernel.\n\t * This can be useful if we want to save the output on one kernel,\n\t * and then use it as an input to another kernel. *Machine Learning*\n\t *\n\t * @param {Object|Array} subKernels - Sub kernels for this kernel\n\t * @param {Function} rootKernel - Root kernel\n\t *\n\t * @returns {Function} callable kernel function\n\t *\n\t * @example\n\t * const megaKernel = gpu.createKernelMap({\n\t *   addResult: function add(a, b) {\n\t *     return a[this.thread.x] + b[this.thread.x];\n\t *   },\n\t *   multiplyResult: function multiply(a, b) {\n\t *     return a[this.thread.x] * b[this.thread.x];\n\t *   },\n\t *  }, function(a, b, c) {\n\t *       return multiply(add(a, b), c);\n\t * });\n\t *\n\t * megaKernel(a, b, c);\n\t *\n\t * Note: You can also define subKernels as an array of functions.\n\t * > [add, multiply]\n\t *\n\t */\n\tcreateKernelMap() {\n\t\tlet fn;\n\t\tlet settings;\n\t\tif (typeof arguments[arguments.length - 2] === 'function') {\n\t\t\tfn = arguments[arguments.length - 2];\n\t\t\tsettings = arguments[arguments.length - 1];\n\t\t} else {\n\t\t\tfn = arguments[arguments.length - 1];\n\t\t}\n\n\t\tif (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {\n\t\t\tif (this.mode && kernelTypes.indexOf(this.mode) < 0) {\n\t\t\t\tthrow new Error(`kernelMap not supported on ${this.Kernel.name}`);\n\t\t\t}\n\t\t}\n\n\t\tconst kernel = this.createKernel(fn, upgradeDeprecatedCreateKernelSettings(settings));\n\t\tif (Array.isArray(arguments[0])) {\n\t\t\tconst functions = arguments[0];\n\t\t\tfor (let i = 0; i < functions.length; i++) {\n\t\t\t\tconst source = functions[i].toString();\n\t\t\t\tconst name = utils.getFunctionNameFromString(source);\n\t\t\t\tkernel.addSubKernel({\n\t\t\t\t\tname,\n\t\t\t\t\tsource,\n\t\t\t\t\tproperty: i,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tconst functions = arguments[0];\n\t\t\tfor (let p in functions) {\n\t\t\t\tif (!functions.hasOwnProperty(p)) continue;\n\t\t\t\tconst source = functions[p].toString();\n\t\t\t\tconst name = utils.getFunctionNameFromString(source);\n\t\t\t\tkernel.addSubKernel({\n\t\t\t\t\tname: name || p,\n\t\t\t\t\tsource,\n\t\t\t\t\tproperty: p,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn kernel;\n\t}\n\n\t/**\n\t *\n\t * Combine different kernels into one super Kernel,\n\t * useful to perform multiple operations inside one\n\t * kernel without the penalty of data transfer between\n\t * cpu and gpu.\n\t *\n\t * The number of kernel functions sent to this method can be variable.\n\t * You can send in one, two, etc.\n\t *\n\t * @param {Function} subKernels - Kernel function(s) to combine.\n\t * @param {Function} rootKernel - Root kernel to combine kernels into\n\t *\n\t * @example\n\t * \tcombineKernels(add, multiply, function(a,b,c){\n\t *\t \treturn add(multiply(a,b), c)\n\t *\t})\n\t *\n\t * @returns {Function} Callable kernel function\n\t *\n\t */\n\tcombineKernels() {\n\t\tconst firstKernel = arguments[0];\n\t\tconst combinedKernel = arguments[arguments.length - 1];\n\t\tif (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;\n\t\tconst canvas = arguments[0].canvas;\n\t\tconst context = arguments[0].context;\n\t\tconst max = arguments.length - 1;\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\targuments[i]\n\t\t\t\t.setCanvas(canvas)\n\t\t\t\t.setContext(context)\n\t\t\t\t.setPipeline(true);\n\t\t}\n\n\t\treturn function() {\n\t\t\tconst texture = combinedKernel.apply(this, arguments);\n\t\t\tif (texture.toArray) {\n\t\t\t\treturn texture.toArray();\n\t\t\t}\n\t\t\treturn texture;\n\t\t};\n\t}\n\n\t/**\n\t * @desc Adds additional functions, that the kernel may call.\n\t * @param {Function|String} source - Javascript function to convert\n\t * @param {IFunctionSettings} [settings]\n\t * @returns {GPU} returns itself\n\t */\n\taddFunction(source, settings) {\n\t\tthis.functions.push(utils.functionToIFunction(source, settings));\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Adds additional native functions, that the kernel may call.\n\t * @param {String} name - native function name, used for reverse lookup\n\t * @param {String} source - the native function implementation, as it would be defined in it's entirety\n\t * @param {object} [settings]\n\t * @returns {GPU} returns itself\n\t */\n\taddNativeFunction(name, source, settings) {\n\t\tif (this.kernels.length > 0) {\n\t\t\tthrow new Error('Cannot call \"addNativeFunction\" after \"createKernels\" has been called.');\n\t\t}\n\t\tsettings = settings || {};\n\t\tconst {\n\t\t\targumentTypes,\n\t\t\targumentNames\n\t\t} = this.Kernel.nativeFunctionArguments(source) || {};\n\t\tthis.nativeFunctions.push({\n\t\t\tname,\n\t\t\tsource,\n\t\t\tsettings,\n\t\t\targumentTypes,\n\t\t\targumentNames,\n\t\t\treturnType: settings.returnType || this.Kernel.nativeFunctionReturnType(source),\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * @desc Destroys all memory associated with gpu.js & the webGl if we created it\n\t */\n\tdestroy() {\n\t\t// perform on next run loop - for some reason we dont get lose context events\n\t\t// if webGl is created and destroyed in the same run loop.\n\t\tsetTimeout(() => {\n\t\t\tfor (let i = 0; i < this.kernels.length; i++) {\n\t\t\t\tthis.kernels[i].destroy(true); // remove canvas if exists\n\t\t\t}\n\t\t\tthis.kernels[0].kernel.constructor.destroyContext(this.context);\n\t\t}, 0);\n\t}\n}\n\n\nfunction upgradeDeprecatedCreateKernelSettings(settings) {\n\tif (!settings) {\n\t\treturn;\n\t}\n\tconst upgradedSettings = Object.assign({}, settings);\n\n\tif (settings.hasOwnProperty('floatOutput')) {\n\t\tutils.warnDeprecated('setting', 'floatOutput', 'precision');\n\t\tupgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';\n\t}\n\tif (settings.hasOwnProperty('outputToTexture')) {\n\t\tutils.warnDeprecated('setting', 'outputToTexture', 'pipeline');\n\t\tupgradedSettings.pipeline = Boolean(settings.outputToTexture);\n\t}\n\tif (settings.hasOwnProperty('outputImmutable')) {\n\t\tutils.warnDeprecated('setting', 'outputImmutable', 'immutable');\n\t\tupgradedSettings.immutable = Boolean(settings.outputImmutable);\n\t}\n\tif (settings.hasOwnProperty('floatTextures')) {\n\t\tutils.warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');\n\t\tupgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);\n\t}\n\treturn upgradedSettings;\n}\n\nmodule.exports = {\n\tGPU,\n\tkernelOrder,\n\tkernelTypes\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/gpu.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/index.js":
/*!******************************************!*\
  !*** ./node_modules/gpu.js/src/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tGPU\n} = __webpack_require__(/*! ./gpu */ \"./node_modules/gpu.js/src/gpu.js\");\nconst {\n\talias\n} = __webpack_require__(/*! ./alias */ \"./node_modules/gpu.js/src/alias.js\");\nconst {\n\tutils\n} = __webpack_require__(/*! ./utils */ \"./node_modules/gpu.js/src/utils.js\");\nconst {\n\tInput,\n\tinput\n} = __webpack_require__(/*! ./input */ \"./node_modules/gpu.js/src/input.js\");\nconst {\n\tTexture\n} = __webpack_require__(/*! ./texture */ \"./node_modules/gpu.js/src/texture.js\");\nconst {\n\tFunctionBuilder\n} = __webpack_require__(/*! ./backend/function-builder */ \"./node_modules/gpu.js/src/backend/function-builder.js\");\nconst {\n\tFunctionNode\n} = __webpack_require__(/*! ./backend/function-node */ \"./node_modules/gpu.js/src/backend/function-node.js\");\nconst {\n\tCPUFunctionNode\n} = __webpack_require__(/*! ./backend/cpu/function-node */ \"./node_modules/gpu.js/src/backend/cpu/function-node.js\");\nconst {\n\tCPUKernel\n} = __webpack_require__(/*! ./backend/cpu/kernel */ \"./node_modules/gpu.js/src/backend/cpu/kernel.js\");\n\nconst {\n\tHeadlessGLKernel\n} = __webpack_require__(/*! ./backend/headless-gl/kernel */ \"./node_modules/gpu.js/src/backend/headless-gl/kernel.js\");\n\nconst {\n\tWebGLFunctionNode\n} = __webpack_require__(/*! ./backend/web-gl/function-node */ \"./node_modules/gpu.js/src/backend/web-gl/function-node.js\");\nconst {\n\tWebGLKernel\n} = __webpack_require__(/*! ./backend/web-gl/kernel */ \"./node_modules/gpu.js/src/backend/web-gl/kernel.js\");\n\nconst {\n\tWebGL2FunctionNode\n} = __webpack_require__(/*! ./backend/web-gl2/function-node */ \"./node_modules/gpu.js/src/backend/web-gl2/function-node.js\");\nconst {\n\tWebGL2Kernel\n} = __webpack_require__(/*! ./backend/web-gl2/kernel */ \"./node_modules/gpu.js/src/backend/web-gl2/kernel.js\");\n\nconst {\n\tGLKernel\n} = __webpack_require__(/*! ./backend/gl-kernel */ \"./node_modules/gpu.js/src/backend/gl-kernel.js\");\n\nconst {\n\tKernel\n} = __webpack_require__(/*! ./backend/kernel */ \"./node_modules/gpu.js/src/backend/kernel.js\");\n\nmodule.exports = {\n\talias,\n\tCPUFunctionNode,\n\tCPUKernel,\n\tGPU,\n\tFunctionBuilder,\n\tFunctionNode,\n\tHeadlessGLKernel,\n\tInput,\n\tinput,\n\tTexture,\n\tutils,\n\tWebGL2FunctionNode,\n\tWebGL2Kernel,\n\tWebGLFunctionNode,\n\tWebGLKernel,\n\tGLKernel,\n\tKernel,\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/index.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/input.js":
/*!******************************************!*\
  !*** ./node_modules/gpu.js/src/input.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("class Input {\n\tconstructor(value, size) {\n\t\tthis.value = value;\n\t\tthis.size = new Int32Array(3);\n\t\tif (Array.isArray(size)) {\n\t\t\tfor (let i = 0; i < this.size.length; i++) {\n\t\t\t\tthis.size[i] = size[i] || 1;\n\t\t\t}\n\t\t} else {\n\t\t\tif (size.z) {\n\t\t\t\tthis.size = new Int32Array([size.x, size.y, size.z]);\n\t\t\t} else if (size.y) {\n\t\t\t\tthis.size = new Int32Array([size.x, size.y, 1]);\n\t\t\t} else {\n\t\t\t\tthis.size = new Int32Array([size.x, 1, 1]);\n\t\t\t}\n\t\t}\n\n\t\tconst [h, w, d] = this.size;\n\t\tif (this.value.length !== (h * w * d)) {\n\t\t\tthrow new Error(`Input size ${this.value.length} does not match ${w} * ${h} * ${d} = ${(h * w * d)}`);\n\t\t}\n\t}\n}\n\nfunction input(value, size) {\n\treturn new Input(value, size);\n}\n\nmodule.exports = {\n\tInput,\n\tinput\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/input.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/kernel-run-shortcut.js":
/*!********************************************************!*\
  !*** ./node_modules/gpu.js/src/kernel-run-shortcut.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tutils\n} = __webpack_require__(/*! ./utils */ \"./node_modules/gpu.js/src/utils.js\");\n\nfunction kernelRunShortcut(kernel) {\n\tconst shortcut = function() {\n\t\treturn kernel.run.apply(kernel, arguments);\n\t};\n\n\tutils\n\t\t.allPropertiesOf(kernel)\n\t\t.forEach((key) => {\n\t\t\tif (key[0] === '_' && key[1] === '_') return;\n\t\t\tif (typeof kernel[key] === 'function') {\n\t\t\t\tif (key.substring(0, 3) === 'add' || key.substring(0, 3) === 'set') {\n\t\t\t\t\tshortcut[key] = function() {\n\t\t\t\t\t\tkernel[key].apply(kernel, arguments);\n\t\t\t\t\t\treturn shortcut;\n\t\t\t\t\t};\n\t\t\t\t} else if (key === 'requestFallback') {\n\t\t\t\t\tconst requestFallback = kernel[key].bind(kernel);\n\t\t\t\t\tshortcut[key] = () => {\n\t\t\t\t\t\tkernel = requestFallback();\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tshortcut[key] = kernel[key].bind(kernel);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshortcut.__defineGetter__(key, () => {\n\t\t\t\t\treturn kernel[key];\n\t\t\t\t});\n\t\t\t\tshortcut.__defineSetter__(key, (value) => {\n\t\t\t\t\tkernel[key] = value;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\tshortcut.kernel = kernel;\n\n\treturn shortcut;\n}\n\nmodule.exports = {\n\tkernelRunShortcut\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/kernel-run-shortcut.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/plugins/triangle-noise.js":
/*!***********************************************************!*\
  !*** ./node_modules/gpu.js/src/plugins/triangle-noise.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const source = `\n\nuniform highp float triangle_noise_seed;\nhighp float triangle_noise_shift = 0.000001;\n\n//https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n//note: remaps v to [0;1] in interval [a;b]\nfloat remap( float a, float b, float v )\n{\n\treturn clamp( (v-a) / (b-a), 0.0, 1.0 );\n}\n\nfloat n4rand( vec2 n )\n{\n\tfloat t = fract( triangle_noise_seed + triangle_noise_shift );\n\tfloat nrnd0 = nrand( n + 0.07*t );\n\tfloat nrnd1 = nrand( n + 0.11*t );\t\n\tfloat nrnd2 = nrand( n + 0.13*t );\n\tfloat nrnd3 = nrand( n + 0.17*t );\n\tfloat result = (nrnd0+nrnd1+nrnd2+nrnd3) / 4.0;\n\ttriangle_noise_shift = result + 0.000001;\n\treturn result;\n}`;\n\nconst name = 'triangle-noise-noise';\n\nconst functionMatch = 'Math.random()';\n\nconst functionReplace = 'n4rand(vTexCoord)';\n\nconst functionReturnType = 'Number';\n\nconst onBeforeRun = (kernel) => {\n\tkernel.setUniform1f('triangle_noise_seed', Math.random());\n};\n\n/**\n *\n * @type IPlugin\n */\nmodule.exports = {\n\tname,\n\tonBeforeRun,\n\tfunctionMatch,\n\tfunctionReplace,\n\tfunctionReturnType,\n\tsource\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/plugins/triangle-noise.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/texture.js":
/*!********************************************!*\
  !*** ./node_modules/gpu.js/src/texture.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @desc WebGl Texture implementation in JS\n * @param {ITextureSettings} settings\n */\nclass Texture {\n\tconstructor(settings) {\n\t\tconst {\n\t\t\ttexture,\n\t\t\tsize,\n\t\t\tdimensions,\n\t\t\toutput,\n\t\t\tcontext,\n\t\t\tgpu,\n\t\t\ttype = 'NumberTexture',\n\t\t} = settings;\n\t\tif (!output) throw new Error('settings property \"output\" required.');\n\t\tif (!context) throw new Error('settings property \"context\" required.');\n\t\tthis.texture = texture;\n\t\tthis.size = size;\n\t\tthis.dimensions = dimensions;\n\t\tthis.output = output;\n\t\tthis.context = context;\n\t\tthis.gpu = gpu;\n\t\tthis.kernel = null;\n\t\tthis.type = type;\n\t}\n\n\t/**\n\t * @desc Converts the Texture into a JavaScript Array.\n\t * @param {GPU} [gpu]\n\t * @returns {Number[]|Number[][]|Number[][][]}\n\t */\n\ttoArray(gpu) {\n\t\tlet {\n\t\t\tkernel\n\t\t} = this;\n\t\tif (kernel) return kernel(this);\n\t\tgpu = gpu || this.gpu;\n\t\tif (!gpu) throw new Error('settings property \"gpu\" or argument required.');\n\t\tkernel = gpu.createKernel(function(x) {\n\t\t\treturn x[this.thread.z][this.thread.y][this.thread.x];\n\t\t}, {\n\t\t\toutput: this.output,\n\t\t\tprecision: this.getPrecision(),\n\t\t\toptimizeFloatMemory: this.type === 'MemoryOptimizedNumberTexture',\n\t\t});\n\n\t\tthis.kernel = kernel;\n\t\treturn kernel(this);\n\t}\n\n\tgetPrecision() {\n\t\tswitch (this.type) {\n\t\t\tcase 'NumberTexture':\n\t\t\t\treturn 'unsigned';\n\t\t\tcase 'MemoryOptimizedNumberTexture':\n\t\t\tcase 'ArrayTexture(1)':\n\t\t\tcase 'ArrayTexture(2)':\n\t\t\tcase 'ArrayTexture(3)':\n\t\t\tcase 'ArrayTexture(4)':\n\t\t\t\treturn 'single';\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown texture type');\n\t\t}\n\t}\n\n\t/**\n\t * @desc Deletes the Texture\n\t */\n\tdelete() {\n\t\treturn this.context.deleteTexture(this.texture);\n\t}\n}\n\nmodule.exports = {\n\tTexture\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/texture.js?");

/***/ }),

/***/ "./node_modules/gpu.js/src/utils.js":
/*!******************************************!*\
  !*** ./node_modules/gpu.js/src/utils.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("const {\n\tInput\n} = __webpack_require__(/*! ./input */ \"./node_modules/gpu.js/src/input.js\");\nconst {\n\tTexture\n} = __webpack_require__(/*! ./texture */ \"./node_modules/gpu.js/src/texture.js\");\n\nconst FUNCTION_NAME = /function ([^(]*)/;\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nconst ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n *\n * @desc Various utility functions / snippets of code that GPU.JS uses internally.\n * This covers various snippets of code that is not entirely gpu.js specific (ie. may find uses elsewhere)\n */\nconst utils = {\n\t/**\n\t *\n\t * @desc Gets the system endianness, and cache it\n\t * @returns {String} 'LE' or 'BE' depending on system architecture\n\t * Credit: https://gist.github.com/TooTallNate/4750953\n\t */\n\tsystemEndianness() {\n\t\treturn _systemEndianness;\n\t},\n\tgetSystemEndianness() {\n\t\tconst b = new ArrayBuffer(4);\n\t\tconst a = new Uint32Array(b);\n\t\tconst c = new Uint8Array(b);\n\t\ta[0] = 0xdeadbeef;\n\t\tif (c[0] === 0xef) return 'LE';\n\t\tif (c[0] === 0xde) return 'BE';\n\t\tthrow new Error('unknown endianness');\n\t},\n\n\t/**\n\t * @descReturn TRUE, on a JS function\n\t * @param {Function} funcObj - Object to validate if its a function\n\t * @returns\t{Boolean} TRUE if the object is a JS function\n\t */\n\tisFunction(funcObj) {\n\t\treturn typeof(funcObj) === 'function';\n\t},\n\n\t/**\n\t * @desc Return TRUE, on a valid JS function string\n\t * Note: This does just a VERY simply sanity check. And may give false positives.\n\t *\n\t * @param {String} fn - String of JS function to validate\n\t * @returns {Boolean} TRUE if the string passes basic validation\n\t */\n\tisFunctionString(fn) {\n\t\tif (typeof fn === 'string') {\n\t\t\treturn (fn\n\t\t\t\t.slice(0, 'function'.length)\n\t\t\t\t.toLowerCase() === 'function');\n\t\t}\n\t\treturn false;\n\t},\n\n\t/**\n\t * @desc Return the function name from a JS function string\n\t * @param {String} funcStr - String of JS function to validate\n\t * @returns {String} Function name string (if found)\n\t */\n\tgetFunctionNameFromString(funcStr) {\n\t\treturn FUNCTION_NAME.exec(funcStr)[1].trim();\n\t},\n\n\tgetFunctionBodyFromString(funcStr) {\n\t\treturn funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));\n\t},\n\n\t/**\n\t * @desc Return list of argument names extracted from a javascript function\n\t * @param {String} fn - String of JS function to validate\n\t * @returns {String[]}  Array representing all the parameter names\n\t */\n\tgetArgumentNamesFromString(fn) {\n\t\tconst fnStr = fn.replace(STRIP_COMMENTS, '');\n\t\tlet result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n\t\tif (result === null) {\n\t\t\tresult = [];\n\t\t}\n\t\treturn result;\n\t},\n\n\t/**\n\t * @desc Returns a clone\n\t * @param {Object} obj - Object to clone\n\t * @returns {Object|Array} Cloned object\n\t */\n\tclone(obj) {\n\t\tif (obj === null || typeof obj !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;\n\n\t\tconst temp = obj.constructor(); // changed\n\n\t\tfor (let key in obj) {\n\t\t\tif (Object.prototype.hasOwnProperty.call(obj, key)) {\n\t\t\t\tobj.isActiveClone = null;\n\t\t\t\ttemp[key] = utils.clone(obj[key]);\n\t\t\t\tdelete obj.isActiveClone;\n\t\t\t}\n\t\t}\n\n\t\treturn temp;\n\t},\n\n\t/**\n\t * @desc Checks if is an array or Array-like object\n\t * @param {Object} array - The argument object to check if is array\n\t * @returns {Boolean}  true if is array or Array-like object\n\t */\n\tisArray(array) {\n\t\treturn !isNaN(array.length);\n\t},\n\n\t/**\n\t * @desc Evaluate the argument type, to apply respective logic for it\n\t * @param {Object} value - The argument object to evaluate type\n\t * @returns {String}  Argument type Array/Number/Float/Texture/Unknown\n\t */\n\tgetVariableType(value) {\n\t\tif (utils.isArray(value)) {\n\t\t\tif (value[0].nodeName === 'IMG') {\n\t\t\t\treturn 'HTMLImageArray';\n\t\t\t}\n\t\t\treturn 'Array';\n\t\t} else if (typeof value === 'number') {\n\t\t\tif (Number.isInteger(value)) {\n\t\t\t\treturn 'Integer';\n\t\t\t}\n\t\t\treturn 'Float';\n\t\t} else if (typeof value === 'boolean') {\n\t\t\treturn 'Boolean';\n\t\t} else if (value instanceof Texture) {\n\t\t\treturn value.type;\n\t\t} else if (value instanceof Input) {\n\t\t\treturn 'Input';\n\t\t} else if (value.nodeName === 'IMG') {\n\t\t\treturn 'HTMLImage';\n\t\t} else {\n\t\t\treturn 'Unknown';\n\t\t}\n\t},\n\n\n\tdimToTexSize(opt, dimensions, output) {\n\t\tlet [w, h, d] = dimensions;\n\t\tlet texelCount = (w || 1) * (h || 1) * (d || 1);\n\n\t\tif (opt.floatTextures && (!output || opt.precision === 'single')) {\n\t\t\tw = texelCount = Math.ceil(texelCount / 4);\n\t\t}\n\t\t// if given dimensions == a 2d image\n\t\tif (h > 1 && w * h === texelCount) {\n\t\t\treturn new Int32Array([w, h]);\n\t\t}\n\t\treturn utils.closestSquareDimensions(texelCount);\n\t},\n\n\t/**\n\t *\n\t * @param {Number} length\n\t * @returns {TextureDimensions}\n\t */\n\tclosestSquareDimensions(length) {\n\t\tconst sqrt = Math.sqrt(length);\n\t\tlet high = Math.ceil(sqrt);\n\t\tlet low = Math.floor(sqrt);\n\t\twhile (high * low < length) {\n\t\t\thigh--;\n\t\t\tlow = Math.ceil(length / high);\n\t\t}\n\t\treturn new Int32Array([low, Math.ceil(length / low)]);\n\t},\n\n\t/**\n\t * A texture takes up four\n\t * @param {OutputDimensions} dimensions\n\t * @param {Number} bitRatio\n\t * @returns {TextureDimensions}\n\t */\n\tgetMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {\n\t\tconst [w, h, d] = dimensions;\n\t\tconst totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);\n\t\tconst texelCount = totalArea / bitRatio;\n\t\treturn utils.closestSquareDimensions(texelCount);\n\t},\n\n\t/**\n\t *\n\t * @param dimensions\n\t * @param bitRatio\n\t * @returns {*|TextureDimensions}\n\t */\n\tgetMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {\n\t\tconst [w, h, d] = dimensions;\n\t\tconst totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);\n\t\tconst texelCount = totalArea / (4 / bitRatio);\n\t\treturn utils.closestSquareDimensions(texelCount);\n\t},\n\n\troundTo(n, d) {\n\t\treturn Math.floor((n + d - 1) / d) * d;\n\t},\n\t/**\n\t * @desc Return the dimension of an array.\n\t * @param {Array|String|Texture|Input} x - The array\n\t * @param {Boolean} [pad] - To include padding in the dimension calculation\n\t * @returns {OutputDimensions}\n\t */\n\tgetDimensions(x, pad) {\n\t\tlet ret;\n\t\tif (utils.isArray(x)) {\n\t\t\tconst dim = [];\n\t\t\tlet temp = x;\n\t\t\twhile (utils.isArray(temp)) {\n\t\t\t\tdim.push(temp.length);\n\t\t\t\ttemp = temp[0];\n\t\t\t}\n\t\t\tret = dim.reverse();\n\t\t} else if (x instanceof Texture) {\n\t\t\tret = x.output;\n\t\t} else if (x instanceof Input) {\n\t\t\tret = x.size;\n\t\t} else {\n\t\t\tthrow new Error(`Unknown dimensions of ${x}`);\n\t\t}\n\n\t\tif (pad) {\n\t\t\tret = Array.from(ret);\n\t\t\twhile (ret.length < 3) {\n\t\t\t\tret.push(1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Int32Array(ret);\n\t},\n\n\t/**\n\t * Puts a nested 2d array into a one-dimensional target array\n\t * @param {Array|*} array\n\t * @param {Float32Array|Float64Array} target\n\t */\n\tflatten2dArrayTo(array, target) {\n\t\tlet offset = 0;\n\t\tfor (let y = 0; y < array.length; y++) {\n\t\t\ttarget.set(array[y], offset);\n\t\t\toffset += array[y].length;\n\t\t}\n\t},\n\n\t/**\n\t * Puts a nested 3d array into a one-dimensional target array\n\t * @param {Array|*} array\n\t * @param {Float32Array|Float64Array} target\n\t */\n\tflatten3dArrayTo(array, target) {\n\t\tlet offset = 0;\n\t\tfor (let z = 0; z < array.length; z++) {\n\t\t\tfor (let y = 0; y < array[z].length; y++) {\n\t\t\t\ttarget.set(array[z][y], offset);\n\t\t\t\toffset += array[z][y].length;\n\t\t\t}\n\t\t}\n\t},\n\n\t/**\n\t * Puts a nested 1d, 2d, or 3d array into a one-dimensional target array\n\t * @param {Float32Array|Uint16Array|Uint8Array} array\n\t * @param {Float32Array} target\n\t */\n\tflattenTo(array, target) {\n\t\tif (utils.isArray(array[0])) {\n\t\t\tif (utils.isArray(array[0][0])) {\n\t\t\t\tutils.flatten3dArrayTo(array, target);\n\t\t\t} else {\n\t\t\t\tutils.flatten2dArrayTo(array, target);\n\t\t\t}\n\t\t} else {\n\t\t\ttarget.set(array);\n\t\t}\n\t},\n\n\t/**\n\t *\n\t * @desc Splits an array into smaller arrays.\n\t * Number of elements in one small chunk is given by `part`\n\t *\n\t * @param {Number[]} array - The array to split into chunks\n\t * @param {Number} part - elements in one chunk\n\t *\n\t * @returns {Number[]} An array of smaller chunks\n\t */\n\tsplitArray(array, part) {\n\t\tconst result = [];\n\t\tfor (let i = 0; i < array.length; i += part) {\n\t\t\tresult.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));\n\t\t}\n\t\treturn result;\n\t},\n\n\tgetAstString(source, ast) {\n\t\tconst lines = Array.isArray(source) ? source : source.split(/\\r?\\n/g);\n\t\tconst start = ast.loc.start;\n\t\tconst end = ast.loc.end;\n\t\tconst result = [];\n\t\tresult.push(lines[start.line - 1].slice(start.column));\n\t\tfor (let i = start.line; i < end.line - 1; i++) {\n\t\t\tresult.push(lines[i]);\n\t\t}\n\t\tresult.push(lines[end.line - 1].slice(0, end.column));\n\t\treturn result.join('\\n');\n\t},\n\n\tallPropertiesOf(obj) {\n\t\tconst props = [];\n\n\t\tdo {\n\t\t\tprops.push.apply(props, Object.getOwnPropertyNames(obj));\n\t\t} while (obj = Object.getPrototypeOf(obj));\n\n\t\treturn props;\n\t},\n\n\t/**\n\t * @param {Array} lines - An Array of strings\n\t * @returns {String} Single combined String, seperated by *\\n*\n\t */\n\tlinesToString(lines) {\n\t\tif (lines.length > 0) {\n\t\t\treturn lines.join(';\\n') + ';\\n';\n\t\t} else {\n\t\t\treturn '\\n';\n\t\t}\n\t},\n\twarnDeprecated(type, oldName, newName) {\n\t\tif (newName) {\n\t\t\tconsole.warn(`You are using a deprecated ${ type } \"${ oldName }\". It has been replaced with \"${ newName }\". Fixing, but please upgrade as it will soon be removed.`);\n\t\t} else {\n\t\t\tconsole.warn(`You are using a deprecated ${ type } \"${ oldName }\". It has been removed. Fixing, but please upgrade as it will soon be removed.`);\n\t\t}\n\t},\n\t/**\n\t *\n\t * @param {String|Function} source\n\t * @param {IFunctionSettings} [settings]\n\t * @returns {IFunction}\n\t */\n\tfunctionToIFunction(source, settings) {\n\t\tsettings = settings || {};\n\t\tif (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');\n\t\tconst sourceString = typeof source === 'string' ? source : source.toString();\n\n\t\tlet argumentTypes = [];\n\n\t\tif (Array.isArray(settings.argumentTypes)) {\n\t\t\targumentTypes = settings.argumentTypes;\n\t\t} else if (typeof settings.argumentTypes === 'object') {\n\t\t\targumentTypes = utils.getArgumentNamesFromString(sourceString)\n\t\t\t\t.map(name => settings.argumentTypes[name]) || [];\n\t\t} else {\n\t\t\targumentTypes = settings.argumentTypes || [];\n\t\t}\n\n\t\treturn {\n\t\t\tsource: sourceString,\n\t\t\targumentTypes,\n\t\t\treturnType: settings.returnType || null,\n\t\t};\n\t}\n};\n\nconst _systemEndianness = utils.getSystemEndianness();\n\nmodule.exports = {\n\tutils\n};\n\n//# sourceURL=webpack:///./node_modules/gpu.js/src/utils.js?");

/***/ })

/******/ });